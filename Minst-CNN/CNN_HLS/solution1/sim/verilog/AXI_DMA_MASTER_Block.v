// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AXI_DMA_MASTER_Block (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        stream_in_V_V_dout,
        stream_in_V_V_empty_n,
        stream_in_V_V_read,
        stream_out_TDATA,
        stream_out_TVALID,
        stream_out_TREADY,
        stream_out_TLAST
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_state13 = 25'd4096;
parameter    ap_ST_fsm_state14 = 25'd8192;
parameter    ap_ST_fsm_state15 = 25'd16384;
parameter    ap_ST_fsm_pp0_stage0 = 25'd32768;
parameter    ap_ST_fsm_state19 = 25'd65536;
parameter    ap_ST_fsm_state20 = 25'd131072;
parameter    ap_ST_fsm_state21 = 25'd262144;
parameter    ap_ST_fsm_state22 = 25'd524288;
parameter    ap_ST_fsm_state23 = 25'd1048576;
parameter    ap_ST_fsm_state24 = 25'd2097152;
parameter    ap_ST_fsm_state25 = 25'd4194304;
parameter    ap_ST_fsm_state26 = 25'd8388608;
parameter    ap_ST_fsm_pp1_stage0 = 25'd16777216;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] stream_in_V_V_dout;
input   stream_in_V_V_empty_n;
output   stream_in_V_V_read;
output  [7:0] stream_out_TDATA;
output   stream_out_TVALID;
input   stream_out_TREADY;
output   stream_out_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg stream_in_V_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] stream_out_V_data_V_1_data_out;
reg    stream_out_V_data_V_1_vld_in;
wire    stream_out_V_data_V_1_vld_out;
wire    stream_out_V_data_V_1_ack_in;
wire    stream_out_V_data_V_1_ack_out;
reg   [7:0] stream_out_V_data_V_1_payload_A;
reg   [7:0] stream_out_V_data_V_1_payload_B;
reg    stream_out_V_data_V_1_sel_rd;
reg    stream_out_V_data_V_1_sel_wr;
wire    stream_out_V_data_V_1_sel;
wire    stream_out_V_data_V_1_load_A;
wire    stream_out_V_data_V_1_load_B;
reg   [1:0] stream_out_V_data_V_1_state;
wire    stream_out_V_data_V_1_state_cmp_full;
reg    stream_out_V_last_1_data_in;
reg    stream_out_V_last_1_data_out;
reg    stream_out_V_last_1_vld_in;
wire    stream_out_V_last_1_vld_out;
wire    stream_out_V_last_1_ack_in;
wire    stream_out_V_last_1_ack_out;
reg    stream_out_V_last_1_payload_A;
reg    stream_out_V_last_1_payload_B;
reg    stream_out_V_last_1_sel_rd;
reg    stream_out_V_last_1_sel_wr;
wire    stream_out_V_last_1_sel;
wire    stream_out_V_last_1_load_A;
wire    stream_out_V_last_1_load_B;
reg   [1:0] stream_out_V_last_1_state;
wire    stream_out_V_last_1_state_cmp_full;
reg    stream_in_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] tmp_76_reg_351;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_77_reg_301;
reg    stream_out_TDATA_blk_n;
wire    ap_CS_fsm_state8;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] tmp_76_reg_351_pp1_iter1_reg;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] tmp_77_reg_301_pp0_iter1_reg;
reg   [28:0] i1_reg_72;
reg   [28:0] i_reg_83;
reg  signed [7:0] reg_94;
reg    ap_block_state1;
wire    ap_block_state16_pp0_stage0_iter0;
reg    ap_block_state17_pp0_stage0_iter1;
reg    ap_block_state17_io;
wire    ap_block_state18_pp0_stage0_iter2;
reg    ap_block_state18_io;
reg    ap_block_pp0_stage0_11001;
wire    ap_block_state27_pp1_stage0_iter0;
reg    ap_block_state28_pp1_stage0_iter1;
reg    ap_block_state28_io;
wire    ap_block_state29_pp1_stage0_iter2;
reg    ap_block_state29_io;
reg    ap_block_pp1_stage0_11001;
reg   [7:0] reg_99;
wire   [0:0] tmp_s_fu_104_p2;
reg   [0:0] tmp_s_reg_231;
reg  signed [7:0] tmp_V_105_reg_235;
reg  signed [7:0] tmp_V_106_reg_242;
reg  signed [7:0] tmp_V_109_reg_248;
wire   [15:0] r_V_7_fu_117_p2;
reg  signed [15:0] r_V_7_reg_255;
wire   [15:0] r_V_fu_126_p2;
reg  signed [15:0] r_V_reg_260;
wire    ap_CS_fsm_state9;
wire  signed [23:0] grp_fu_207_p2;
reg  signed [23:0] r_V_9_reg_275;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire  signed [29:0] grp_fu_213_p2;
reg  signed [29:0] r_V_1_reg_290;
wire    ap_CS_fsm_state14;
(* use_dsp48 = "no" *) wire   [29:0] tmp_75_fu_144_p2;
reg   [29:0] tmp_75_reg_296;
wire    ap_CS_fsm_state15;
wire   [0:0] tmp_77_fu_153_p2;
wire   [28:0] i_10_fu_158_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_last_1_fu_164_p2;
reg   [0:0] tmp_last_1_reg_310;
wire    ap_CS_fsm_state20;
wire  signed [23:0] grp_fu_219_p2;
reg  signed [23:0] r_V_8_reg_325;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire  signed [29:0] grp_fu_225_p2;
reg  signed [29:0] r_V_s_reg_340;
wire    ap_CS_fsm_state25;
(* use_dsp48 = "no" *) wire   [29:0] tmp_74_fu_182_p2;
reg   [29:0] tmp_74_reg_346;
wire    ap_CS_fsm_state26;
wire   [0:0] tmp_76_fu_191_p2;
wire   [28:0] i_9_fu_196_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] tmp_last_fu_202_p2;
reg   [0:0] tmp_last_reg_360;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state16;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state27;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp1_stage0_01001;
wire  signed [7:0] lhs_V_fu_110_p0;
wire  signed [7:0] r_V_7_fu_117_p0;
wire  signed [15:0] lhs_V_fu_110_p1;
wire  signed [7:0] r_V_7_fu_117_p1;
wire  signed [7:0] r_V_fu_126_p0;
wire  signed [7:0] r_V_fu_126_p1;
wire   [29:0] i1_cast_fu_149_p1;
wire   [29:0] i_cast_fu_187_p1;
wire    ap_CS_fsm_state19;
reg    ap_block_state19;
reg   [24:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 25'd1;
#0 stream_out_V_data_V_1_sel_rd = 1'b0;
#0 stream_out_V_data_V_1_sel_wr = 1'b0;
#0 stream_out_V_data_V_1_state = 2'd0;
#0 stream_out_V_last_1_sel_rd = 1'b0;
#0 stream_out_V_last_1_sel_wr = 1'b0;
#0 stream_out_V_last_1_state = 2'd0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

cnn_mul_mul_16s_8bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
cnn_mul_mul_16s_8bkb_U76(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(r_V_7_reg_255),
    .din1(tmp_V_105_reg_235),
    .ce(1'b1),
    .dout(grp_fu_207_p2)
);

cnn_mul_mul_24s_8cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 30 ))
cnn_mul_mul_24s_8cud_U77(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(r_V_9_reg_275),
    .din1(tmp_V_105_reg_235),
    .ce(1'b1),
    .dout(grp_fu_213_p2)
);

cnn_mul_mul_16s_8bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
cnn_mul_mul_16s_8bkb_U78(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(r_V_reg_260),
    .din1(tmp_V_109_reg_248),
    .ce(1'b1),
    .dout(grp_fu_219_p2)
);

cnn_mul_mul_24s_8cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 30 ))
cnn_mul_mul_24s_8cud_U79(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(r_V_8_reg_325),
    .din1(reg_94),
    .ce(1'b1),
    .dout(grp_fu_225_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_out_V_last_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state19))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state16) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state16)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state16);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state27) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state26)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state27)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state27);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state26)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_data_V_1_ack_out == 1'b1) & (stream_out_V_data_V_1_vld_out == 1'b1))) begin
            stream_out_V_data_V_1_sel_rd <= ~stream_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_data_V_1_ack_in == 1'b1) & (stream_out_V_data_V_1_vld_in == 1'b1))) begin
            stream_out_V_data_V_1_sel_wr <= ~stream_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_data_V_1_state == 2'd2) & (stream_out_V_data_V_1_vld_in == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_V_data_V_1_vld_in == 1'b0) & (stream_out_V_data_V_1_ack_out == 1'b1)))) begin
            stream_out_V_data_V_1_state <= 2'd2;
        end else if ((((stream_out_V_data_V_1_state == 2'd1) & (stream_out_V_data_V_1_ack_out == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_V_data_V_1_ack_out == 1'b0) & (stream_out_V_data_V_1_vld_in == 1'b1)))) begin
            stream_out_V_data_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_data_V_1_vld_in == 1'b0) & (stream_out_V_data_V_1_ack_out == 1'b1)) & ~((stream_out_V_data_V_1_ack_out == 1'b0) & (stream_out_V_data_V_1_vld_in == 1'b1)) & (stream_out_V_data_V_1_state == 2'd3)) | ((stream_out_V_data_V_1_state == 2'd1) & (stream_out_V_data_V_1_ack_out == 1'b1)) | ((stream_out_V_data_V_1_state == 2'd2) & (stream_out_V_data_V_1_vld_in == 1'b1)))) begin
            stream_out_V_data_V_1_state <= 2'd3;
        end else begin
            stream_out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_last_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_last_1_ack_out == 1'b1) & (stream_out_V_last_1_vld_out == 1'b1))) begin
            stream_out_V_last_1_sel_rd <= ~stream_out_V_last_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_last_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_last_1_ack_in == 1'b1) & (stream_out_V_last_1_vld_in == 1'b1))) begin
            stream_out_V_last_1_sel_wr <= ~stream_out_V_last_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_last_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_last_1_state == 2'd2) & (stream_out_V_last_1_vld_in == 1'b0)) | ((stream_out_V_last_1_state == 2'd3) & (stream_out_V_last_1_vld_in == 1'b0) & (stream_out_V_last_1_ack_out == 1'b1)))) begin
            stream_out_V_last_1_state <= 2'd2;
        end else if ((((stream_out_V_last_1_state == 2'd1) & (stream_out_V_last_1_ack_out == 1'b0)) | ((stream_out_V_last_1_state == 2'd3) & (stream_out_V_last_1_ack_out == 1'b0) & (stream_out_V_last_1_vld_in == 1'b1)))) begin
            stream_out_V_last_1_state <= 2'd1;
        end else if (((~((stream_out_V_last_1_vld_in == 1'b0) & (stream_out_V_last_1_ack_out == 1'b1)) & ~((stream_out_V_last_1_ack_out == 1'b0) & (stream_out_V_last_1_vld_in == 1'b1)) & (stream_out_V_last_1_state == 2'd3)) | ((stream_out_V_last_1_state == 2'd1) & (stream_out_V_last_1_ack_out == 1'b1)) | ((stream_out_V_last_1_state == 2'd2) & (stream_out_V_last_1_vld_in == 1'b1)))) begin
            stream_out_V_last_1_state <= 2'd3;
        end else begin
            stream_out_V_last_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_77_fu_153_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i1_reg_72 <= i_10_fu_158_p2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        i1_reg_72 <= 29'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_76_fu_191_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_reg_83 <= i_9_fu_196_p2;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        i_reg_83 <= 29'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        r_V_1_reg_290 <= grp_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_reg_231 == 1'd0) & (stream_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        r_V_7_reg_255 <= r_V_7_fu_117_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        r_V_8_reg_325 <= grp_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        r_V_9_reg_275 <= grp_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_reg_231 == 1'd1) & (stream_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        r_V_reg_260 <= r_V_fu_126_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        r_V_s_reg_340 <= grp_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_done_reg == 1'b1) | (stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_77_reg_301 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_76_reg_351 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        reg_94 <= stream_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)))) begin
        reg_99 <= stream_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_data_V_1_load_A == 1'b1)) begin
        stream_out_V_data_V_1_payload_A <= stream_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_data_V_1_load_B == 1'b1)) begin
        stream_out_V_data_V_1_payload_B <= stream_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_last_1_load_A == 1'b1)) begin
        stream_out_V_last_1_payload_A <= stream_out_V_last_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_last_1_load_B == 1'b1)) begin
        stream_out_V_last_1_payload_B <= stream_out_V_last_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tmp_74_reg_346 <= tmp_74_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_75_reg_296 <= tmp_75_fu_144_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_76_reg_351 <= tmp_76_fu_191_p2;
        tmp_76_reg_351_pp1_iter1_reg <= tmp_76_reg_351;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_77_reg_301 <= tmp_77_fu_153_p2;
        tmp_77_reg_301_pp0_iter1_reg <= tmp_77_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_V_105_reg_235 <= stream_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_V_106_reg_242 <= stream_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_V_109_reg_248 <= stream_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_77_fu_153_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_last_1_reg_310 <= tmp_last_1_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_76_fu_191_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_last_reg_360 <= tmp_last_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_s_reg_231 <= tmp_s_fu_104_p2;
    end
end

always @ (*) begin
    if ((tmp_77_fu_153_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state16 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state16 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_76_fu_191_p2 == 1'd0)) begin
        ap_condition_pp1_exit_iter0_state27 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state27 = 1'b0;
    end
end

always @ (*) begin
    if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_out_V_last_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state19))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_out_V_last_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state19))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_77_reg_301 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_76_reg_351 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        stream_in_V_V_blk_n = stream_in_V_V_empty_n;
    end else begin
        stream_in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_77_reg_301 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_76_reg_351 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        stream_in_V_V_read = 1'b1;
    end else begin
        stream_in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_77_reg_301_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((tmp_77_reg_301 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_76_reg_351_pp1_iter1_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((tmp_76_reg_351 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        stream_out_TDATA_blk_n = stream_out_V_data_V_1_state[1'd1];
    end else begin
        stream_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((stream_out_V_data_V_1_sel == 1'b1)) begin
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_B;
    end else begin
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_77_reg_301 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_76_reg_351 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        stream_out_V_data_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_76_reg_351 == 1'd1) & (1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        stream_out_V_last_1_data_in = tmp_last_reg_360;
    end else if (((tmp_77_reg_301 == 1'd1) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_out_V_last_1_data_in = tmp_last_1_reg_310;
    end else if (((~((ap_done_reg == 1'b1) | (stream_in_V_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((stream_in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((stream_in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((stream_in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((stream_in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((stream_in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((stream_in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        stream_out_V_last_1_data_in = 1'd0;
    end else begin
        stream_out_V_last_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((stream_out_V_last_1_sel == 1'b1)) begin
        stream_out_V_last_1_data_out = stream_out_V_last_1_payload_B;
    end else begin
        stream_out_V_last_1_data_out = stream_out_V_last_1_payload_A;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_77_reg_301 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_76_reg_351 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        stream_out_V_last_1_vld_in = 1'b1;
    end else begin
        stream_out_V_last_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((tmp_s_reg_231 == 1'd1) & (stream_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else if (((tmp_s_reg_231 == 1'd0) & (stream_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((tmp_77_fu_153_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((tmp_77_fu_153_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_out_V_last_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((tmp_76_fu_191_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((tmp_76_fu_191_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((tmp_77_reg_301 == 1'd1) & (stream_in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state18_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state17_io) | ((tmp_77_reg_301 == 1'd1) & (stream_in_V_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state18_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state17_io) | ((tmp_77_reg_301 == 1'd1) & (stream_in_V_V_empty_n == 1'b0)))));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((tmp_76_reg_351 == 1'd1) & (stream_in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state29_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state28_io) | ((tmp_76_reg_351 == 1'd1) & (stream_in_V_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state29_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state28_io) | ((tmp_76_reg_351 == 1'd1) & (stream_in_V_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (stream_in_V_V_empty_n == 1'b0) | (ap_start == 1'b0));
end

assign ap_block_state16_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_io = ((tmp_77_reg_301 == 1'd1) & (stream_out_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state17_pp0_stage0_iter1 = ((tmp_77_reg_301 == 1'd1) & (stream_in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state18_io = ((tmp_77_reg_301_pp0_iter1_reg == 1'd1) & (stream_out_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state18_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19 = ((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_out_V_last_1_ack_in == 1'b0));
end

assign ap_block_state27_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state28_io = ((tmp_76_reg_351 == 1'd1) & (stream_out_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state28_pp1_stage0_iter1 = ((tmp_76_reg_351 == 1'd1) & (stream_in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state29_io = ((tmp_76_reg_351_pp1_iter1_reg == 1'd1) & (stream_out_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state29_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign i1_cast_fu_149_p1 = i1_reg_72;

assign i_10_fu_158_p2 = (i1_reg_72 + 29'd1);

assign i_9_fu_196_p2 = (i_reg_83 + 29'd1);

assign i_cast_fu_187_p1 = i_reg_83;

assign lhs_V_fu_110_p0 = reg_99;

assign lhs_V_fu_110_p1 = lhs_V_fu_110_p0;

assign r_V_7_fu_117_p0 = lhs_V_fu_110_p1;

assign r_V_7_fu_117_p1 = tmp_V_106_reg_242;

assign r_V_7_fu_117_p2 = ($signed(r_V_7_fu_117_p0) * $signed(r_V_7_fu_117_p1));

assign r_V_fu_126_p0 = tmp_V_109_reg_248;

assign r_V_fu_126_p1 = lhs_V_fu_110_p1;

assign r_V_fu_126_p2 = ($signed(r_V_fu_126_p0) * $signed(r_V_fu_126_p1));

assign stream_out_TDATA = stream_out_V_data_V_1_data_out;

assign stream_out_TLAST = stream_out_V_last_1_data_out;

assign stream_out_TVALID = stream_out_V_last_1_state[1'd0];

assign stream_out_V_data_V_1_ack_in = stream_out_V_data_V_1_state[1'd1];

assign stream_out_V_data_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_data_V_1_load_A = (stream_out_V_data_V_1_state_cmp_full & ~stream_out_V_data_V_1_sel_wr);

assign stream_out_V_data_V_1_load_B = (stream_out_V_data_V_1_state_cmp_full & stream_out_V_data_V_1_sel_wr);

assign stream_out_V_data_V_1_sel = stream_out_V_data_V_1_sel_rd;

assign stream_out_V_data_V_1_state_cmp_full = ((stream_out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_data_V_1_vld_out = stream_out_V_data_V_1_state[1'd0];

assign stream_out_V_last_1_ack_in = stream_out_V_last_1_state[1'd1];

assign stream_out_V_last_1_ack_out = stream_out_TREADY;

assign stream_out_V_last_1_load_A = (stream_out_V_last_1_state_cmp_full & ~stream_out_V_last_1_sel_wr);

assign stream_out_V_last_1_load_B = (stream_out_V_last_1_state_cmp_full & stream_out_V_last_1_sel_wr);

assign stream_out_V_last_1_sel = stream_out_V_last_1_sel_rd;

assign stream_out_V_last_1_state_cmp_full = ((stream_out_V_last_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_last_1_vld_out = stream_out_V_last_1_state[1'd0];

assign tmp_74_fu_182_p2 = ($signed(r_V_s_reg_340) + $signed(30'd1073741823));

assign tmp_75_fu_144_p2 = ($signed(r_V_1_reg_290) + $signed(30'd1073741823));

assign tmp_76_fu_191_p2 = (($signed(i_cast_fu_187_p1) < $signed(r_V_s_reg_340)) ? 1'b1 : 1'b0);

assign tmp_77_fu_153_p2 = (($signed(i1_cast_fu_149_p1) < $signed(r_V_1_reg_290)) ? 1'b1 : 1'b0);

assign tmp_last_1_fu_164_p2 = ((i1_cast_fu_149_p1 == tmp_75_reg_296) ? 1'b1 : 1'b0);

assign tmp_last_fu_202_p2 = ((i_cast_fu_187_p1 == tmp_74_reg_346) ? 1'b1 : 1'b0);

assign tmp_s_fu_104_p2 = ((stream_in_V_V_dout == 8'd0) ? 1'b1 : 1'b0);

endmodule //AXI_DMA_MASTER_Block
