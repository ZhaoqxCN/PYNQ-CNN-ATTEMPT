// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FC_128_10_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        stream_in_V_V_dout,
        stream_in_V_V_empty_n,
        stream_in_V_V_read,
        stream_out_V_V_din,
        stream_out_V_V_full_n,
        stream_out_V_V_write
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_pp0_stage0 = 23'd16384;
parameter    ap_ST_fsm_state17 = 23'd32768;
parameter    ap_ST_fsm_state18 = 23'd65536;
parameter    ap_ST_fsm_pp1_stage0 = 23'd131072;
parameter    ap_ST_fsm_state22 = 23'd262144;
parameter    ap_ST_fsm_pp2_stage0 = 23'd524288;
parameter    ap_ST_fsm_state31 = 23'd1048576;
parameter    ap_ST_fsm_pp3_stage0 = 23'd2097152;
parameter    ap_ST_fsm_state35 = 23'd4194304;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] stream_in_V_V_dout;
input   stream_in_V_V_empty_n;
output   stream_in_V_V_read;
output  [15:0] stream_out_V_V_din;
input   stream_out_V_V_full_n;
output   stream_out_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg stream_in_V_V_read;
reg[15:0] stream_out_V_V_din;
reg stream_out_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [3:0] A_V_3_0_address0;
reg    A_V_3_0_ce0;
wire   [7:0] A_V_3_0_q0;
wire   [3:0] A_V_3_0_address1;
reg    A_V_3_0_ce1;
reg    A_V_3_0_we1;
wire   [3:0] A_V_3_1_address0;
reg    A_V_3_1_ce0;
wire   [7:0] A_V_3_1_q0;
wire   [3:0] A_V_3_1_address1;
reg    A_V_3_1_ce1;
reg    A_V_3_1_we1;
wire   [3:0] A_V_3_2_address0;
reg    A_V_3_2_ce0;
wire   [7:0] A_V_3_2_q0;
wire   [3:0] A_V_3_2_address1;
reg    A_V_3_2_ce1;
reg    A_V_3_2_we1;
wire   [3:0] A_V_3_3_address0;
reg    A_V_3_3_ce0;
wire   [7:0] A_V_3_3_q0;
wire   [3:0] A_V_3_3_address1;
reg    A_V_3_3_ce1;
reg    A_V_3_3_we1;
wire   [3:0] A_V_3_4_address0;
reg    A_V_3_4_ce0;
wire   [7:0] A_V_3_4_q0;
wire   [3:0] A_V_3_4_address1;
reg    A_V_3_4_ce1;
reg    A_V_3_4_we1;
wire   [3:0] A_V_3_5_address0;
reg    A_V_3_5_ce0;
wire   [7:0] A_V_3_5_q0;
wire   [3:0] A_V_3_5_address1;
reg    A_V_3_5_ce1;
reg    A_V_3_5_we1;
wire   [3:0] A_V_3_6_address0;
reg    A_V_3_6_ce0;
wire   [7:0] A_V_3_6_q0;
wire   [3:0] A_V_3_6_address1;
reg    A_V_3_6_ce1;
reg    A_V_3_6_we1;
wire   [3:0] A_V_3_7_address0;
reg    A_V_3_7_ce0;
wire   [7:0] A_V_3_7_q0;
wire   [3:0] A_V_3_7_address1;
reg    A_V_3_7_ce1;
reg    A_V_3_7_we1;
wire   [7:0] B_V_3_0_address0;
reg    B_V_3_0_ce0;
wire   [7:0] B_V_3_0_q0;
wire   [7:0] B_V_3_0_address1;
reg    B_V_3_0_ce1;
reg    B_V_3_0_we1;
wire   [7:0] B_V_3_1_address0;
reg    B_V_3_1_ce0;
wire   [7:0] B_V_3_1_q0;
wire   [7:0] B_V_3_1_address1;
reg    B_V_3_1_ce1;
reg    B_V_3_1_we1;
wire   [7:0] B_V_3_2_address0;
reg    B_V_3_2_ce0;
wire   [7:0] B_V_3_2_q0;
wire   [7:0] B_V_3_2_address1;
reg    B_V_3_2_ce1;
reg    B_V_3_2_we1;
wire   [7:0] B_V_3_3_address0;
reg    B_V_3_3_ce0;
wire   [7:0] B_V_3_3_q0;
wire   [7:0] B_V_3_3_address1;
reg    B_V_3_3_ce1;
reg    B_V_3_3_we1;
wire   [7:0] B_V_3_4_address0;
reg    B_V_3_4_ce0;
wire   [7:0] B_V_3_4_q0;
wire   [7:0] B_V_3_4_address1;
reg    B_V_3_4_ce1;
reg    B_V_3_4_we1;
wire   [7:0] B_V_3_5_address0;
reg    B_V_3_5_ce0;
wire   [7:0] B_V_3_5_q0;
wire   [7:0] B_V_3_5_address1;
reg    B_V_3_5_ce1;
reg    B_V_3_5_we1;
wire   [7:0] B_V_3_6_address0;
reg    B_V_3_6_ce0;
wire   [7:0] B_V_3_6_q0;
wire   [7:0] B_V_3_6_address1;
reg    B_V_3_6_ce1;
reg    B_V_3_6_we1;
wire   [7:0] B_V_3_7_address0;
reg    B_V_3_7_ce0;
wire   [7:0] B_V_3_7_q0;
wire   [7:0] B_V_3_7_address1;
reg    B_V_3_7_ce1;
reg    B_V_3_7_we1;
reg    stream_in_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage0;
reg   [0:0] exitcond_flatten_reg_1461;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_19_reg_1183;
reg    stream_out_V_V_blk_n;
reg    ap_enable_reg_pp2_iter7;
wire    ap_block_pp2_stage0;
reg   [0:0] ifzero_reg_1348;
reg   [0:0] ifzero_reg_1348_pp2_iter6_reg;
reg   [30:0] i4_reg_598;
reg   [7:0] i1_reg_620;
reg   [10:0] indvar_flatten6_reg_631;
reg   [3:0] i2_reg_642;
reg   [7:0] p_0_reg_653;
reg   [7:0] j3_reg_665;
reg   [10:0] indvar_flatten_reg_676;
reg   [3:0] i_reg_687;
reg   [7:0] j_reg_698;
reg   [15:0] tmp_V_reg_1118;
reg    ap_block_state1;
reg   [15:0] tmp_V_19_reg_1124;
reg    ap_block_state2;
reg  signed [15:0] tmp_V_21_reg_1129;
reg    ap_block_state3;
reg  signed [15:0] tmp_V_23_reg_1134;
reg    ap_block_state4;
reg  signed [15:0] tmp_V_27_reg_1139;
reg    ap_block_state6;
wire   [0:0] tmp_s_fu_709_p2;
reg    ap_block_state7;
wire   [0:0] tmp_16_fu_714_p2;
wire  signed [31:0] tmp_17_fu_725_p1;
wire  signed [31:0] grp_fu_1106_p2;
reg  signed [31:0] tmp1_reg_1168;
wire    ap_CS_fsm_state9;
wire  signed [31:0] grp_fu_1112_p2;
reg  signed [31:0] tmp2_reg_1173;
wire   [31:0] grp_fu_728_p2;
reg   [31:0] KER_bound_reg_1178;
wire    ap_CS_fsm_state14;
wire   [0:0] tmp_19_fu_736_p2;
wire    ap_block_state15_pp0_stage0_iter0;
reg    ap_block_state16_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] i_4_fu_741_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_18_fu_751_p2;
wire    ap_CS_fsm_state18;
wire   [14:0] num_img_2_fu_756_p2;
reg   [14:0] num_img_2_reg_1196;
wire   [0:0] exitcond7_fu_762_p2;
wire    ap_block_state19_pp1_stage0_iter0;
reg    ap_block_state20_pp1_stage0_iter1;
wire    ap_block_state21_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [7:0] i_5_fu_768_p2;
reg    ap_enable_reg_pp1_iter0;
reg   [3:0] arrayNo_cast_reg_1210;
reg   [3:0] arrayNo_cast_reg_1210_pp1_iter1_reg;
wire   [3:0] tmp_37_fu_784_p1;
reg   [3:0] tmp_37_reg_1214;
reg   [3:0] tmp_37_reg_1214_pp1_iter1_reg;
wire   [7:0] tmp_34_fu_788_p1;
reg   [7:0] tmp_34_reg_1219;
wire   [0:0] exitcond_flatten8_fu_803_p2;
reg   [0:0] exitcond_flatten8_reg_1231;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state23_pp2_stage0_iter0;
wire    ap_block_state24_pp2_stage0_iter1;
wire    ap_block_state25_pp2_stage0_iter2;
wire    ap_block_state26_pp2_stage0_iter3;
wire    ap_block_state27_pp2_stage0_iter4;
wire    ap_block_state28_pp2_stage0_iter5;
wire    ap_block_state29_pp2_stage0_iter6;
reg    ap_block_state30_pp2_stage0_iter7;
reg    ap_block_pp2_stage0_11001;
reg   [0:0] exitcond_flatten8_reg_1231_pp2_iter1_reg;
reg   [0:0] exitcond_flatten8_reg_1231_pp2_iter2_reg;
reg   [0:0] exitcond_flatten8_reg_1231_pp2_iter3_reg;
reg   [0:0] exitcond_flatten8_reg_1231_pp2_iter4_reg;
reg   [0:0] exitcond_flatten8_reg_1231_pp2_iter5_reg;
reg   [0:0] exitcond_flatten8_reg_1231_pp2_iter6_reg;
wire   [10:0] indvar_flatten_next7_fu_809_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] exitcond3_fu_821_p2;
reg   [0:0] exitcond3_reg_1240;
reg   [0:0] exitcond3_reg_1240_pp2_iter1_reg;
reg   [0:0] exitcond3_reg_1240_pp2_iter2_reg;
reg   [0:0] exitcond3_reg_1240_pp2_iter3_reg;
reg   [0:0] exitcond3_reg_1240_pp2_iter4_reg;
reg   [0:0] exitcond3_reg_1240_pp2_iter5_reg;
wire   [3:0] tmp_24_mid2_v_fu_835_p3;
reg   [3:0] tmp_24_mid2_v_reg_1245;
reg   [3:0] arrayNo2_reg_1251;
reg   [3:0] arrayNo2_reg_1251_pp2_iter1_reg;
reg   [3:0] arrayNo2_reg_1251_pp2_iter2_reg;
wire   [3:0] tmp_38_fu_853_p1;
reg   [3:0] tmp_38_reg_1256;
wire   [7:0] j_3_fu_857_p2;
reg   [7:0] j_3_reg_1262;
wire   [0:0] ifzero_fu_892_p2;
reg   [0:0] ifzero_reg_1348_pp2_iter2_reg;
reg   [0:0] ifzero_reg_1348_pp2_iter3_reg;
reg   [0:0] ifzero_reg_1348_pp2_iter4_reg;
reg   [0:0] ifzero_reg_1348_pp2_iter5_reg;
reg   [7:0] A_V_3_0_load_reg_1352;
reg    ap_enable_reg_pp2_iter2;
reg   [7:0] A_V_3_1_load_reg_1357;
reg   [7:0] A_V_3_2_load_reg_1362;
reg   [7:0] A_V_3_3_load_reg_1367;
reg   [7:0] A_V_3_4_load_reg_1372;
reg   [7:0] A_V_3_5_load_reg_1377;
reg   [7:0] A_V_3_6_load_reg_1382;
reg   [7:0] A_V_3_7_load_reg_1387;
reg   [7:0] B_V_3_0_load_reg_1392;
reg   [7:0] B_V_3_1_load_reg_1397;
reg   [7:0] B_V_3_2_load_reg_1402;
reg   [7:0] B_V_3_3_load_reg_1407;
reg   [7:0] B_V_3_4_load_reg_1412;
reg   [7:0] B_V_3_5_load_reg_1417;
reg   [7:0] B_V_3_6_load_reg_1422;
reg   [7:0] B_V_3_7_load_reg_1427;
wire   [7:0] tmp_24_fu_900_p10;
reg   [7:0] tmp_24_reg_1432;
wire   [7:0] tmp_25_fu_914_p10;
reg   [7:0] tmp_25_reg_1437;
wire   [15:0] r_V_fu_934_p2;
reg   [15:0] r_V_reg_1442;
reg   [15:0] r_V_reg_1442_pp2_iter5_reg;
reg   [7:0] tmp_27_reg_1449;
wire   [7:0] buf_V_fu_995_p2;
reg   [7:0] buf_V_reg_1454;
reg    ap_enable_reg_pp2_iter6;
wire   [0:0] exitcond_flatten_fu_1024_p2;
wire    ap_block_state32_pp3_stage0_iter0;
reg    ap_block_state33_pp3_stage0_iter1;
wire    ap_block_state34_pp3_stage0_iter2;
reg    ap_block_pp3_stage0_11001;
wire   [10:0] indvar_flatten_next_fu_1030_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [3:0] tmp_18_mid2_v_fu_1056_p3;
reg   [3:0] tmp_18_mid2_v_reg_1470;
reg   [3:0] tmp_18_mid2_v_reg_1470_pp3_iter1_reg;
reg   [3:0] arrayNo1_cast_reg_1476;
reg   [3:0] arrayNo1_cast_reg_1476_pp3_iter1_reg;
wire   [3:0] tmp_33_fu_1074_p1;
reg   [3:0] tmp_33_reg_1480;
reg   [3:0] tmp_33_reg_1480_pp3_iter1_reg;
wire   [7:0] j_2_fu_1078_p2;
wire   [7:0] tmp_26_fu_1084_p1;
reg   [7:0] tmp_26_reg_1490;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state15;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state19;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state22;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state23;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state32;
reg    ap_enable_reg_pp3_iter2;
reg   [14:0] num_img_reg_609;
wire    ap_CS_fsm_state31;
reg   [3:0] ap_phi_mux_i2_phi_fu_646_p4;
reg   [7:0] ap_phi_mux_p_0_phi_fu_657_p4;
reg   [7:0] ap_phi_mux_j3_phi_fu_669_p4;
reg   [3:0] ap_phi_mux_i_phi_fu_691_p4;
wire   [63:0] newIndex9_fu_792_p1;
wire   [63:0] tmp_36_fu_880_p1;
wire   [63:0] newIndex1_fu_863_p1;
wire   [63:0] tmp_31_fu_1094_p1;
reg    ap_block_state5;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] Outbuf_V_fu_1019_p1;
reg    ap_block_pp2_stage0_01001;
reg    ap_block_pp3_stage0_01001;
wire    ap_CS_fsm_state10;
wire   [31:0] i4_cast_fu_732_p1;
wire   [15:0] num_img_cast_fu_747_p1;
wire   [3:0] i_6_fu_815_p2;
wire   [7:0] j3_mid2_fu_827_p3;
wire   [7:0] tmp_35_fu_874_p3;
wire   [31:0] arrayNo2_cast_fu_897_p1;
wire  signed [7:0] r_V_fu_934_p0;
wire  signed [7:0] r_V_fu_934_p1;
wire   [16:0] tmp_38_tr6_fu_940_p1;
wire   [16:0] p_neg_fu_943_p2;
wire   [0:0] tmp_39_fu_966_p3;
wire   [7:0] tmp_29_fu_973_p2;
wire   [7:0] tmp_30_fu_978_p4;
wire   [7:0] tmp_32_fu_987_p3;
wire   [7:0] p_0_mid2_fu_959_p3;
wire   [0:0] tmp_41_fu_1004_p3;
wire   [6:0] tmp_40_fu_1001_p1;
wire   [6:0] x_V_y_V_i_fu_1011_p3;
wire   [0:0] exitcond_fu_1042_p2;
wire   [3:0] i_3_fu_1036_p2;
wire   [7:0] j_mid2_fu_1048_p3;
wire   [7:0] tmp_28_fu_1088_p3;
wire  signed [15:0] grp_fu_1106_p0;
wire  signed [15:0] grp_fu_1106_p1;
reg    grp_fu_1106_ce;
wire    ap_CS_fsm_state8;
reg    grp_fu_1112_ce;
wire    ap_CS_fsm_state17;
reg   [22:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 23'd1;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
end

FC_1152_128_s_A_VbAo #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
A_V_3_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_3_0_address0),
    .ce0(A_V_3_0_ce0),
    .q0(A_V_3_0_q0),
    .address1(A_V_3_0_address1),
    .ce1(A_V_3_0_ce1),
    .we1(A_V_3_0_we1),
    .d1(tmp_34_reg_1219)
);

FC_1152_128_s_A_VbAo #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
A_V_3_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_3_1_address0),
    .ce0(A_V_3_1_ce0),
    .q0(A_V_3_1_q0),
    .address1(A_V_3_1_address1),
    .ce1(A_V_3_1_ce1),
    .we1(A_V_3_1_we1),
    .d1(tmp_34_reg_1219)
);

FC_1152_128_s_A_VbAo #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
A_V_3_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_3_2_address0),
    .ce0(A_V_3_2_ce0),
    .q0(A_V_3_2_q0),
    .address1(A_V_3_2_address1),
    .ce1(A_V_3_2_ce1),
    .we1(A_V_3_2_we1),
    .d1(tmp_34_reg_1219)
);

FC_1152_128_s_A_VbAo #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
A_V_3_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_3_3_address0),
    .ce0(A_V_3_3_ce0),
    .q0(A_V_3_3_q0),
    .address1(A_V_3_3_address1),
    .ce1(A_V_3_3_ce1),
    .we1(A_V_3_3_we1),
    .d1(tmp_34_reg_1219)
);

FC_1152_128_s_A_VbAo #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
A_V_3_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_3_4_address0),
    .ce0(A_V_3_4_ce0),
    .q0(A_V_3_4_q0),
    .address1(A_V_3_4_address1),
    .ce1(A_V_3_4_ce1),
    .we1(A_V_3_4_we1),
    .d1(tmp_34_reg_1219)
);

FC_1152_128_s_A_VbAo #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
A_V_3_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_3_5_address0),
    .ce0(A_V_3_5_ce0),
    .q0(A_V_3_5_q0),
    .address1(A_V_3_5_address1),
    .ce1(A_V_3_5_ce1),
    .we1(A_V_3_5_we1),
    .d1(tmp_34_reg_1219)
);

FC_1152_128_s_A_VbAo #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
A_V_3_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_3_6_address0),
    .ce0(A_V_3_6_ce0),
    .q0(A_V_3_6_q0),
    .address1(A_V_3_6_address1),
    .ce1(A_V_3_6_ce1),
    .we1(A_V_3_6_we1),
    .d1(tmp_34_reg_1219)
);

FC_1152_128_s_A_VbAo #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
A_V_3_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_3_7_address0),
    .ce0(A_V_3_7_ce0),
    .q0(A_V_3_7_q0),
    .address1(A_V_3_7_address1),
    .ce1(A_V_3_7_ce1),
    .we1(A_V_3_7_we1),
    .d1(tmp_34_reg_1219)
);

FC_128_10_s_B_V_3_0 #(
    .DataWidth( 8 ),
    .AddressRange( 160 ),
    .AddressWidth( 8 ))
B_V_3_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_V_3_0_address0),
    .ce0(B_V_3_0_ce0),
    .q0(B_V_3_0_q0),
    .address1(B_V_3_0_address1),
    .ce1(B_V_3_0_ce1),
    .we1(B_V_3_0_we1),
    .d1(tmp_26_reg_1490)
);

FC_128_10_s_B_V_3_0 #(
    .DataWidth( 8 ),
    .AddressRange( 160 ),
    .AddressWidth( 8 ))
B_V_3_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_V_3_1_address0),
    .ce0(B_V_3_1_ce0),
    .q0(B_V_3_1_q0),
    .address1(B_V_3_1_address1),
    .ce1(B_V_3_1_ce1),
    .we1(B_V_3_1_we1),
    .d1(tmp_26_reg_1490)
);

FC_128_10_s_B_V_3_0 #(
    .DataWidth( 8 ),
    .AddressRange( 160 ),
    .AddressWidth( 8 ))
B_V_3_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_V_3_2_address0),
    .ce0(B_V_3_2_ce0),
    .q0(B_V_3_2_q0),
    .address1(B_V_3_2_address1),
    .ce1(B_V_3_2_ce1),
    .we1(B_V_3_2_we1),
    .d1(tmp_26_reg_1490)
);

FC_128_10_s_B_V_3_0 #(
    .DataWidth( 8 ),
    .AddressRange( 160 ),
    .AddressWidth( 8 ))
B_V_3_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_V_3_3_address0),
    .ce0(B_V_3_3_ce0),
    .q0(B_V_3_3_q0),
    .address1(B_V_3_3_address1),
    .ce1(B_V_3_3_ce1),
    .we1(B_V_3_3_we1),
    .d1(tmp_26_reg_1490)
);

FC_128_10_s_B_V_3_0 #(
    .DataWidth( 8 ),
    .AddressRange( 160 ),
    .AddressWidth( 8 ))
B_V_3_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_V_3_4_address0),
    .ce0(B_V_3_4_ce0),
    .q0(B_V_3_4_q0),
    .address1(B_V_3_4_address1),
    .ce1(B_V_3_4_ce1),
    .we1(B_V_3_4_we1),
    .d1(tmp_26_reg_1490)
);

FC_128_10_s_B_V_3_0 #(
    .DataWidth( 8 ),
    .AddressRange( 160 ),
    .AddressWidth( 8 ))
B_V_3_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_V_3_5_address0),
    .ce0(B_V_3_5_ce0),
    .q0(B_V_3_5_q0),
    .address1(B_V_3_5_address1),
    .ce1(B_V_3_5_ce1),
    .we1(B_V_3_5_we1),
    .d1(tmp_26_reg_1490)
);

FC_128_10_s_B_V_3_0 #(
    .DataWidth( 8 ),
    .AddressRange( 160 ),
    .AddressWidth( 8 ))
B_V_3_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_V_3_6_address0),
    .ce0(B_V_3_6_ce0),
    .q0(B_V_3_6_q0),
    .address1(B_V_3_6_address1),
    .ce1(B_V_3_6_ce1),
    .we1(B_V_3_6_we1),
    .d1(tmp_26_reg_1490)
);

FC_128_10_s_B_V_3_0 #(
    .DataWidth( 8 ),
    .AddressRange( 160 ),
    .AddressWidth( 8 ))
B_V_3_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_V_3_7_address0),
    .ce0(B_V_3_7_ce0),
    .q0(B_V_3_7_q0),
    .address1(B_V_3_7_address1),
    .ce1(B_V_3_7_ce1),
    .we1(B_V_3_7_we1),
    .d1(tmp_26_reg_1490)
);

cnn_mul_32s_32s_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_mul_32s_32s_3bkb_U50(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp2_reg_1173),
    .din1(tmp1_reg_1168),
    .ce(1'b1),
    .dout(grp_fu_728_p2)
);

cnn_mux_832_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
cnn_mux_832_8_1_1_U51(
    .din0(A_V_3_0_load_reg_1352),
    .din1(A_V_3_1_load_reg_1357),
    .din2(A_V_3_2_load_reg_1362),
    .din3(A_V_3_3_load_reg_1367),
    .din4(A_V_3_4_load_reg_1372),
    .din5(A_V_3_5_load_reg_1377),
    .din6(A_V_3_6_load_reg_1382),
    .din7(A_V_3_7_load_reg_1387),
    .din8(arrayNo2_cast_fu_897_p1),
    .dout(tmp_24_fu_900_p10)
);

cnn_mux_832_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
cnn_mux_832_8_1_1_U52(
    .din0(B_V_3_0_load_reg_1392),
    .din1(B_V_3_1_load_reg_1397),
    .din2(B_V_3_2_load_reg_1402),
    .din3(B_V_3_3_load_reg_1407),
    .din4(B_V_3_4_load_reg_1412),
    .din5(B_V_3_5_load_reg_1417),
    .din6(B_V_3_6_load_reg_1422),
    .din7(B_V_3_7_load_reg_1427),
    .din8(arrayNo2_cast_fu_897_p1),
    .dout(tmp_25_fu_914_p10)
);

cnn_mul_mul_16s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
cnn_mul_mul_16s_1cud_U53(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1106_p0),
    .din1(grp_fu_1106_p1),
    .ce(grp_fu_1106_ce),
    .dout(grp_fu_1106_p2)
);

cnn_mul_mul_16s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
cnn_mul_mul_16s_1cud_U54(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_V_23_reg_1134),
    .din1(tmp_V_27_reg_1139),
    .ce(grp_fu_1112_ce),
    .dout(grp_fu_1112_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state15) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state15))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state15);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state19) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((tmp_18_fu_751_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state19)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state19);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((tmp_18_fu_751_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state23) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state23)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state23);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_enable_reg_pp2_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state32) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (tmp_s_fu_709_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state32)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state32);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (tmp_s_fu_709_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond7_fu_762_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i1_reg_620 <= i_5_fu_768_p2;
    end else if (((tmp_18_fu_751_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        i1_reg_620 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        i2_reg_642 <= 4'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten8_reg_1231 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i2_reg_642 <= tmp_24_mid2_v_reg_1245;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_19_fu_736_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i4_reg_598 <= i_4_fu_741_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        i4_reg_598 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (tmp_s_fu_709_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_reg_687 <= 4'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (exitcond_flatten_reg_1461 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        i_reg_687 <= tmp_18_mid2_v_reg_1470;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        indvar_flatten6_reg_631 <= 11'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten8_fu_803_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        indvar_flatten6_reg_631 <= indvar_flatten_next7_fu_809_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (tmp_s_fu_709_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        indvar_flatten_reg_676 <= 11'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (exitcond_flatten_fu_1024_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        indvar_flatten_reg_676 <= indvar_flatten_next_fu_1030_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        j3_reg_665 <= 8'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten8_reg_1231 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        j3_reg_665 <= j_3_reg_1262;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (tmp_s_fu_709_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        j_reg_698 <= 8'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (exitcond_flatten_fu_1024_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        j_reg_698 <= j_2_fu_1078_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (tmp_16_fu_714_p2 == 1'd1) & (tmp_s_fu_709_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        num_img_reg_609 <= 15'd0;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        num_img_reg_609 <= num_img_2_reg_1196;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        p_0_reg_653 <= 8'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten8_reg_1231_pp2_iter6_reg == 1'd0) & (ap_enable_reg_pp2_iter7 == 1'b1))) begin
        p_0_reg_653 <= buf_V_reg_1454;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten8_reg_1231_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        A_V_3_0_load_reg_1352 <= A_V_3_0_q0;
        A_V_3_1_load_reg_1357 <= A_V_3_1_q0;
        A_V_3_2_load_reg_1362 <= A_V_3_2_q0;
        A_V_3_3_load_reg_1367 <= A_V_3_3_q0;
        A_V_3_4_load_reg_1372 <= A_V_3_4_q0;
        A_V_3_5_load_reg_1377 <= A_V_3_5_q0;
        A_V_3_6_load_reg_1382 <= A_V_3_6_q0;
        A_V_3_7_load_reg_1387 <= A_V_3_7_q0;
        B_V_3_0_load_reg_1392 <= B_V_3_0_q0;
        B_V_3_1_load_reg_1397 <= B_V_3_1_q0;
        B_V_3_2_load_reg_1402 <= B_V_3_2_q0;
        B_V_3_3_load_reg_1407 <= B_V_3_3_q0;
        B_V_3_4_load_reg_1412 <= B_V_3_4_q0;
        B_V_3_5_load_reg_1417 <= B_V_3_5_q0;
        B_V_3_6_load_reg_1422 <= B_V_3_6_q0;
        B_V_3_7_load_reg_1427 <= B_V_3_7_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        KER_bound_reg_1178 <= grp_fu_728_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (exitcond_flatten_fu_1024_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        arrayNo1_cast_reg_1476 <= {{j_mid2_fu_1048_p3[7:4]}};
        tmp_33_reg_1480 <= tmp_33_fu_1074_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        arrayNo1_cast_reg_1476_pp3_iter1_reg <= arrayNo1_cast_reg_1476;
        exitcond_flatten_reg_1461 <= exitcond_flatten_fu_1024_p2;
        tmp_18_mid2_v_reg_1470_pp3_iter1_reg <= tmp_18_mid2_v_reg_1470;
        tmp_33_reg_1480_pp3_iter1_reg <= tmp_33_reg_1480;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten8_fu_803_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        arrayNo2_reg_1251 <= {{j3_mid2_fu_827_p3[7:4]}};
        exitcond3_reg_1240 <= exitcond3_fu_821_p2;
        tmp_38_reg_1256 <= tmp_38_fu_853_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        arrayNo2_reg_1251_pp2_iter1_reg <= arrayNo2_reg_1251;
        exitcond3_reg_1240_pp2_iter1_reg <= exitcond3_reg_1240;
        exitcond_flatten8_reg_1231 <= exitcond_flatten8_fu_803_p2;
        exitcond_flatten8_reg_1231_pp2_iter1_reg <= exitcond_flatten8_reg_1231;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        arrayNo2_reg_1251_pp2_iter2_reg <= arrayNo2_reg_1251_pp2_iter1_reg;
        exitcond3_reg_1240_pp2_iter2_reg <= exitcond3_reg_1240_pp2_iter1_reg;
        exitcond3_reg_1240_pp2_iter3_reg <= exitcond3_reg_1240_pp2_iter2_reg;
        exitcond3_reg_1240_pp2_iter4_reg <= exitcond3_reg_1240_pp2_iter3_reg;
        exitcond3_reg_1240_pp2_iter5_reg <= exitcond3_reg_1240_pp2_iter4_reg;
        exitcond_flatten8_reg_1231_pp2_iter2_reg <= exitcond_flatten8_reg_1231_pp2_iter1_reg;
        exitcond_flatten8_reg_1231_pp2_iter3_reg <= exitcond_flatten8_reg_1231_pp2_iter2_reg;
        exitcond_flatten8_reg_1231_pp2_iter4_reg <= exitcond_flatten8_reg_1231_pp2_iter3_reg;
        exitcond_flatten8_reg_1231_pp2_iter5_reg <= exitcond_flatten8_reg_1231_pp2_iter4_reg;
        exitcond_flatten8_reg_1231_pp2_iter6_reg <= exitcond_flatten8_reg_1231_pp2_iter5_reg;
        ifzero_reg_1348_pp2_iter2_reg <= ifzero_reg_1348;
        ifzero_reg_1348_pp2_iter3_reg <= ifzero_reg_1348_pp2_iter2_reg;
        ifzero_reg_1348_pp2_iter4_reg <= ifzero_reg_1348_pp2_iter3_reg;
        ifzero_reg_1348_pp2_iter5_reg <= ifzero_reg_1348_pp2_iter4_reg;
        ifzero_reg_1348_pp2_iter6_reg <= ifzero_reg_1348_pp2_iter5_reg;
        r_V_reg_1442_pp2_iter5_reg <= r_V_reg_1442;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond7_fu_762_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        arrayNo_cast_reg_1210 <= {{i1_reg_620[7:4]}};
        tmp_37_reg_1214 <= tmp_37_fu_784_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        arrayNo_cast_reg_1210_pp1_iter1_reg <= arrayNo_cast_reg_1210;
        tmp_34_reg_1219 <= tmp_34_fu_788_p1;
        tmp_37_reg_1214_pp1_iter1_reg <= tmp_37_reg_1214;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten8_reg_1231_pp2_iter5_reg == 1'd0) & (ap_enable_reg_pp2_iter6 == 1'b1))) begin
        buf_V_reg_1454 <= buf_V_fu_995_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten8_reg_1231 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ifzero_reg_1348 <= ifzero_fu_892_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten8_fu_803_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        j_3_reg_1262 <= j_3_fu_857_p2;
        tmp_24_mid2_v_reg_1245 <= tmp_24_mid2_v_fu_835_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        num_img_2_reg_1196 <= num_img_2_fu_756_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten8_reg_1231_pp2_iter3_reg == 1'd0))) begin
        r_V_reg_1442 <= r_V_fu_934_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp1_reg_1168 <= grp_fu_1106_p2;
        tmp2_reg_1173 <= grp_fu_1112_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (exitcond_flatten_fu_1024_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        tmp_18_mid2_v_reg_1470 <= tmp_18_mid2_v_fu_1056_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_19_reg_1183 <= tmp_19_fu_736_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten8_reg_1231_pp2_iter2_reg == 1'd0))) begin
        tmp_24_reg_1432 <= tmp_24_fu_900_p10;
        tmp_25_reg_1437 <= tmp_25_fu_914_p10;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (exitcond_flatten_reg_1461 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        tmp_26_reg_1490 <= tmp_26_fu_1084_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_flatten8_reg_1231_pp2_iter4_reg == 1'd0))) begin
        tmp_27_reg_1449 <= {{p_neg_fu_943_p2[13:6]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_V_19_reg_1124 <= stream_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_V_21_reg_1129 <= stream_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_V_23_reg_1134 <= stream_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_V_27_reg_1139 <= stream_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_reg_1118 <= stream_in_V_V_dout;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_3_0_ce0 = 1'b1;
    end else begin
        A_V_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        A_V_3_0_ce1 = 1'b1;
    end else begin
        A_V_3_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((arrayNo_cast_reg_1210_pp1_iter1_reg == 4'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        A_V_3_0_we1 = 1'b1;
    end else begin
        A_V_3_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_3_1_ce0 = 1'b1;
    end else begin
        A_V_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        A_V_3_1_ce1 = 1'b1;
    end else begin
        A_V_3_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((arrayNo_cast_reg_1210_pp1_iter1_reg == 4'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        A_V_3_1_we1 = 1'b1;
    end else begin
        A_V_3_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_3_2_ce0 = 1'b1;
    end else begin
        A_V_3_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        A_V_3_2_ce1 = 1'b1;
    end else begin
        A_V_3_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((arrayNo_cast_reg_1210_pp1_iter1_reg == 4'd2) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        A_V_3_2_we1 = 1'b1;
    end else begin
        A_V_3_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_3_3_ce0 = 1'b1;
    end else begin
        A_V_3_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        A_V_3_3_ce1 = 1'b1;
    end else begin
        A_V_3_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((arrayNo_cast_reg_1210_pp1_iter1_reg == 4'd3) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        A_V_3_3_we1 = 1'b1;
    end else begin
        A_V_3_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_3_4_ce0 = 1'b1;
    end else begin
        A_V_3_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        A_V_3_4_ce1 = 1'b1;
    end else begin
        A_V_3_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((arrayNo_cast_reg_1210_pp1_iter1_reg == 4'd4) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        A_V_3_4_we1 = 1'b1;
    end else begin
        A_V_3_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_3_5_ce0 = 1'b1;
    end else begin
        A_V_3_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        A_V_3_5_ce1 = 1'b1;
    end else begin
        A_V_3_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((arrayNo_cast_reg_1210_pp1_iter1_reg == 4'd5) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        A_V_3_5_we1 = 1'b1;
    end else begin
        A_V_3_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_3_6_ce0 = 1'b1;
    end else begin
        A_V_3_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        A_V_3_6_ce1 = 1'b1;
    end else begin
        A_V_3_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((arrayNo_cast_reg_1210_pp1_iter1_reg == 4'd6) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        A_V_3_6_we1 = 1'b1;
    end else begin
        A_V_3_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_3_7_ce0 = 1'b1;
    end else begin
        A_V_3_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        A_V_3_7_ce1 = 1'b1;
    end else begin
        A_V_3_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~(arrayNo_cast_reg_1210_pp1_iter1_reg == 4'd0) & ~(arrayNo_cast_reg_1210_pp1_iter1_reg == 4'd1) & ~(arrayNo_cast_reg_1210_pp1_iter1_reg == 4'd2) & ~(arrayNo_cast_reg_1210_pp1_iter1_reg == 4'd3) & ~(arrayNo_cast_reg_1210_pp1_iter1_reg == 4'd4) & ~(arrayNo_cast_reg_1210_pp1_iter1_reg == 4'd5) & ~(arrayNo_cast_reg_1210_pp1_iter1_reg == 4'd6) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        A_V_3_7_we1 = 1'b1;
    end else begin
        A_V_3_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        B_V_3_0_ce0 = 1'b1;
    end else begin
        B_V_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        B_V_3_0_ce1 = 1'b1;
    end else begin
        B_V_3_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((arrayNo1_cast_reg_1476_pp3_iter1_reg == 4'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        B_V_3_0_we1 = 1'b1;
    end else begin
        B_V_3_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        B_V_3_1_ce0 = 1'b1;
    end else begin
        B_V_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        B_V_3_1_ce1 = 1'b1;
    end else begin
        B_V_3_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((arrayNo1_cast_reg_1476_pp3_iter1_reg == 4'd1) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        B_V_3_1_we1 = 1'b1;
    end else begin
        B_V_3_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        B_V_3_2_ce0 = 1'b1;
    end else begin
        B_V_3_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        B_V_3_2_ce1 = 1'b1;
    end else begin
        B_V_3_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((arrayNo1_cast_reg_1476_pp3_iter1_reg == 4'd2) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        B_V_3_2_we1 = 1'b1;
    end else begin
        B_V_3_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        B_V_3_3_ce0 = 1'b1;
    end else begin
        B_V_3_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        B_V_3_3_ce1 = 1'b1;
    end else begin
        B_V_3_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((arrayNo1_cast_reg_1476_pp3_iter1_reg == 4'd3) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        B_V_3_3_we1 = 1'b1;
    end else begin
        B_V_3_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        B_V_3_4_ce0 = 1'b1;
    end else begin
        B_V_3_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        B_V_3_4_ce1 = 1'b1;
    end else begin
        B_V_3_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((arrayNo1_cast_reg_1476_pp3_iter1_reg == 4'd4) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        B_V_3_4_we1 = 1'b1;
    end else begin
        B_V_3_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        B_V_3_5_ce0 = 1'b1;
    end else begin
        B_V_3_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        B_V_3_5_ce1 = 1'b1;
    end else begin
        B_V_3_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((arrayNo1_cast_reg_1476_pp3_iter1_reg == 4'd5) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        B_V_3_5_we1 = 1'b1;
    end else begin
        B_V_3_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        B_V_3_6_ce0 = 1'b1;
    end else begin
        B_V_3_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        B_V_3_6_ce1 = 1'b1;
    end else begin
        B_V_3_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((arrayNo1_cast_reg_1476_pp3_iter1_reg == 4'd6) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        B_V_3_6_we1 = 1'b1;
    end else begin
        B_V_3_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        B_V_3_7_ce0 = 1'b1;
    end else begin
        B_V_3_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        B_V_3_7_ce1 = 1'b1;
    end else begin
        B_V_3_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~(arrayNo1_cast_reg_1476_pp3_iter1_reg == 4'd6) & ~(arrayNo1_cast_reg_1476_pp3_iter1_reg == 4'd5) & ~(arrayNo1_cast_reg_1476_pp3_iter1_reg == 4'd4) & ~(arrayNo1_cast_reg_1476_pp3_iter1_reg == 4'd3) & ~(arrayNo1_cast_reg_1476_pp3_iter1_reg == 4'd2) & ~(arrayNo1_cast_reg_1476_pp3_iter1_reg == 4'd1) & ~(arrayNo1_cast_reg_1476_pp3_iter1_reg == 4'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        B_V_3_7_we1 = 1'b1;
    end else begin
        B_V_3_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_19_fu_736_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state15 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state15 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond7_fu_762_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state19 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state19 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten8_fu_803_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state23 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state23 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_1024_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state32 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state32 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (exitcond_flatten8_reg_1231 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_i2_phi_fu_646_p4 = tmp_24_mid2_v_reg_1245;
    end else begin
        ap_phi_mux_i2_phi_fu_646_p4 = i2_reg_642;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_1461 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        ap_phi_mux_i_phi_fu_691_p4 = tmp_18_mid2_v_reg_1470;
    end else begin
        ap_phi_mux_i_phi_fu_691_p4 = i_reg_687;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (exitcond_flatten8_reg_1231 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_j3_phi_fu_669_p4 = j_3_reg_1262;
    end else begin
        ap_phi_mux_j3_phi_fu_669_p4 = j3_reg_665;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (exitcond_flatten8_reg_1231_pp2_iter6_reg == 1'd0) & (ap_enable_reg_pp2_iter7 == 1'b1))) begin
        ap_phi_mux_p_0_phi_fu_657_p4 = buf_V_reg_1454;
    end else begin
        ap_phi_mux_p_0_phi_fu_657_p4 = p_0_reg_653;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)))) begin
        grp_fu_1106_ce = 1'b1;
    end else begin
        grp_fu_1106_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)))) begin
        grp_fu_1112_ce = 1'b1;
    end else begin
        grp_fu_1112_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_19_reg_1183 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((exitcond_flatten_reg_1461 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        stream_in_V_V_blk_n = stream_in_V_V_empty_n;
    end else begin
        stream_in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (tmp_19_reg_1183 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (exitcond_flatten_reg_1461 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        stream_in_V_V_read = 1'b1;
    end else begin
        stream_in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp2_stage0) & (ifzero_reg_1348_pp2_iter6_reg == 1'd1) & (ap_enable_reg_pp2_iter7 == 1'b1)) | ((tmp_19_reg_1183 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((exitcond_flatten_reg_1461 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        stream_out_V_V_blk_n = stream_out_V_V_full_n;
    end else begin
        stream_out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_01001) & (ifzero_reg_1348_pp2_iter6_reg == 1'd1) & (ap_enable_reg_pp2_iter7 == 1'b1))) begin
        stream_out_V_V_din = Outbuf_V_fu_1019_p1;
    end else if (((~((ap_done_reg == 1'b1) | (stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_01001) & (tmp_19_reg_1183 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp3_stage0_01001) & (exitcond_flatten_reg_1461 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        stream_out_V_V_din = stream_in_V_V_dout;
    end else begin
        stream_out_V_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ifzero_reg_1348_pp2_iter6_reg == 1'd1) & (ap_enable_reg_pp2_iter7 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (tmp_19_reg_1183 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (exitcond_flatten_reg_1461 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        stream_out_V_V_write = 1'b1;
    end else begin
        stream_out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (tmp_s_fu_709_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (tmp_16_fu_714_p2 == 1'd1) & (tmp_s_fu_709_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (tmp_16_fu_714_p2 == 1'd0) & (tmp_s_fu_709_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (tmp_19_fu_736_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (tmp_19_fu_736_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state18 : begin
            if (((tmp_18_fu_751_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond7_fu_762_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond7_fu_762_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (exitcond_flatten8_fu_803_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (exitcond_flatten8_fu_803_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (exitcond_flatten_fu_1024_p2 == 1'd1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (exitcond_flatten_fu_1024_p2 == 1'd1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_V_3_0_address0 = newIndex1_fu_863_p1;

assign A_V_3_0_address1 = newIndex9_fu_792_p1;

assign A_V_3_1_address0 = newIndex1_fu_863_p1;

assign A_V_3_1_address1 = newIndex9_fu_792_p1;

assign A_V_3_2_address0 = newIndex1_fu_863_p1;

assign A_V_3_2_address1 = newIndex9_fu_792_p1;

assign A_V_3_3_address0 = newIndex1_fu_863_p1;

assign A_V_3_3_address1 = newIndex9_fu_792_p1;

assign A_V_3_4_address0 = newIndex1_fu_863_p1;

assign A_V_3_4_address1 = newIndex9_fu_792_p1;

assign A_V_3_5_address0 = newIndex1_fu_863_p1;

assign A_V_3_5_address1 = newIndex9_fu_792_p1;

assign A_V_3_6_address0 = newIndex1_fu_863_p1;

assign A_V_3_6_address1 = newIndex9_fu_792_p1;

assign A_V_3_7_address0 = newIndex1_fu_863_p1;

assign A_V_3_7_address1 = newIndex9_fu_792_p1;

assign B_V_3_0_address0 = tmp_36_fu_880_p1;

assign B_V_3_0_address1 = tmp_31_fu_1094_p1;

assign B_V_3_1_address0 = tmp_36_fu_880_p1;

assign B_V_3_1_address1 = tmp_31_fu_1094_p1;

assign B_V_3_2_address0 = tmp_36_fu_880_p1;

assign B_V_3_2_address1 = tmp_31_fu_1094_p1;

assign B_V_3_3_address0 = tmp_36_fu_880_p1;

assign B_V_3_3_address1 = tmp_31_fu_1094_p1;

assign B_V_3_4_address0 = tmp_36_fu_880_p1;

assign B_V_3_4_address1 = tmp_31_fu_1094_p1;

assign B_V_3_5_address0 = tmp_36_fu_880_p1;

assign B_V_3_5_address1 = tmp_31_fu_1094_p1;

assign B_V_3_6_address0 = tmp_36_fu_880_p1;

assign B_V_3_6_address1 = tmp_31_fu_1094_p1;

assign B_V_3_7_address0 = tmp_36_fu_880_p1;

assign B_V_3_7_address1 = tmp_31_fu_1094_p1;

assign Outbuf_V_fu_1019_p1 = x_V_y_V_i_fu_1011_p3;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_19_reg_1183 == 1'd1) & (stream_out_V_V_full_n == 1'b0)) | ((tmp_19_reg_1183 == 1'd1) & (stream_in_V_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_19_reg_1183 == 1'd1) & (stream_out_V_V_full_n == 1'b0)) | ((tmp_19_reg_1183 == 1'd1) & (stream_in_V_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_19_reg_1183 == 1'd1) & (stream_out_V_V_full_n == 1'b0)) | ((tmp_19_reg_1183 == 1'd1) & (stream_in_V_V_empty_n == 1'b0))));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((stream_in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((stream_in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001 = ((ifzero_reg_1348_pp2_iter6_reg == 1'd1) & (stream_out_V_V_full_n == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((ifzero_reg_1348_pp2_iter6_reg == 1'd1) & (stream_out_V_V_full_n == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((ifzero_reg_1348_pp2_iter6_reg == 1'd1) & (stream_out_V_V_full_n == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b1));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_01001 = ((ap_enable_reg_pp3_iter1 == 1'b1) & (((stream_out_V_V_full_n == 1'b0) & (exitcond_flatten_reg_1461 == 1'd0)) | ((stream_in_V_V_empty_n == 1'b0) & (exitcond_flatten_reg_1461 == 1'd0))));
end

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((ap_enable_reg_pp3_iter1 == 1'b1) & (((stream_out_V_V_full_n == 1'b0) & (exitcond_flatten_reg_1461 == 1'd0)) | ((stream_in_V_V_empty_n == 1'b0) & (exitcond_flatten_reg_1461 == 1'd0))));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((ap_enable_reg_pp3_iter1 == 1'b1) & (((stream_out_V_V_full_n == 1'b0) & (exitcond_flatten_reg_1461 == 1'd0)) | ((stream_in_V_V_empty_n == 1'b0) & (exitcond_flatten_reg_1461 == 1'd0))));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0) | (real_start == 1'b0));
end

assign ap_block_state15_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_pp0_stage0_iter1 = (((tmp_19_reg_1183 == 1'd1) & (stream_out_V_V_full_n == 1'b0)) | ((tmp_19_reg_1183 == 1'd1) & (stream_in_V_V_empty_n == 1'b0)));
end

assign ap_block_state19_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2 = ((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state20_pp1_stage0_iter1 = (stream_in_V_V_empty_n == 1'b0);
end

assign ap_block_state21_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3 = ((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state30_pp2_stage0_iter7 = ((ifzero_reg_1348_pp2_iter6_reg == 1'd1) & (stream_out_V_V_full_n == 1'b0));
end

assign ap_block_state32_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state33_pp3_stage0_iter1 = (((stream_out_V_V_full_n == 1'b0) & (exitcond_flatten_reg_1461 == 1'd0)) | ((stream_in_V_V_empty_n == 1'b0) & (exitcond_flatten_reg_1461 == 1'd0)));
end

assign ap_block_state34_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4 = ((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state6 = ((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state7 = ((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign arrayNo2_cast_fu_897_p1 = arrayNo2_reg_1251_pp2_iter2_reg;

assign buf_V_fu_995_p2 = (tmp_32_fu_987_p3 + p_0_mid2_fu_959_p3);

assign exitcond3_fu_821_p2 = ((ap_phi_mux_j3_phi_fu_669_p4 == 8'd128) ? 1'b1 : 1'b0);

assign exitcond7_fu_762_p2 = ((i1_reg_620 == 8'd128) ? 1'b1 : 1'b0);

assign exitcond_flatten8_fu_803_p2 = ((indvar_flatten6_reg_631 == 11'd1280) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_1024_p2 = ((indvar_flatten_reg_676 == 11'd1280) ? 1'b1 : 1'b0);

assign exitcond_fu_1042_p2 = ((j_reg_698 == 8'd128) ? 1'b1 : 1'b0);

assign grp_fu_1106_p0 = tmp_17_fu_725_p1;

assign grp_fu_1106_p1 = tmp_17_fu_725_p1;

assign i4_cast_fu_732_p1 = i4_reg_598;

assign i_3_fu_1036_p2 = (4'd1 + ap_phi_mux_i_phi_fu_691_p4);

assign i_4_fu_741_p2 = (i4_reg_598 + 31'd1);

assign i_5_fu_768_p2 = (i1_reg_620 + 8'd1);

assign i_6_fu_815_p2 = (4'd1 + ap_phi_mux_i2_phi_fu_646_p4);

assign ifzero_fu_892_p2 = ((j_3_reg_1262 == 8'd128) ? 1'b1 : 1'b0);

assign indvar_flatten_next7_fu_809_p2 = (indvar_flatten6_reg_631 + 11'd1);

assign indvar_flatten_next_fu_1030_p2 = (indvar_flatten_reg_676 + 11'd1);

assign j3_mid2_fu_827_p3 = ((exitcond3_fu_821_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_j3_phi_fu_669_p4);

assign j_2_fu_1078_p2 = (j_mid2_fu_1048_p3 + 8'd1);

assign j_3_fu_857_p2 = (8'd1 + j3_mid2_fu_827_p3);

assign j_mid2_fu_1048_p3 = ((exitcond_fu_1042_p2[0:0] === 1'b1) ? 8'd0 : j_reg_698);

assign newIndex1_fu_863_p1 = tmp_38_reg_1256;

assign newIndex9_fu_792_p1 = tmp_37_reg_1214_pp1_iter1_reg;

assign num_img_2_fu_756_p2 = (num_img_reg_609 + 15'd1);

assign num_img_cast_fu_747_p1 = num_img_reg_609;

assign p_0_mid2_fu_959_p3 = ((exitcond3_reg_1240_pp2_iter5_reg[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_p_0_phi_fu_657_p4);

assign p_neg_fu_943_p2 = (17'd0 - tmp_38_tr6_fu_940_p1);

assign r_V_fu_934_p0 = tmp_25_reg_1437;

assign r_V_fu_934_p1 = tmp_24_reg_1432;

assign r_V_fu_934_p2 = ($signed(r_V_fu_934_p0) * $signed(r_V_fu_934_p1));

assign start_out = real_start;

assign tmp_16_fu_714_p2 = ((tmp_V_reg_1118 == 16'd0) ? 1'b1 : 1'b0);

assign tmp_17_fu_725_p1 = tmp_V_21_reg_1129;

assign tmp_18_fu_751_p2 = (($signed(num_img_cast_fu_747_p1) < $signed(tmp_V_19_reg_1124)) ? 1'b1 : 1'b0);

assign tmp_18_mid2_v_fu_1056_p3 = ((exitcond_fu_1042_p2[0:0] === 1'b1) ? i_3_fu_1036_p2 : ap_phi_mux_i_phi_fu_691_p4);

assign tmp_19_fu_736_p2 = (($signed(i4_cast_fu_732_p1) < $signed(KER_bound_reg_1178)) ? 1'b1 : 1'b0);

assign tmp_24_mid2_v_fu_835_p3 = ((exitcond3_fu_821_p2[0:0] === 1'b1) ? i_6_fu_815_p2 : ap_phi_mux_i2_phi_fu_646_p4);

assign tmp_26_fu_1084_p1 = stream_in_V_V_dout[7:0];

assign tmp_28_fu_1088_p3 = {{tmp_18_mid2_v_reg_1470_pp3_iter1_reg}, {tmp_33_reg_1480_pp3_iter1_reg}};

assign tmp_29_fu_973_p2 = (8'd0 - tmp_27_reg_1449);

assign tmp_30_fu_978_p4 = {{r_V_reg_1442_pp2_iter5_reg[13:6]}};

assign tmp_31_fu_1094_p1 = tmp_28_fu_1088_p3;

assign tmp_32_fu_987_p3 = ((tmp_39_fu_966_p3[0:0] === 1'b1) ? tmp_29_fu_973_p2 : tmp_30_fu_978_p4);

assign tmp_33_fu_1074_p1 = j_mid2_fu_1048_p3[3:0];

assign tmp_34_fu_788_p1 = stream_in_V_V_dout[7:0];

assign tmp_35_fu_874_p3 = {{tmp_24_mid2_v_reg_1245}, {tmp_38_reg_1256}};

assign tmp_36_fu_880_p1 = tmp_35_fu_874_p3;

assign tmp_37_fu_784_p1 = i1_reg_620[3:0];

assign tmp_38_fu_853_p1 = j3_mid2_fu_827_p3[3:0];

assign tmp_38_tr6_fu_940_p1 = r_V_reg_1442;

assign tmp_39_fu_966_p3 = r_V_reg_1442_pp2_iter5_reg[32'd15];

assign tmp_40_fu_1001_p1 = buf_V_reg_1454[6:0];

assign tmp_41_fu_1004_p3 = buf_V_reg_1454[32'd7];

assign tmp_s_fu_709_p2 = ((tmp_V_reg_1118 == 16'd4) ? 1'b1 : 1'b0);

assign x_V_y_V_i_fu_1011_p3 = ((tmp_41_fu_1004_p3[0:0] === 1'b1) ? 7'd0 : tmp_40_fu_1001_p1);

endmodule //FC_128_10_s
