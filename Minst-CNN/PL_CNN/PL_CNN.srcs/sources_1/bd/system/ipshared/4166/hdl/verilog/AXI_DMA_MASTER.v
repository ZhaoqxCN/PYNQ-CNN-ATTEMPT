// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AXI_DMA_MASTER (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        stream_in_V_V_dout,
        stream_in_V_V_empty_n,
        stream_in_V_V_read,
        stream_out_TDATA,
        stream_out_TVALID,
        stream_out_TREADY,
        stream_out_TLAST
);

parameter    ap_ST_fsm_state1 = 31'd1;
parameter    ap_ST_fsm_state2 = 31'd2;
parameter    ap_ST_fsm_state3 = 31'd4;
parameter    ap_ST_fsm_state4 = 31'd8;
parameter    ap_ST_fsm_state5 = 31'd16;
parameter    ap_ST_fsm_state6 = 31'd32;
parameter    ap_ST_fsm_state7 = 31'd64;
parameter    ap_ST_fsm_state8 = 31'd128;
parameter    ap_ST_fsm_state9 = 31'd256;
parameter    ap_ST_fsm_state10 = 31'd512;
parameter    ap_ST_fsm_state11 = 31'd1024;
parameter    ap_ST_fsm_state12 = 31'd2048;
parameter    ap_ST_fsm_state13 = 31'd4096;
parameter    ap_ST_fsm_state14 = 31'd8192;
parameter    ap_ST_fsm_state15 = 31'd16384;
parameter    ap_ST_fsm_state16 = 31'd32768;
parameter    ap_ST_fsm_state17 = 31'd65536;
parameter    ap_ST_fsm_state18 = 31'd131072;
parameter    ap_ST_fsm_pp0_stage0 = 31'd262144;
parameter    ap_ST_fsm_state22 = 31'd524288;
parameter    ap_ST_fsm_state23 = 31'd1048576;
parameter    ap_ST_fsm_state24 = 31'd2097152;
parameter    ap_ST_fsm_state25 = 31'd4194304;
parameter    ap_ST_fsm_state26 = 31'd8388608;
parameter    ap_ST_fsm_state27 = 31'd16777216;
parameter    ap_ST_fsm_state28 = 31'd33554432;
parameter    ap_ST_fsm_state29 = 31'd67108864;
parameter    ap_ST_fsm_state30 = 31'd134217728;
parameter    ap_ST_fsm_state31 = 31'd268435456;
parameter    ap_ST_fsm_state32 = 31'd536870912;
parameter    ap_ST_fsm_pp1_stage0 = 31'd1073741824;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] stream_in_V_V_dout;
input   stream_in_V_V_empty_n;
output   stream_in_V_V_read;
output  [15:0] stream_out_TDATA;
output   stream_out_TVALID;
input   stream_out_TREADY;
output   stream_out_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg stream_in_V_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [30:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] stream_out_V_data_V_1_data_out;
reg    stream_out_V_data_V_1_vld_in;
wire    stream_out_V_data_V_1_vld_out;
wire    stream_out_V_data_V_1_ack_in;
wire    stream_out_V_data_V_1_ack_out;
reg   [15:0] stream_out_V_data_V_1_payload_A;
reg   [15:0] stream_out_V_data_V_1_payload_B;
reg    stream_out_V_data_V_1_sel_rd;
reg    stream_out_V_data_V_1_sel_wr;
wire    stream_out_V_data_V_1_sel;
wire    stream_out_V_data_V_1_load_A;
wire    stream_out_V_data_V_1_load_B;
reg   [1:0] stream_out_V_data_V_1_state;
wire    stream_out_V_data_V_1_state_cmp_full;
reg    stream_out_V_last_1_data_in;
reg    stream_out_V_last_1_data_out;
reg    stream_out_V_last_1_vld_in;
wire    stream_out_V_last_1_vld_out;
wire    stream_out_V_last_1_ack_in;
wire    stream_out_V_last_1_ack_out;
reg    stream_out_V_last_1_payload_A;
reg    stream_out_V_last_1_payload_B;
reg    stream_out_V_last_1_sel_rd;
reg    stream_out_V_last_1_sel_wr;
wire    stream_out_V_last_1_sel;
wire    stream_out_V_last_1_load_A;
wire    stream_out_V_last_1_load_B;
reg   [1:0] stream_out_V_last_1_state;
wire    stream_out_V_last_1_state_cmp_full;
reg    stream_in_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] tmp_81_reg_335;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_82_reg_300;
reg    stream_out_TDATA_blk_n;
wire    ap_CS_fsm_state8;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] tmp_81_reg_335_pp1_iter1_reg;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] tmp_82_reg_300_pp0_iter1_reg;
reg   [30:0] i1_reg_92;
reg   [30:0] i_reg_103;
reg  signed [15:0] reg_114;
reg    ap_block_state1;
wire    ap_block_state19_pp0_stage0_iter0;
reg    ap_block_state20_pp0_stage0_iter1;
reg    ap_block_state20_io;
wire    ap_block_state21_pp0_stage0_iter2;
reg    ap_block_state21_io;
reg    ap_block_pp0_stage0_11001;
wire    ap_block_state33_pp1_stage0_iter0;
reg    ap_block_state34_pp1_stage0_iter1;
reg    ap_block_state34_io;
wire    ap_block_state35_pp1_stage0_iter2;
reg    ap_block_state35_io;
reg    ap_block_pp1_stage0_11001;
reg   [15:0] reg_119;
wire   [0:0] tmp_s_fu_124_p2;
reg   [0:0] tmp_s_reg_229;
reg  signed [15:0] tmp_V_101_reg_233;
reg  signed [15:0] tmp_V_102_reg_239;
reg  signed [15:0] tmp_V_105_reg_245;
wire  signed [31:0] lhs_V_fu_130_p1;
wire  signed [31:0] tmp_78_fu_137_p1;
wire  signed [31:0] rhs_V_fu_140_p1;
wire  signed [31:0] grp_fu_205_p2;
reg  signed [31:0] tmp5_reg_279;
wire    ap_CS_fsm_state10;
wire  signed [31:0] grp_fu_211_p2;
reg  signed [31:0] tmp6_reg_284;
wire   [31:0] grp_fu_147_p2;
reg   [31:0] KER_bound_reg_289;
wire    ap_CS_fsm_state17;
wire   [31:0] tmp_80_fu_151_p2;
reg   [31:0] tmp_80_reg_295;
wire    ap_CS_fsm_state18;
wire   [0:0] tmp_82_fu_160_p2;
wire   [30:0] i_5_fu_165_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_last_1_fu_171_p2;
reg   [0:0] tmp_last_1_reg_309;
wire  signed [31:0] grp_fu_217_p2;
reg  signed [31:0] tmp2_reg_314;
wire    ap_CS_fsm_state24;
wire  signed [31:0] grp_fu_223_p2;
reg  signed [31:0] tmp3_reg_319;
wire   [31:0] grp_fu_176_p2;
reg   [31:0] OFM_bound_reg_324;
wire    ap_CS_fsm_state31;
wire   [31:0] tmp_77_fu_180_p2;
reg   [31:0] tmp_77_reg_330;
wire    ap_CS_fsm_state32;
wire   [0:0] tmp_81_fu_189_p2;
wire   [30:0] i_13_fu_194_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] tmp_last_fu_200_p2;
reg   [0:0] tmp_last_reg_344;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state19;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state33;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp1_stage0_01001;
wire  signed [15:0] lhs_V_fu_130_p0;
wire    ap_CS_fsm_state11;
wire   [31:0] i1_cast_fu_156_p1;
wire    ap_CS_fsm_state25;
wire   [31:0] i_cast_fu_185_p1;
wire  signed [15:0] grp_fu_205_p0;
wire  signed [15:0] grp_fu_211_p0;
wire  signed [15:0] grp_fu_211_p1;
wire  signed [15:0] grp_fu_217_p1;
wire  signed [15:0] grp_fu_223_p0;
wire  signed [15:0] grp_fu_223_p1;
reg    grp_fu_205_ce;
wire    ap_CS_fsm_state9;
reg    grp_fu_211_ce;
reg    grp_fu_217_ce;
wire    ap_CS_fsm_state23;
reg    grp_fu_223_ce;
wire    ap_CS_fsm_state22;
reg    ap_block_state22;
reg   [30:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 31'd1;
#0 stream_out_V_data_V_1_sel_rd = 1'b0;
#0 stream_out_V_data_V_1_sel_wr = 1'b0;
#0 stream_out_V_data_V_1_state = 2'd0;
#0 stream_out_V_last_1_sel_rd = 1'b0;
#0 stream_out_V_last_1_sel_wr = 1'b0;
#0 stream_out_V_last_1_state = 2'd0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

cnn_mul_32s_32s_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_mul_32s_32s_3bkb_U59(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp6_reg_284),
    .din1(tmp5_reg_279),
    .ce(1'b1),
    .dout(grp_fu_147_p2)
);

cnn_mul_32s_32s_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_mul_32s_32s_3bkb_U60(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp3_reg_319),
    .din1(tmp2_reg_314),
    .ce(1'b1),
    .dout(grp_fu_176_p2)
);

cnn_mul_mul_16s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
cnn_mul_mul_16s_1cud_U61(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_205_p0),
    .din1(tmp_V_102_reg_239),
    .ce(grp_fu_205_ce),
    .dout(grp_fu_205_p2)
);

cnn_mul_mul_16s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
cnn_mul_mul_16s_1cud_U62(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_211_p0),
    .din1(grp_fu_211_p1),
    .ce(grp_fu_211_ce),
    .dout(grp_fu_211_p2)
);

cnn_mul_mul_16s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
cnn_mul_mul_16s_1cud_U63(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_114),
    .din1(grp_fu_217_p1),
    .ce(grp_fu_217_ce),
    .dout(grp_fu_217_p2)
);

cnn_mul_mul_16s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
cnn_mul_mul_16s_1cud_U64(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_223_p0),
    .din1(grp_fu_223_p1),
    .ce(grp_fu_223_ce),
    .dout(grp_fu_223_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_out_V_last_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state22))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state19) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state19)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state19);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state33) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state32)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state33)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state33);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state32)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_data_V_1_ack_out == 1'b1) & (stream_out_V_data_V_1_vld_out == 1'b1))) begin
            stream_out_V_data_V_1_sel_rd <= ~stream_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_data_V_1_ack_in == 1'b1) & (stream_out_V_data_V_1_vld_in == 1'b1))) begin
            stream_out_V_data_V_1_sel_wr <= ~stream_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_data_V_1_state == 2'd2) & (stream_out_V_data_V_1_vld_in == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_V_data_V_1_vld_in == 1'b0) & (stream_out_V_data_V_1_ack_out == 1'b1)))) begin
            stream_out_V_data_V_1_state <= 2'd2;
        end else if ((((stream_out_V_data_V_1_state == 2'd1) & (stream_out_V_data_V_1_ack_out == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_V_data_V_1_ack_out == 1'b0) & (stream_out_V_data_V_1_vld_in == 1'b1)))) begin
            stream_out_V_data_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_data_V_1_ack_out == 1'b0) & (stream_out_V_data_V_1_vld_in == 1'b1)) & ~((stream_out_V_data_V_1_vld_in == 1'b0) & (stream_out_V_data_V_1_ack_out == 1'b1)) & (stream_out_V_data_V_1_state == 2'd3)) | ((stream_out_V_data_V_1_state == 2'd1) & (stream_out_V_data_V_1_ack_out == 1'b1)) | ((stream_out_V_data_V_1_state == 2'd2) & (stream_out_V_data_V_1_vld_in == 1'b1)))) begin
            stream_out_V_data_V_1_state <= 2'd3;
        end else begin
            stream_out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_last_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_last_1_ack_out == 1'b1) & (stream_out_V_last_1_vld_out == 1'b1))) begin
            stream_out_V_last_1_sel_rd <= ~stream_out_V_last_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_last_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_last_1_ack_in == 1'b1) & (stream_out_V_last_1_vld_in == 1'b1))) begin
            stream_out_V_last_1_sel_wr <= ~stream_out_V_last_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_last_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_last_1_state == 2'd2) & (stream_out_V_last_1_vld_in == 1'b0)) | ((stream_out_V_last_1_state == 2'd3) & (stream_out_V_last_1_vld_in == 1'b0) & (stream_out_V_last_1_ack_out == 1'b1)))) begin
            stream_out_V_last_1_state <= 2'd2;
        end else if ((((stream_out_V_last_1_state == 2'd1) & (stream_out_V_last_1_ack_out == 1'b0)) | ((stream_out_V_last_1_state == 2'd3) & (stream_out_V_last_1_ack_out == 1'b0) & (stream_out_V_last_1_vld_in == 1'b1)))) begin
            stream_out_V_last_1_state <= 2'd1;
        end else if (((~((stream_out_V_last_1_vld_in == 1'b0) & (stream_out_V_last_1_ack_out == 1'b1)) & ~((stream_out_V_last_1_ack_out == 1'b0) & (stream_out_V_last_1_vld_in == 1'b1)) & (stream_out_V_last_1_state == 2'd3)) | ((stream_out_V_last_1_state == 2'd1) & (stream_out_V_last_1_ack_out == 1'b1)) | ((stream_out_V_last_1_state == 2'd2) & (stream_out_V_last_1_vld_in == 1'b1)))) begin
            stream_out_V_last_1_state <= 2'd3;
        end else begin
            stream_out_V_last_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_82_fu_160_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i1_reg_92 <= i_5_fu_165_p2;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        i1_reg_92 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_81_fu_189_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_reg_103 <= i_13_fu_194_p2;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        i_reg_103 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        KER_bound_reg_289 <= grp_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        OFM_bound_reg_324 <= grp_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_done_reg == 1'b1) | (stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_82_reg_300 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_81_reg_335 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        reg_114 <= stream_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)))) begin
        reg_119 <= stream_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_data_V_1_load_A == 1'b1)) begin
        stream_out_V_data_V_1_payload_A <= stream_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_data_V_1_load_B == 1'b1)) begin
        stream_out_V_data_V_1_payload_B <= stream_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_last_1_load_A == 1'b1)) begin
        stream_out_V_last_1_payload_A <= stream_out_V_last_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_last_1_load_B == 1'b1)) begin
        stream_out_V_last_1_payload_B <= stream_out_V_last_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        tmp2_reg_314 <= grp_fu_217_p2;
        tmp3_reg_319 <= grp_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp5_reg_279 <= grp_fu_205_p2;
        tmp6_reg_284 <= grp_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        tmp_77_reg_330 <= tmp_77_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_80_reg_295 <= tmp_80_fu_151_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_81_reg_335 <= tmp_81_fu_189_p2;
        tmp_81_reg_335_pp1_iter1_reg <= tmp_81_reg_335;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_82_reg_300 <= tmp_82_fu_160_p2;
        tmp_82_reg_300_pp0_iter1_reg <= tmp_82_reg_300;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_V_101_reg_233 <= stream_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_V_102_reg_239 <= stream_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_V_105_reg_245 <= stream_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_82_fu_160_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_last_1_reg_309 <= tmp_last_1_fu_171_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_81_fu_189_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_last_reg_344 <= tmp_last_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_s_reg_229 <= tmp_s_fu_124_p2;
    end
end

always @ (*) begin
    if ((tmp_82_fu_160_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state19 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state19 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_81_fu_189_p2 == 1'd0)) begin
        ap_condition_pp1_exit_iter0_state33 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state33 = 1'b0;
    end
end

always @ (*) begin
    if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_out_V_last_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state22))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_out_V_last_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state22))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | ((stream_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        grp_fu_205_ce = 1'b1;
    end else begin
        grp_fu_205_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | ((stream_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        grp_fu_211_ce = 1'b1;
    end else begin
        grp_fu_211_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state24) | ((stream_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        grp_fu_217_ce = 1'b1;
    end else begin
        grp_fu_217_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state24) | ((stream_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        grp_fu_223_ce = 1'b1;
    end else begin
        grp_fu_223_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_82_reg_300 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_81_reg_335 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        stream_in_V_V_blk_n = stream_in_V_V_empty_n;
    end else begin
        stream_in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_82_reg_300 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_81_reg_335 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        stream_in_V_V_read = 1'b1;
    end else begin
        stream_in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_82_reg_300_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((tmp_82_reg_300 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_81_reg_335_pp1_iter1_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((tmp_81_reg_335 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        stream_out_TDATA_blk_n = stream_out_V_data_V_1_state[1'd1];
    end else begin
        stream_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((stream_out_V_data_V_1_sel == 1'b1)) begin
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_B;
    end else begin
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_82_reg_300 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_81_reg_335 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        stream_out_V_data_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_81_reg_335 == 1'd1) & (1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        stream_out_V_last_1_data_in = tmp_last_reg_344;
    end else if (((tmp_82_reg_300 == 1'd1) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_out_V_last_1_data_in = tmp_last_1_reg_309;
    end else if (((~((ap_done_reg == 1'b1) | (stream_in_V_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((stream_in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((stream_in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((stream_in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((stream_in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((stream_in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((stream_in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        stream_out_V_last_1_data_in = 1'd0;
    end else begin
        stream_out_V_last_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((stream_out_V_last_1_sel == 1'b1)) begin
        stream_out_V_last_1_data_out = stream_out_V_last_1_payload_B;
    end else begin
        stream_out_V_last_1_data_out = stream_out_V_last_1_payload_A;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_82_reg_300 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_81_reg_335 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        stream_out_V_last_1_vld_in = 1'b1;
    end else begin
        stream_out_V_last_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((tmp_s_reg_229 == 1'd1) & (stream_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else if (((tmp_s_reg_229 == 1'd0) & (stream_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((tmp_82_fu_160_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((tmp_82_fu_160_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            if ((~((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_out_V_last_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((tmp_81_fu_189_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((tmp_81_fu_189_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((tmp_82_reg_300 == 1'd1) & (stream_in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state21_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state20_io) | ((tmp_82_reg_300 == 1'd1) & (stream_in_V_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state21_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state20_io) | ((tmp_82_reg_300 == 1'd1) & (stream_in_V_V_empty_n == 1'b0)))));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((tmp_81_reg_335 == 1'd1) & (stream_in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state35_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state34_io) | ((tmp_81_reg_335 == 1'd1) & (stream_in_V_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state35_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state34_io) | ((tmp_81_reg_335 == 1'd1) & (stream_in_V_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (stream_in_V_V_empty_n == 1'b0) | (ap_start == 1'b0));
end

assign ap_block_state19_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_io = ((tmp_82_reg_300 == 1'd1) & (stream_out_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state20_pp0_stage0_iter1 = ((tmp_82_reg_300 == 1'd1) & (stream_in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state21_io = ((tmp_82_reg_300_pp0_iter1_reg == 1'd1) & (stream_out_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state21_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22 = ((stream_out_V_data_V_1_ack_in == 1'b0) | (stream_out_V_last_1_ack_in == 1'b0));
end

assign ap_block_state33_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state34_io = ((tmp_81_reg_335 == 1'd1) & (stream_out_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state34_pp1_stage0_iter1 = ((tmp_81_reg_335 == 1'd1) & (stream_in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state35_io = ((tmp_81_reg_335_pp1_iter1_reg == 1'd1) & (stream_out_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state35_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign grp_fu_205_p0 = tmp_78_fu_137_p1;

assign grp_fu_211_p0 = tmp_78_fu_137_p1;

assign grp_fu_211_p1 = lhs_V_fu_130_p1;

assign grp_fu_217_p1 = rhs_V_fu_140_p1;

assign grp_fu_223_p0 = lhs_V_fu_130_p1;

assign grp_fu_223_p1 = rhs_V_fu_140_p1;

assign i1_cast_fu_156_p1 = i1_reg_92;

assign i_13_fu_194_p2 = (i_reg_103 + 31'd1);

assign i_5_fu_165_p2 = (i1_reg_92 + 31'd1);

assign i_cast_fu_185_p1 = i_reg_103;

assign lhs_V_fu_130_p0 = reg_119;

assign lhs_V_fu_130_p1 = lhs_V_fu_130_p0;

assign rhs_V_fu_140_p1 = tmp_V_105_reg_245;

assign stream_out_TDATA = stream_out_V_data_V_1_data_out;

assign stream_out_TLAST = stream_out_V_last_1_data_out;

assign stream_out_TVALID = stream_out_V_last_1_state[1'd0];

assign stream_out_V_data_V_1_ack_in = stream_out_V_data_V_1_state[1'd1];

assign stream_out_V_data_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_data_V_1_load_A = (stream_out_V_data_V_1_state_cmp_full & ~stream_out_V_data_V_1_sel_wr);

assign stream_out_V_data_V_1_load_B = (stream_out_V_data_V_1_state_cmp_full & stream_out_V_data_V_1_sel_wr);

assign stream_out_V_data_V_1_sel = stream_out_V_data_V_1_sel_rd;

assign stream_out_V_data_V_1_state_cmp_full = ((stream_out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_data_V_1_vld_out = stream_out_V_data_V_1_state[1'd0];

assign stream_out_V_last_1_ack_in = stream_out_V_last_1_state[1'd1];

assign stream_out_V_last_1_ack_out = stream_out_TREADY;

assign stream_out_V_last_1_load_A = (stream_out_V_last_1_state_cmp_full & ~stream_out_V_last_1_sel_wr);

assign stream_out_V_last_1_load_B = (stream_out_V_last_1_state_cmp_full & stream_out_V_last_1_sel_wr);

assign stream_out_V_last_1_sel = stream_out_V_last_1_sel_rd;

assign stream_out_V_last_1_state_cmp_full = ((stream_out_V_last_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_last_1_vld_out = stream_out_V_last_1_state[1'd0];

assign tmp_77_fu_180_p2 = ($signed(OFM_bound_reg_324) + $signed(32'd4294967295));

assign tmp_78_fu_137_p1 = tmp_V_101_reg_233;

assign tmp_80_fu_151_p2 = ($signed(KER_bound_reg_289) + $signed(32'd4294967295));

assign tmp_81_fu_189_p2 = (($signed(i_cast_fu_185_p1) < $signed(OFM_bound_reg_324)) ? 1'b1 : 1'b0);

assign tmp_82_fu_160_p2 = (($signed(i1_cast_fu_156_p1) < $signed(KER_bound_reg_289)) ? 1'b1 : 1'b0);

assign tmp_last_1_fu_171_p2 = ((i1_cast_fu_156_p1 == tmp_80_reg_295) ? 1'b1 : 1'b0);

assign tmp_last_fu_200_p2 = ((i_cast_fu_185_p1 == tmp_77_reg_330) ? 1'b1 : 1'b0);

assign tmp_s_fu_124_p2 = ((stream_in_V_V_dout == 16'd0) ? 1'b1 : 1'b0);

endmodule //AXI_DMA_MASTER
