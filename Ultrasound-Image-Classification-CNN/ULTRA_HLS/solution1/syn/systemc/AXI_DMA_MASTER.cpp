// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AXI_DMA_MASTER.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AXI_DMA_MASTER::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AXI_DMA_MASTER::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state1 = "1";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state2 = "10";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state3 = "100";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state4 = "1000";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state5 = "10000";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state6 = "100000";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state7 = "1000000";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state8 = "10000000";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state9 = "100000000";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state10 = "1000000000";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state11 = "10000000000";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state12 = "100000000000";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_pp0_stage0 = "1000000000000000000";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state22 = "10000000000000000000";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state23 = "100000000000000000000";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state24 = "1000000000000000000000";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state25 = "10000000000000000000000";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state26 = "100000000000000000000000";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state27 = "1000000000000000000000000";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state28 = "10000000000000000000000000";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state29 = "100000000000000000000000000";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state30 = "1000000000000000000000000000";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_pp1_stage0 = "10000000000000000000000000000";
const sc_lv<30> AXI_DMA_MASTER::ap_ST_fsm_state34 = "100000000000000000000000000000";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool AXI_DMA_MASTER::ap_const_boolean_1 = true;
const sc_lv<1> AXI_DMA_MASTER::ap_const_lv1_0 = "0";
const sc_lv<1> AXI_DMA_MASTER::ap_const_lv1_1 = "1";
const sc_lv<2> AXI_DMA_MASTER::ap_const_lv2_0 = "00";
const sc_lv<2> AXI_DMA_MASTER::ap_const_lv2_2 = "10";
const sc_lv<2> AXI_DMA_MASTER::ap_const_lv2_3 = "11";
const sc_lv<2> AXI_DMA_MASTER::ap_const_lv2_1 = "1";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_1 = "1";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_2 = "10";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_3 = "11";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_4 = "100";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_5 = "101";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_6 = "110";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_7 = "111";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_1C = "11100";
const bool AXI_DMA_MASTER::ap_const_boolean_0 = false;
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_12 = "10010";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_8 = "1000";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_A = "1010";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_F = "1111";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_10 = "10000";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_11 = "10001";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_15 = "10101";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_1A = "11010";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_1B = "11011";
const sc_lv<31> AXI_DMA_MASTER::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<16> AXI_DMA_MASTER::ap_const_lv16_0 = "0000000000000000";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_B = "1011";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<31> AXI_DMA_MASTER::ap_const_lv31_1 = "1";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_16 = "10110";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_9 = "1001";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_14 = "10100";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_13 = "10011";

AXI_DMA_MASTER::AXI_DMA_MASTER(sc_module_name name) : sc_module(name), mVcdFile(0) {
    ultra_mul_32s_32sbkb_U165 = new ultra_mul_32s_32sbkb<1,5,32,32,32>("ultra_mul_32s_32sbkb_U165");
    ultra_mul_32s_32sbkb_U165->clk(ap_clk);
    ultra_mul_32s_32sbkb_U165->reset(ap_rst);
    ultra_mul_32s_32sbkb_U165->din0(tmp5_reg_294);
    ultra_mul_32s_32sbkb_U165->din1(tmp4_reg_289);
    ultra_mul_32s_32sbkb_U165->ce(ap_var_for_const0);
    ultra_mul_32s_32sbkb_U165->dout(grp_fu_147_p2);
    ultra_mul_32s_32sbkb_U166 = new ultra_mul_32s_32sbkb<1,5,32,32,32>("ultra_mul_32s_32sbkb_U166");
    ultra_mul_32s_32sbkb_U166->clk(ap_clk);
    ultra_mul_32s_32sbkb_U166->reset(ap_rst);
    ultra_mul_32s_32sbkb_U166->din0(tmp3_reg_334);
    ultra_mul_32s_32sbkb_U166->din1(tmp2_reg_329);
    ultra_mul_32s_32sbkb_U166->ce(ap_var_for_const0);
    ultra_mul_32s_32sbkb_U166->dout(grp_fu_180_p2);
    ultra_mul_mul_16scud_U167 = new ultra_mul_mul_16scud<1,3,16,16,32>("ultra_mul_mul_16scud_U167");
    ultra_mul_mul_16scud_U167->clk(ap_clk);
    ultra_mul_mul_16scud_U167->reset(ap_rst);
    ultra_mul_mul_16scud_U167->din0(grp_fu_209_p0);
    ultra_mul_mul_16scud_U167->din1(grp_fu_209_p1);
    ultra_mul_mul_16scud_U167->ce(grp_fu_209_ce);
    ultra_mul_mul_16scud_U167->dout(grp_fu_209_p2);
    ultra_mul_mul_16scud_U168 = new ultra_mul_mul_16scud<1,3,16,16,32>("ultra_mul_mul_16scud_U168");
    ultra_mul_mul_16scud_U168->clk(ap_clk);
    ultra_mul_mul_16scud_U168->reset(ap_rst);
    ultra_mul_mul_16scud_U168->din0(tmp_V_192_reg_243);
    ultra_mul_mul_16scud_U168->din1(grp_fu_215_p1);
    ultra_mul_mul_16scud_U168->ce(grp_fu_215_ce);
    ultra_mul_mul_16scud_U168->dout(grp_fu_215_p2);
    ultra_mul_mul_16scud_U169 = new ultra_mul_mul_16scud<1,3,16,16,32>("ultra_mul_mul_16scud_U169");
    ultra_mul_mul_16scud_U169->clk(ap_clk);
    ultra_mul_mul_16scud_U169->reset(ap_rst);
    ultra_mul_mul_16scud_U169->din0(reg_114);
    ultra_mul_mul_16scud_U169->din1(grp_fu_221_p1);
    ultra_mul_mul_16scud_U169->ce(grp_fu_221_ce);
    ultra_mul_mul_16scud_U169->dout(grp_fu_221_p2);
    ultra_mul_mul_16scud_U170 = new ultra_mul_mul_16scud<1,3,16,16,32>("ultra_mul_mul_16scud_U170");
    ultra_mul_mul_16scud_U170->clk(ap_clk);
    ultra_mul_mul_16scud_U170->reset(ap_rst);
    ultra_mul_mul_16scud_U170->din0(grp_fu_227_p0);
    ultra_mul_mul_16scud_U170->din1(grp_fu_227_p1);
    ultra_mul_mul_16scud_U170->ce(grp_fu_227_ce);
    ultra_mul_mul_16scud_U170->dout(grp_fu_227_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_KER_bound_fu_151_p2);
    sensitive << ( lhs_V_reg_260 );
    sensitive << ( p_1_reg_299 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( stream_in_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_196_reg_315 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( stream_in_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_196_reg_315 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state20_io );
    sensitive << ( ap_block_state21_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( stream_in_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_196_reg_315 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state20_io );
    sensitive << ( ap_block_state21_io );

    SC_METHOD(thread_ap_block_pp1_stage0);

    SC_METHOD(thread_ap_block_pp1_stage0_01001);
    sensitive << ( stream_in_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( tmp_195_reg_350 );

    SC_METHOD(thread_ap_block_pp1_stage0_11001);
    sensitive << ( stream_in_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( tmp_195_reg_350 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_state32_io );
    sensitive << ( ap_block_state33_io );

    SC_METHOD(thread_ap_block_pp1_stage0_subdone);
    sensitive << ( stream_in_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( tmp_195_reg_350 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_state32_io );
    sensitive << ( ap_block_state33_io );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( stream_in_V_V_empty_n );

    SC_METHOD(thread_ap_block_state19_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state20_io);
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( tmp_196_reg_315 );

    SC_METHOD(thread_ap_block_state20_pp0_stage0_iter1);
    sensitive << ( stream_in_V_V_empty_n );
    sensitive << ( tmp_196_reg_315 );

    SC_METHOD(thread_ap_block_state21_io);
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( tmp_196_reg_315_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state21_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state22);
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( stream_out_V_last_1_ack_in );

    SC_METHOD(thread_ap_block_state31_pp1_stage0_iter0);

    SC_METHOD(thread_ap_block_state32_io);
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( tmp_195_reg_350 );

    SC_METHOD(thread_ap_block_state32_pp1_stage0_iter1);
    sensitive << ( stream_in_V_V_empty_n );
    sensitive << ( tmp_195_reg_350 );

    SC_METHOD(thread_ap_block_state33_io);
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( tmp_195_reg_350_pp1_iter1_reg );

    SC_METHOD(thread_ap_block_state33_pp1_stage0_iter2);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state19);
    sensitive << ( tmp_196_fu_164_p2 );

    SC_METHOD(thread_ap_condition_pp1_exit_iter0_state31);
    sensitive << ( tmp_195_fu_193_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( stream_out_V_last_1_ack_in );
    sensitive << ( ap_CS_fsm_state22 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( stream_out_V_last_1_ack_in );
    sensitive << ( ap_CS_fsm_state22 );

    SC_METHOD(thread_grp_fu_209_ce);
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_grp_fu_209_p0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_193_fu_137_p1 );

    SC_METHOD(thread_grp_fu_209_p1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_193_fu_137_p1 );

    SC_METHOD(thread_grp_fu_215_ce);
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_grp_fu_215_p1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( lhs_V_fu_130_p1 );

    SC_METHOD(thread_grp_fu_221_ce);
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_grp_fu_221_p1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( rhs_V_fu_140_p1 );

    SC_METHOD(thread_grp_fu_227_ce);
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_grp_fu_227_p0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( lhs_V_fu_130_p1 );

    SC_METHOD(thread_grp_fu_227_p1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( rhs_V_fu_140_p1 );

    SC_METHOD(thread_i1_cast_fu_160_p1);
    sensitive << ( i1_reg_92 );

    SC_METHOD(thread_i_1_fu_169_p2);
    sensitive << ( i1_reg_92 );

    SC_METHOD(thread_i_30_fu_198_p2);
    sensitive << ( i_reg_103 );

    SC_METHOD(thread_i_cast_fu_189_p1);
    sensitive << ( i_reg_103 );

    SC_METHOD(thread_lhs_V_fu_130_p0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( reg_119 );

    SC_METHOD(thread_lhs_V_fu_130_p1);
    sensitive << ( lhs_V_fu_130_p0 );

    SC_METHOD(thread_rhs_V_fu_140_p1);
    sensitive << ( tmp_V_195_reg_249 );

    SC_METHOD(thread_stream_in_V_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( stream_in_V_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( tmp_195_reg_350 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_196_reg_315 );

    SC_METHOD(thread_stream_in_V_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( stream_in_V_V_empty_n );
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( tmp_195_reg_350 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_196_reg_315 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_stream_out_TDATA);
    sensitive << ( stream_out_V_data_V_1_data_out );

    SC_METHOD(thread_stream_out_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( stream_out_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( tmp_195_reg_350 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_196_reg_315 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( tmp_195_reg_350_pp1_iter1_reg );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_196_reg_315_pp0_iter1_reg );

    SC_METHOD(thread_stream_out_TLAST);
    sensitive << ( stream_out_V_last_1_data_out );

    SC_METHOD(thread_stream_out_TVALID);
    sensitive << ( stream_out_V_last_1_state );

    SC_METHOD(thread_stream_out_V_data_V_1_ack_in);
    sensitive << ( stream_out_V_data_V_1_state );

    SC_METHOD(thread_stream_out_V_data_V_1_ack_out);
    sensitive << ( stream_out_TREADY );

    SC_METHOD(thread_stream_out_V_data_V_1_data_out);
    sensitive << ( stream_out_V_data_V_1_payload_A );
    sensitive << ( stream_out_V_data_V_1_payload_B );
    sensitive << ( stream_out_V_data_V_1_sel );

    SC_METHOD(thread_stream_out_V_data_V_1_load_A);
    sensitive << ( stream_out_V_data_V_1_sel_wr );
    sensitive << ( stream_out_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_data_V_1_load_B);
    sensitive << ( stream_out_V_data_V_1_sel_wr );
    sensitive << ( stream_out_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_data_V_1_sel);
    sensitive << ( stream_out_V_data_V_1_sel_rd );

    SC_METHOD(thread_stream_out_V_data_V_1_state_cmp_full);
    sensitive << ( stream_out_V_data_V_1_state );

    SC_METHOD(thread_stream_out_V_data_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( stream_in_V_V_empty_n );
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( tmp_195_reg_350 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_196_reg_315 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_stream_out_V_data_V_1_vld_out);
    sensitive << ( stream_out_V_data_V_1_state );

    SC_METHOD(thread_stream_out_V_last_1_ack_in);
    sensitive << ( stream_out_V_last_1_state );

    SC_METHOD(thread_stream_out_V_last_1_ack_out);
    sensitive << ( stream_out_TREADY );

    SC_METHOD(thread_stream_out_V_last_1_data_in);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( stream_in_V_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( tmp_195_reg_350 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_196_reg_315 );
    sensitive << ( tmp_last_1_reg_324 );
    sensitive << ( tmp_last_reg_359 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( ap_block_pp1_stage0_01001 );

    SC_METHOD(thread_stream_out_V_last_1_data_out);
    sensitive << ( stream_out_V_last_1_payload_A );
    sensitive << ( stream_out_V_last_1_payload_B );
    sensitive << ( stream_out_V_last_1_sel );

    SC_METHOD(thread_stream_out_V_last_1_load_A);
    sensitive << ( stream_out_V_last_1_sel_wr );
    sensitive << ( stream_out_V_last_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_last_1_load_B);
    sensitive << ( stream_out_V_last_1_sel_wr );
    sensitive << ( stream_out_V_last_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_last_1_sel);
    sensitive << ( stream_out_V_last_1_sel_rd );

    SC_METHOD(thread_stream_out_V_last_1_state_cmp_full);
    sensitive << ( stream_out_V_last_1_state );

    SC_METHOD(thread_stream_out_V_last_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( stream_in_V_V_empty_n );
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( tmp_195_reg_350 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_196_reg_315 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_stream_out_V_last_1_vld_out);
    sensitive << ( stream_out_V_last_1_state );

    SC_METHOD(thread_tmp_192_fu_184_p2);
    sensitive << ( OFM_bound_reg_339 );

    SC_METHOD(thread_tmp_193_fu_137_p1);
    sensitive << ( tmp_V_191_reg_237 );

    SC_METHOD(thread_tmp_194_fu_155_p2);
    sensitive << ( KER_bound_reg_304 );

    SC_METHOD(thread_tmp_195_fu_193_p2);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( OFM_bound_reg_339 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( i_cast_fu_189_p1 );

    SC_METHOD(thread_tmp_196_fu_164_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( KER_bound_reg_304 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( i1_cast_fu_160_p1 );

    SC_METHOD(thread_tmp_last_1_fu_175_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_194_reg_310 );
    sensitive << ( tmp_196_fu_164_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( i1_cast_fu_160_p1 );

    SC_METHOD(thread_tmp_last_fu_204_p2);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( tmp_192_reg_345 );
    sensitive << ( tmp_195_fu_193_p2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( i_cast_fu_189_p1 );

    SC_METHOD(thread_tmp_s_fu_124_p2);
    sensitive << ( stream_in_V_V_empty_n );
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( reg_114 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( stream_in_V_V_empty_n );
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( stream_out_V_last_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_s_reg_233 );
    sensitive << ( tmp_196_fu_164_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_195_fu_193_p2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp1_stage0_subdone );
    sensitive << ( ap_CS_fsm_state22 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "000000000000000000000000000001";
    stream_out_V_data_V_1_sel_rd = SC_LOGIC_0;
    stream_out_V_data_V_1_sel_wr = SC_LOGIC_0;
    stream_out_V_data_V_1_state = "00";
    stream_out_V_last_1_sel_rd = SC_LOGIC_0;
    stream_out_V_last_1_sel_wr = SC_LOGIC_0;
    stream_out_V_last_1_state = "00";
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AXI_DMA_MASTER_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, stream_in_V_V_dout, "(port)stream_in_V_V_dout");
    sc_trace(mVcdFile, stream_in_V_V_empty_n, "(port)stream_in_V_V_empty_n");
    sc_trace(mVcdFile, stream_in_V_V_read, "(port)stream_in_V_V_read");
    sc_trace(mVcdFile, stream_out_TDATA, "(port)stream_out_TDATA");
    sc_trace(mVcdFile, stream_out_TVALID, "(port)stream_out_TVALID");
    sc_trace(mVcdFile, stream_out_TREADY, "(port)stream_out_TREADY");
    sc_trace(mVcdFile, stream_out_TLAST, "(port)stream_out_TLAST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, stream_out_V_data_V_1_data_out, "stream_out_V_data_V_1_data_out");
    sc_trace(mVcdFile, stream_out_V_data_V_1_vld_in, "stream_out_V_data_V_1_vld_in");
    sc_trace(mVcdFile, stream_out_V_data_V_1_vld_out, "stream_out_V_data_V_1_vld_out");
    sc_trace(mVcdFile, stream_out_V_data_V_1_ack_in, "stream_out_V_data_V_1_ack_in");
    sc_trace(mVcdFile, stream_out_V_data_V_1_ack_out, "stream_out_V_data_V_1_ack_out");
    sc_trace(mVcdFile, stream_out_V_data_V_1_payload_A, "stream_out_V_data_V_1_payload_A");
    sc_trace(mVcdFile, stream_out_V_data_V_1_payload_B, "stream_out_V_data_V_1_payload_B");
    sc_trace(mVcdFile, stream_out_V_data_V_1_sel_rd, "stream_out_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, stream_out_V_data_V_1_sel_wr, "stream_out_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, stream_out_V_data_V_1_sel, "stream_out_V_data_V_1_sel");
    sc_trace(mVcdFile, stream_out_V_data_V_1_load_A, "stream_out_V_data_V_1_load_A");
    sc_trace(mVcdFile, stream_out_V_data_V_1_load_B, "stream_out_V_data_V_1_load_B");
    sc_trace(mVcdFile, stream_out_V_data_V_1_state, "stream_out_V_data_V_1_state");
    sc_trace(mVcdFile, stream_out_V_data_V_1_state_cmp_full, "stream_out_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, stream_out_V_last_1_data_in, "stream_out_V_last_1_data_in");
    sc_trace(mVcdFile, stream_out_V_last_1_data_out, "stream_out_V_last_1_data_out");
    sc_trace(mVcdFile, stream_out_V_last_1_vld_in, "stream_out_V_last_1_vld_in");
    sc_trace(mVcdFile, stream_out_V_last_1_vld_out, "stream_out_V_last_1_vld_out");
    sc_trace(mVcdFile, stream_out_V_last_1_ack_in, "stream_out_V_last_1_ack_in");
    sc_trace(mVcdFile, stream_out_V_last_1_ack_out, "stream_out_V_last_1_ack_out");
    sc_trace(mVcdFile, stream_out_V_last_1_payload_A, "stream_out_V_last_1_payload_A");
    sc_trace(mVcdFile, stream_out_V_last_1_payload_B, "stream_out_V_last_1_payload_B");
    sc_trace(mVcdFile, stream_out_V_last_1_sel_rd, "stream_out_V_last_1_sel_rd");
    sc_trace(mVcdFile, stream_out_V_last_1_sel_wr, "stream_out_V_last_1_sel_wr");
    sc_trace(mVcdFile, stream_out_V_last_1_sel, "stream_out_V_last_1_sel");
    sc_trace(mVcdFile, stream_out_V_last_1_load_A, "stream_out_V_last_1_load_A");
    sc_trace(mVcdFile, stream_out_V_last_1_load_B, "stream_out_V_last_1_load_B");
    sc_trace(mVcdFile, stream_out_V_last_1_state, "stream_out_V_last_1_state");
    sc_trace(mVcdFile, stream_out_V_last_1_state_cmp_full, "stream_out_V_last_1_state_cmp_full");
    sc_trace(mVcdFile, stream_in_V_V_blk_n, "stream_in_V_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, ap_block_pp1_stage0, "ap_block_pp1_stage0");
    sc_trace(mVcdFile, tmp_195_reg_350, "tmp_195_reg_350");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_196_reg_315, "tmp_196_reg_315");
    sc_trace(mVcdFile, stream_out_TDATA_blk_n, "stream_out_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter2, "ap_enable_reg_pp1_iter2");
    sc_trace(mVcdFile, tmp_195_reg_350_pp1_iter1_reg, "tmp_195_reg_350_pp1_iter1_reg");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, tmp_196_reg_315_pp0_iter1_reg, "tmp_196_reg_315_pp0_iter1_reg");
    sc_trace(mVcdFile, i1_reg_92, "i1_reg_92");
    sc_trace(mVcdFile, i_reg_103, "i_reg_103");
    sc_trace(mVcdFile, reg_114, "reg_114");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_state19_pp0_stage0_iter0, "ap_block_state19_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state20_pp0_stage0_iter1, "ap_block_state20_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state20_io, "ap_block_state20_io");
    sc_trace(mVcdFile, ap_block_state21_pp0_stage0_iter2, "ap_block_state21_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state21_io, "ap_block_state21_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, ap_block_state31_pp1_stage0_iter0, "ap_block_state31_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state32_pp1_stage0_iter1, "ap_block_state32_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state32_io, "ap_block_state32_io");
    sc_trace(mVcdFile, ap_block_state33_pp1_stage0_iter2, "ap_block_state33_pp1_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state33_io, "ap_block_state33_io");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001, "ap_block_pp1_stage0_11001");
    sc_trace(mVcdFile, reg_119, "reg_119");
    sc_trace(mVcdFile, tmp_s_fu_124_p2, "tmp_s_fu_124_p2");
    sc_trace(mVcdFile, tmp_s_reg_233, "tmp_s_reg_233");
    sc_trace(mVcdFile, tmp_V_191_reg_237, "tmp_V_191_reg_237");
    sc_trace(mVcdFile, tmp_V_192_reg_243, "tmp_V_192_reg_243");
    sc_trace(mVcdFile, tmp_V_195_reg_249, "tmp_V_195_reg_249");
    sc_trace(mVcdFile, lhs_V_fu_130_p1, "lhs_V_fu_130_p1");
    sc_trace(mVcdFile, lhs_V_reg_260, "lhs_V_reg_260");
    sc_trace(mVcdFile, tmp_193_fu_137_p1, "tmp_193_fu_137_p1");
    sc_trace(mVcdFile, rhs_V_fu_140_p1, "rhs_V_fu_140_p1");
    sc_trace(mVcdFile, grp_fu_209_p2, "grp_fu_209_p2");
    sc_trace(mVcdFile, tmp4_reg_289, "tmp4_reg_289");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, grp_fu_215_p2, "grp_fu_215_p2");
    sc_trace(mVcdFile, tmp5_reg_294, "tmp5_reg_294");
    sc_trace(mVcdFile, grp_fu_147_p2, "grp_fu_147_p2");
    sc_trace(mVcdFile, p_1_reg_299, "p_1_reg_299");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, KER_bound_fu_151_p2, "KER_bound_fu_151_p2");
    sc_trace(mVcdFile, KER_bound_reg_304, "KER_bound_reg_304");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, tmp_194_fu_155_p2, "tmp_194_fu_155_p2");
    sc_trace(mVcdFile, tmp_194_reg_310, "tmp_194_reg_310");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, tmp_196_fu_164_p2, "tmp_196_fu_164_p2");
    sc_trace(mVcdFile, i_1_fu_169_p2, "i_1_fu_169_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_last_1_fu_175_p2, "tmp_last_1_fu_175_p2");
    sc_trace(mVcdFile, tmp_last_1_reg_324, "tmp_last_1_reg_324");
    sc_trace(mVcdFile, grp_fu_221_p2, "grp_fu_221_p2");
    sc_trace(mVcdFile, tmp2_reg_329, "tmp2_reg_329");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, grp_fu_227_p2, "grp_fu_227_p2");
    sc_trace(mVcdFile, tmp3_reg_334, "tmp3_reg_334");
    sc_trace(mVcdFile, grp_fu_180_p2, "grp_fu_180_p2");
    sc_trace(mVcdFile, OFM_bound_reg_339, "OFM_bound_reg_339");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, tmp_192_fu_184_p2, "tmp_192_fu_184_p2");
    sc_trace(mVcdFile, tmp_192_reg_345, "tmp_192_reg_345");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, tmp_195_fu_193_p2, "tmp_195_fu_193_p2");
    sc_trace(mVcdFile, i_30_fu_198_p2, "i_30_fu_198_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, tmp_last_fu_204_p2, "tmp_last_fu_204_p2");
    sc_trace(mVcdFile, tmp_last_reg_359, "tmp_last_reg_359");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state19, "ap_condition_pp0_exit_iter0_state19");
    sc_trace(mVcdFile, ap_block_pp1_stage0_subdone, "ap_block_pp1_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp1_exit_iter0_state31, "ap_condition_pp1_exit_iter0_state31");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_block_pp1_stage0_01001, "ap_block_pp1_stage0_01001");
    sc_trace(mVcdFile, lhs_V_fu_130_p0, "lhs_V_fu_130_p0");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, i1_cast_fu_160_p1, "i1_cast_fu_160_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, i_cast_fu_189_p1, "i_cast_fu_189_p1");
    sc_trace(mVcdFile, grp_fu_209_p0, "grp_fu_209_p0");
    sc_trace(mVcdFile, grp_fu_209_p1, "grp_fu_209_p1");
    sc_trace(mVcdFile, grp_fu_215_p1, "grp_fu_215_p1");
    sc_trace(mVcdFile, grp_fu_221_p1, "grp_fu_221_p1");
    sc_trace(mVcdFile, grp_fu_227_p0, "grp_fu_227_p0");
    sc_trace(mVcdFile, grp_fu_227_p1, "grp_fu_227_p1");
    sc_trace(mVcdFile, grp_fu_209_ce, "grp_fu_209_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, grp_fu_215_ce, "grp_fu_215_ce");
    sc_trace(mVcdFile, grp_fu_221_ce, "grp_fu_221_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, grp_fu_227_ce, "grp_fu_227_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_block_state22, "ap_block_state22");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
#endif

    }
}

AXI_DMA_MASTER::~AXI_DMA_MASTER() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete ultra_mul_32s_32sbkb_U165;
    delete ultra_mul_32s_32sbkb_U166;
    delete ultra_mul_mul_16scud_U167;
    delete ultra_mul_mul_16scud_U168;
    delete ultra_mul_mul_16scud_U169;
    delete ultra_mul_mul_16scud_U170;
}

void AXI_DMA_MASTER::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void AXI_DMA_MASTER::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_out_V_last_1_ack_in.read(), ap_const_logic_0)) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state19.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state19.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state19.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state31.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read())) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state31.read())) {
                ap_enable_reg_pp1_iter1 = (ap_condition_pp1_exit_iter0_state31.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read())) {
            ap_enable_reg_pp1_iter2 = ap_enable_reg_pp1_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
            ap_enable_reg_pp1_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_196_fu_164_p2.read()))) {
        i1_reg_92 = i_1_fu_169_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        i1_reg_92 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_195_fu_193_p2.read()))) {
        i_reg_103 = i_30_fu_198_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        i_reg_103 = ap_const_lv31_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        stream_out_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_vld_out.read()))) {
            stream_out_V_data_V_1_sel_rd =  (sc_logic) (~stream_out_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        stream_out_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_ack_in.read()))) {
            stream_out_V_data_V_1_sel_wr =  (sc_logic) (~stream_out_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        stream_out_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(stream_out_V_data_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(stream_out_V_data_V_1_state.read(), ap_const_lv2_2)))) {
            stream_out_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(stream_out_V_data_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(stream_out_V_data_V_1_state.read(), ap_const_lv2_1)))) {
            stream_out_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(stream_out_V_data_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(stream_out_V_data_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(stream_out_V_data_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_ack_out.read()))))) {
            stream_out_V_data_V_1_state = ap_const_lv2_3;
        } else {
            stream_out_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        stream_out_V_last_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_1_vld_out.read()))) {
            stream_out_V_last_1_sel_rd =  (sc_logic) (~stream_out_V_last_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        stream_out_V_last_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_1_ack_in.read()))) {
            stream_out_V_last_1_sel_wr =  (sc_logic) (~stream_out_V_last_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        stream_out_V_last_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_last_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_last_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_last_1_state.read())))) {
            stream_out_V_last_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_last_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_last_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_last_1_state.read())))) {
            stream_out_V_last_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_last_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_last_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_last_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_last_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_1_ack_out.read()))))) {
            stream_out_V_last_1_state = ap_const_lv2_3;
        } else {
            stream_out_V_last_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        KER_bound_reg_304 = KER_bound_fu_151_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        OFM_bound_reg_339 = grp_fu_180_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
        lhs_V_reg_260 = lhs_V_fu_130_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        p_1_reg_299 = grp_fu_147_p2.read();
    }
    if (((!(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || (!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_196_reg_315.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_195_reg_350.read()) && 
  esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)))) {
        reg_114 = stream_in_V_V_dout.read();
    }
    if (((!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) || (!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())))) {
        reg_119 = stream_in_V_V_dout.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_load_A.read())) {
        stream_out_V_data_V_1_payload_A = stream_in_V_V_dout.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_load_B.read())) {
        stream_out_V_data_V_1_payload_B = stream_in_V_V_dout.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_1_load_A.read())) {
        stream_out_V_last_1_payload_A = stream_out_V_last_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_1_load_B.read())) {
        stream_out_V_last_1_payload_B = stream_out_V_last_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        tmp2_reg_329 = grp_fu_221_p2.read();
        tmp3_reg_334 = grp_fu_227_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        tmp4_reg_289 = grp_fu_209_p2.read();
        tmp5_reg_294 = grp_fu_215_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        tmp_192_reg_345 = tmp_192_fu_184_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        tmp_194_reg_310 = tmp_194_fu_155_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_195_reg_350 = tmp_195_fu_193_p2.read();
        tmp_195_reg_350_pp1_iter1_reg = tmp_195_reg_350.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_196_reg_315 = tmp_196_fu_164_p2.read();
        tmp_196_reg_315_pp0_iter1_reg = tmp_196_reg_315.read();
    }
    if ((!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        tmp_V_191_reg_237 = stream_in_V_V_dout.read();
    }
    if ((!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        tmp_V_192_reg_243 = stream_in_V_V_dout.read();
    }
    if ((!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        tmp_V_195_reg_249 = stream_in_V_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_196_fu_164_p2.read()))) {
        tmp_last_1_reg_324 = tmp_last_1_fu_175_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_195_fu_193_p2.read()))) {
        tmp_last_reg_359 = tmp_last_fu_204_p2.read();
    }
    if ((!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        tmp_s_reg_233 = tmp_s_fu_124_p2.read();
    }
}

void AXI_DMA_MASTER::thread_KER_bound_fu_151_p2() {
    KER_bound_fu_151_p2 = (!p_1_reg_299.read().is_01() || !lhs_V_reg_260.read().is_01())? sc_lv<32>(): (sc_biguint<32>(p_1_reg_299.read()) + sc_bigint<32>(lhs_V_reg_260.read()));
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[18];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[28];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[19];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[20];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[21];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[22];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[26];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[27];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void AXI_DMA_MASTER::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AXI_DMA_MASTER::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_196_reg_315.read()) && esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0));
}

void AXI_DMA_MASTER::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_196_reg_315.read()) && 
    esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state20_io.read()))) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state21_io.read())));
}

void AXI_DMA_MASTER::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_196_reg_315.read()) && 
    esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state20_io.read()))) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state21_io.read())));
}

void AXI_DMA_MASTER::thread_ap_block_pp1_stage0() {
    ap_block_pp1_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AXI_DMA_MASTER::thread_ap_block_pp1_stage0_01001() {
    ap_block_pp1_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_195_reg_350.read()) && esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0));
}

void AXI_DMA_MASTER::thread_ap_block_pp1_stage0_11001() {
    ap_block_pp1_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_195_reg_350.read()) && 
    esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state32_io.read()))) || (esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state33_io.read())));
}

void AXI_DMA_MASTER::thread_ap_block_pp1_stage0_subdone() {
    ap_block_pp1_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_195_reg_350.read()) && 
    esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state32_io.read()))) || (esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state33_io.read())));
}

void AXI_DMA_MASTER::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0));
}

void AXI_DMA_MASTER::thread_ap_block_state19_pp0_stage0_iter0() {
    ap_block_state19_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AXI_DMA_MASTER::thread_ap_block_state20_io() {
    ap_block_state20_io = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_196_reg_315.read()) && esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0));
}

void AXI_DMA_MASTER::thread_ap_block_state20_pp0_stage0_iter1() {
    ap_block_state20_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_196_reg_315.read()) && esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0));
}

void AXI_DMA_MASTER::thread_ap_block_state21_io() {
    ap_block_state21_io = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_196_reg_315_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0));
}

void AXI_DMA_MASTER::thread_ap_block_state21_pp0_stage0_iter2() {
    ap_block_state21_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AXI_DMA_MASTER::thread_ap_block_state22() {
    ap_block_state22 = (esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_out_V_last_1_ack_in.read(), ap_const_logic_0));
}

void AXI_DMA_MASTER::thread_ap_block_state31_pp1_stage0_iter0() {
    ap_block_state31_pp1_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AXI_DMA_MASTER::thread_ap_block_state32_io() {
    ap_block_state32_io = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_195_reg_350.read()) && esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0));
}

void AXI_DMA_MASTER::thread_ap_block_state32_pp1_stage0_iter1() {
    ap_block_state32_pp1_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_195_reg_350.read()) && esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0));
}

void AXI_DMA_MASTER::thread_ap_block_state33_io() {
    ap_block_state33_io = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_195_reg_350_pp1_iter1_reg.read()) && esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0));
}

void AXI_DMA_MASTER::thread_ap_block_state33_pp1_stage0_iter2() {
    ap_block_state33_pp1_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AXI_DMA_MASTER::thread_ap_condition_pp0_exit_iter0_state19() {
    if (esl_seteq<1,1,1>(tmp_196_fu_164_p2.read(), ap_const_lv1_0)) {
        ap_condition_pp0_exit_iter0_state19 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state19 = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_ap_condition_pp1_exit_iter0_state31() {
    if (esl_seteq<1,1,1>(tmp_195_fu_193_p2.read(), ap_const_lv1_0)) {
        ap_condition_pp1_exit_iter0_state31 = ap_const_logic_1;
    } else {
        ap_condition_pp1_exit_iter0_state31 = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_ap_done() {
    if ((!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_out_V_last_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void AXI_DMA_MASTER::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void AXI_DMA_MASTER::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void AXI_DMA_MASTER::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter2.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_ap_ready() {
    if ((!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_out_V_last_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_grp_fu_209_ce() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        grp_fu_209_ce = ap_const_logic_1;
    } else {
        grp_fu_209_ce = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_grp_fu_209_p0() {
    grp_fu_209_p0 =  (sc_lv<16>) (tmp_193_fu_137_p1.read());
}

void AXI_DMA_MASTER::thread_grp_fu_209_p1() {
    grp_fu_209_p1 =  (sc_lv<16>) (tmp_193_fu_137_p1.read());
}

void AXI_DMA_MASTER::thread_grp_fu_215_ce() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        grp_fu_215_ce = ap_const_logic_1;
    } else {
        grp_fu_215_ce = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_grp_fu_215_p1() {
    grp_fu_215_p1 =  (sc_lv<16>) (lhs_V_fu_130_p1.read());
}

void AXI_DMA_MASTER::thread_grp_fu_221_ce() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        grp_fu_221_ce = ap_const_logic_1;
    } else {
        grp_fu_221_ce = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_grp_fu_221_p1() {
    grp_fu_221_p1 =  (sc_lv<16>) (rhs_V_fu_140_p1.read());
}

void AXI_DMA_MASTER::thread_grp_fu_227_ce() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        grp_fu_227_ce = ap_const_logic_1;
    } else {
        grp_fu_227_ce = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_grp_fu_227_p0() {
    grp_fu_227_p0 =  (sc_lv<16>) (lhs_V_fu_130_p1.read());
}

void AXI_DMA_MASTER::thread_grp_fu_227_p1() {
    grp_fu_227_p1 =  (sc_lv<16>) (rhs_V_fu_140_p1.read());
}

void AXI_DMA_MASTER::thread_i1_cast_fu_160_p1() {
    i1_cast_fu_160_p1 = esl_zext<32,31>(i1_reg_92.read());
}

void AXI_DMA_MASTER::thread_i_1_fu_169_p2() {
    i_1_fu_169_p2 = (!i1_reg_92.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(i1_reg_92.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void AXI_DMA_MASTER::thread_i_30_fu_198_p2() {
    i_30_fu_198_p2 = (!i_reg_103.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(i_reg_103.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void AXI_DMA_MASTER::thread_i_cast_fu_189_p1() {
    i_cast_fu_189_p1 = esl_zext<32,31>(i_reg_103.read());
}

void AXI_DMA_MASTER::thread_lhs_V_fu_130_p0() {
    lhs_V_fu_130_p0 = reg_119.read();
}

void AXI_DMA_MASTER::thread_lhs_V_fu_130_p1() {
    lhs_V_fu_130_p1 = esl_sext<32,16>(lhs_V_fu_130_p0.read());
}

void AXI_DMA_MASTER::thread_rhs_V_fu_140_p1() {
    rhs_V_fu_140_p1 = esl_sext<32,16>(tmp_V_195_reg_249.read());
}

void AXI_DMA_MASTER::thread_stream_in_V_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_195_reg_350.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_196_reg_315.read())))) {
        stream_in_V_V_blk_n = stream_in_V_V_empty_n.read();
    } else {
        stream_in_V_V_blk_n = ap_const_logic_1;
    }
}

void AXI_DMA_MASTER::thread_stream_in_V_V_read() {
    if (((!(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_196_reg_315.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_195_reg_350.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) || 
         (!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) || 
         (!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         (!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) || 
         (!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) || 
         (!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
         (!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        stream_in_V_V_read = ap_const_logic_1;
    } else {
        stream_in_V_V_read = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_stream_out_TDATA() {
    stream_out_TDATA = stream_out_V_data_V_1_data_out.read();
}

void AXI_DMA_MASTER::thread_stream_out_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_195_reg_350.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_196_reg_315.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         (esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_195_reg_350_pp1_iter1_reg.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_196_reg_315_pp0_iter1_reg.read())))) {
        stream_out_TDATA_blk_n = stream_out_V_data_V_1_state.read()[1];
    } else {
        stream_out_TDATA_blk_n = ap_const_logic_1;
    }
}

void AXI_DMA_MASTER::thread_stream_out_TLAST() {
    stream_out_TLAST = stream_out_V_last_1_data_out.read();
}

void AXI_DMA_MASTER::thread_stream_out_TVALID() {
    stream_out_TVALID = stream_out_V_last_1_state.read()[0];
}

void AXI_DMA_MASTER::thread_stream_out_V_data_V_1_ack_in() {
    stream_out_V_data_V_1_ack_in = stream_out_V_data_V_1_state.read()[1];
}

void AXI_DMA_MASTER::thread_stream_out_V_data_V_1_ack_out() {
    stream_out_V_data_V_1_ack_out = stream_out_TREADY.read();
}

void AXI_DMA_MASTER::thread_stream_out_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_sel.read())) {
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_B.read();
    } else {
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_A.read();
    }
}

void AXI_DMA_MASTER::thread_stream_out_V_data_V_1_load_A() {
    stream_out_V_data_V_1_load_A = (stream_out_V_data_V_1_state_cmp_full.read() & ~stream_out_V_data_V_1_sel_wr.read());
}

void AXI_DMA_MASTER::thread_stream_out_V_data_V_1_load_B() {
    stream_out_V_data_V_1_load_B = (stream_out_V_data_V_1_sel_wr.read() & stream_out_V_data_V_1_state_cmp_full.read());
}

void AXI_DMA_MASTER::thread_stream_out_V_data_V_1_sel() {
    stream_out_V_data_V_1_sel = stream_out_V_data_V_1_sel_rd.read();
}

void AXI_DMA_MASTER::thread_stream_out_V_data_V_1_state_cmp_full() {
    stream_out_V_data_V_1_state_cmp_full =  (sc_logic) ((!stream_out_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(stream_out_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void AXI_DMA_MASTER::thread_stream_out_V_data_V_1_vld_in() {
    if (((!(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_196_reg_315.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_195_reg_350.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) || 
         (!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) || 
         (!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         (!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) || 
         (!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) || 
         (!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
         (!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        stream_out_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        stream_out_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_stream_out_V_data_V_1_vld_out() {
    stream_out_V_data_V_1_vld_out = stream_out_V_data_V_1_state.read()[0];
}

void AXI_DMA_MASTER::thread_stream_out_V_last_1_ack_in() {
    stream_out_V_last_1_ack_in = stream_out_V_last_1_state.read()[1];
}

void AXI_DMA_MASTER::thread_stream_out_V_last_1_ack_out() {
    stream_out_V_last_1_ack_out = stream_out_TREADY.read();
}

void AXI_DMA_MASTER::thread_stream_out_V_last_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_195_reg_350.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_01001.read(), ap_const_boolean_0))) {
        stream_out_V_last_1_data_in =  (sc_logic) (tmp_last_reg_359.read()[0]);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_196_reg_315.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        stream_out_V_last_1_data_in =  (sc_logic) (tmp_last_1_reg_324.read()[0]);
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0))) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                 esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                 esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                 esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                 esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_1)))) {
        stream_out_V_last_1_data_in =  (sc_logic) (ap_const_lv1_0[0]);
    } else {
        stream_out_V_last_1_data_in = sc_logic('X');
    }
}

void AXI_DMA_MASTER::thread_stream_out_V_last_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_1_sel.read())) {
        stream_out_V_last_1_data_out = stream_out_V_last_1_payload_B.read();
    } else {
        stream_out_V_last_1_data_out = stream_out_V_last_1_payload_A.read();
    }
}

void AXI_DMA_MASTER::thread_stream_out_V_last_1_load_A() {
    stream_out_V_last_1_load_A = (stream_out_V_last_1_state_cmp_full.read() & ~stream_out_V_last_1_sel_wr.read());
}

void AXI_DMA_MASTER::thread_stream_out_V_last_1_load_B() {
    stream_out_V_last_1_load_B = (stream_out_V_last_1_sel_wr.read() & stream_out_V_last_1_state_cmp_full.read());
}

void AXI_DMA_MASTER::thread_stream_out_V_last_1_sel() {
    stream_out_V_last_1_sel = stream_out_V_last_1_sel_rd.read();
}

void AXI_DMA_MASTER::thread_stream_out_V_last_1_state_cmp_full() {
    stream_out_V_last_1_state_cmp_full =  (sc_logic) ((!stream_out_V_last_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(stream_out_V_last_1_state.read() != ap_const_lv2_1))[0];
}

void AXI_DMA_MASTER::thread_stream_out_V_last_1_vld_in() {
    if (((!(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_196_reg_315.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_195_reg_350.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) || 
         (!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) || 
         (!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         (!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) || 
         (!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) || 
         (!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
         (!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        stream_out_V_last_1_vld_in = ap_const_logic_1;
    } else {
        stream_out_V_last_1_vld_in = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_stream_out_V_last_1_vld_out() {
    stream_out_V_last_1_vld_out = stream_out_V_last_1_state.read()[0];
}

void AXI_DMA_MASTER::thread_tmp_192_fu_184_p2() {
    tmp_192_fu_184_p2 = (!OFM_bound_reg_339.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_biguint<32>(OFM_bound_reg_339.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void AXI_DMA_MASTER::thread_tmp_193_fu_137_p1() {
    tmp_193_fu_137_p1 = esl_sext<32,16>(tmp_V_191_reg_237.read());
}

void AXI_DMA_MASTER::thread_tmp_194_fu_155_p2() {
    tmp_194_fu_155_p2 = (!KER_bound_reg_304.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_biguint<32>(KER_bound_reg_304.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void AXI_DMA_MASTER::thread_tmp_195_fu_193_p2() {
    tmp_195_fu_193_p2 = (!i_cast_fu_189_p1.read().is_01() || !OFM_bound_reg_339.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_cast_fu_189_p1.read()) < sc_bigint<32>(OFM_bound_reg_339.read()));
}

void AXI_DMA_MASTER::thread_tmp_196_fu_164_p2() {
    tmp_196_fu_164_p2 = (!i1_cast_fu_160_p1.read().is_01() || !KER_bound_reg_304.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i1_cast_fu_160_p1.read()) < sc_bigint<32>(KER_bound_reg_304.read()));
}

void AXI_DMA_MASTER::thread_tmp_last_1_fu_175_p2() {
    tmp_last_1_fu_175_p2 = (!i1_cast_fu_160_p1.read().is_01() || !tmp_194_reg_310.read().is_01())? sc_lv<1>(): sc_lv<1>(i1_cast_fu_160_p1.read() == tmp_194_reg_310.read());
}

void AXI_DMA_MASTER::thread_tmp_last_fu_204_p2() {
    tmp_last_fu_204_p2 = (!i_cast_fu_189_p1.read().is_01() || !tmp_192_reg_345.read().is_01())? sc_lv<1>(): sc_lv<1>(i_cast_fu_189_p1.read() == tmp_192_reg_345.read());
}

void AXI_DMA_MASTER::thread_tmp_s_fu_124_p2() {
    tmp_s_fu_124_p2 = (!reg_114.read().is_01() || !ap_const_lv16_0.is_01())? sc_lv<1>(): sc_lv<1>(reg_114.read() == ap_const_lv16_0);
}

void AXI_DMA_MASTER::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!(esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            if ((!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_in_V_V_empty_n.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(tmp_s_reg_233.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
                ap_NS_fsm = ap_ST_fsm_state23;
            } else if ((esl_seteq<1,1,1>(tmp_s_reg_233.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 262144 : 
            if ((!(esl_seteq<1,1,1>(tmp_196_fu_164_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1)) && !(esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1)) || (esl_seteq<1,1,1>(tmp_196_fu_164_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state22;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 524288 : 
            if ((!(esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_out_V_last_1_ack_in.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state22;
            }
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            break;
        case 268435456 : 
            if ((!(esl_seteq<1,1,1>(tmp_195_fu_193_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1)) && !(esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1)) || (esl_seteq<1,1,1>(tmp_195_fu_193_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state34;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            break;
    }
}

}

