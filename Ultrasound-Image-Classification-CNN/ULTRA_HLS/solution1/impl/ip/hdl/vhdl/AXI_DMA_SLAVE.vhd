-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AXI_DMA_SLAVE is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    stream_in_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    stream_in_TVALID : IN STD_LOGIC;
    stream_in_TREADY : OUT STD_LOGIC;
    stream_in_TLAST : IN STD_LOGIC;
    stream_out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    stream_out_V_V_full_n : IN STD_LOGIC;
    stream_out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of AXI_DMA_SLAVE is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal stream_in_V_data_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal stream_in_V_data_V_0_vld_in : STD_LOGIC;
    signal stream_in_V_data_V_0_vld_out : STD_LOGIC;
    signal stream_in_V_data_V_0_ack_in : STD_LOGIC;
    signal stream_in_V_data_V_0_ack_out : STD_LOGIC;
    signal stream_in_V_data_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal stream_in_V_data_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal stream_in_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_V_data_V_0_sel : STD_LOGIC;
    signal stream_in_V_data_V_0_load_A : STD_LOGIC;
    signal stream_in_V_data_V_0_load_B : STD_LOGIC;
    signal stream_in_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_V_last_0_vld_in : STD_LOGIC;
    signal stream_in_V_last_0_ack_out : STD_LOGIC;
    signal stream_in_V_last_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal tmp_189_reg_309 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_190_reg_285 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_V_blk_n : STD_LOGIC;
    signal i1_reg_85 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_96 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_s_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_202 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_data_V_1_reg_206 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal tmp_data_V_2_reg_211 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal tmp_data_V_3_reg_216 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state5 : BOOLEAN;
    signal tmp_data_V_4_reg_222 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state6 : BOOLEAN;
    signal tmp_data_V_5_reg_227 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state7 : BOOLEAN;
    signal lhs_V_4_fu_118_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_4_reg_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state9 : BOOLEAN;
    signal tmp_188_fu_124_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_fu_130_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_178_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_184_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_reg_270 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_136_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_9_reg_275 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal KER_bound_fu_140_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal KER_bound_reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_190_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state18_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_6_fu_153_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal grp_fu_190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_196_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_299 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_159_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal IFM_bound_reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal tmp_189_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state28_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state29_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_s_fu_172_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state18 : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state28 : STD_LOGIC;
    signal ap_block_state8 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i1_cast_fu_144_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal i_cast_fu_163_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_178_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_178_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_196_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_196_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_178_ce : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_184_ce : STD_LOGIC;
    signal grp_fu_190_ce : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_196_ce : STD_LOGIC;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component ultra_mul_32s_32sbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ultra_mul_mul_16scud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    ultra_mul_32s_32sbkb_U1 : component ultra_mul_32s_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp4_reg_270,
        din1 => tmp3_reg_265,
        ce => ap_const_logic_1,
        dout => grp_fu_136_p2);

    ultra_mul_32s_32sbkb_U2 : component ultra_mul_32s_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp2_reg_299,
        din1 => tmp1_reg_294,
        ce => ap_const_logic_1,
        dout => grp_fu_159_p2);

    ultra_mul_mul_16scud_U3 : component ultra_mul_mul_16scud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_178_p0,
        din1 => grp_fu_178_p1,
        ce => grp_fu_178_ce,
        dout => grp_fu_178_p2);

    ultra_mul_mul_16scud_U4 : component ultra_mul_mul_16scud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_data_V_3_reg_216,
        din1 => tmp_data_V_5_reg_227,
        ce => grp_fu_184_ce,
        dout => grp_fu_184_p2);

    ultra_mul_mul_16scud_U5 : component ultra_mul_mul_16scud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_data_V_3_reg_216,
        din1 => tmp_data_V_1_reg_206,
        ce => grp_fu_190_ce,
        dout => grp_fu_190_p2);

    ultra_mul_mul_16scud_U6 : component ultra_mul_mul_16scud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_196_p0,
        din1 => grp_fu_196_p1,
        ce => grp_fu_196_ce,
        dout => grp_fu_196_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state18) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state18))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state18);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state28) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state28))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state28);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                stream_in_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_V_data_V_0_ack_out = ap_const_logic_1) and (stream_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_V_data_V_0_sel_rd <= not(stream_in_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                stream_in_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_V_data_V_0_ack_in = ap_const_logic_1) and (stream_in_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_V_data_V_0_sel_wr <= not(stream_in_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                stream_in_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_V_data_V_0_state = ap_const_lv2_2) and (stream_in_V_data_V_0_vld_in = ap_const_logic_0)) or ((stream_in_V_data_V_0_state = ap_const_lv2_3) and (stream_in_V_data_V_0_vld_in = ap_const_logic_0) and (stream_in_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_V_data_V_0_state = ap_const_lv2_1) and (stream_in_V_data_V_0_ack_out = ap_const_logic_0)) or ((stream_in_V_data_V_0_state = ap_const_lv2_3) and (stream_in_V_data_V_0_ack_out = ap_const_logic_0) and (stream_in_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_V_data_V_0_vld_in = ap_const_logic_0) and (stream_in_V_data_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_V_data_V_0_ack_out = ap_const_logic_0) and (stream_in_V_data_V_0_vld_in = ap_const_logic_1))) and (stream_in_V_data_V_0_state = ap_const_lv2_3)) or ((stream_in_V_data_V_0_state = ap_const_lv2_1) and (stream_in_V_data_V_0_ack_out = ap_const_logic_1)) or ((stream_in_V_data_V_0_state = ap_const_lv2_2) and (stream_in_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_last_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                stream_in_V_last_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_V_last_0_state = ap_const_lv2_2) and (stream_in_V_last_0_vld_in = ap_const_logic_0)) or ((stream_in_V_last_0_state = ap_const_lv2_3) and (stream_in_V_last_0_vld_in = ap_const_logic_0) and (stream_in_V_last_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_V_last_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_V_last_0_state = ap_const_lv2_1) and (stream_in_V_last_0_ack_out = ap_const_logic_0)) or ((stream_in_V_last_0_state = ap_const_lv2_3) and (stream_in_V_last_0_ack_out = ap_const_logic_0) and (stream_in_V_last_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_last_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_V_last_0_vld_in = ap_const_logic_0) and (stream_in_V_last_0_ack_out = ap_const_logic_1))) and not(((stream_in_V_last_0_ack_out = ap_const_logic_0) and (stream_in_V_last_0_vld_in = ap_const_logic_1))) and (stream_in_V_last_0_state = ap_const_lv2_3)) or ((stream_in_V_last_0_state = ap_const_lv2_1) and (stream_in_V_last_0_ack_out = ap_const_logic_1)) or ((stream_in_V_last_0_state = ap_const_lv2_2) and (stream_in_V_last_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_last_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_last_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_85_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_190_fu_148_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i1_reg_85 <= i_6_fu_153_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i1_reg_85 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_189_fu_167_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_reg_96 <= i_s_fu_172_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                i_reg_96 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                IFM_bound_reg_304 <= grp_fu_159_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                KER_bound_reg_280 <= KER_bound_fu_140_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (tmp_s_reg_202 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                lhs_V_4_reg_232 <= lhs_V_4_fu_118_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                p_9_reg_275 <= grp_fu_136_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_data_V_0_load_A = ap_const_logic_1)) then
                stream_in_V_data_V_0_payload_A <= stream_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_data_V_0_load_B = ap_const_logic_1)) then
                stream_in_V_data_V_0_payload_B <= stream_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp1_reg_294 <= grp_fu_190_p2;
                tmp2_reg_299 <= grp_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp3_reg_265 <= grp_fu_178_p2;
                tmp4_reg_270 <= grp_fu_184_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                tmp_189_reg_309 <= tmp_189_fu_167_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_190_reg_285 <= tmp_190_fu_148_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_data_V_1_reg_206 <= stream_in_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_data_V_2_reg_211 <= stream_in_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_data_V_3_reg_216 <= stream_in_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_data_V_4_reg_222 <= stream_in_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                tmp_data_V_5_reg_227 <= stream_in_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_s_reg_202 <= tmp_s_fu_112_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, stream_in_V_data_V_0_vld_out, stream_out_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, tmp_s_reg_202, tmp_190_fu_148_p2, ap_enable_reg_pp0_iter0, tmp_189_fu_167_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if ((not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (tmp_s_reg_202 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                elsif ((not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (tmp_s_reg_202 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((tmp_190_fu_148_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((tmp_190_fu_148_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((tmp_189_fu_167_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((tmp_189_fu_167_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    KER_bound_fu_140_p2 <= std_logic_vector(unsigned(p_9_reg_275) + unsigned(lhs_V_4_reg_232));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(17);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(26);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(18);
    ap_CS_fsm_state21 <= ap_CS_fsm(19);
    ap_CS_fsm_state22 <= ap_CS_fsm(20);
    ap_CS_fsm_state23 <= ap_CS_fsm(21);
    ap_CS_fsm_state27 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_V_full_n, ap_enable_reg_pp0_iter1, tmp_190_reg_285)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((tmp_190_reg_285 = ap_const_lv1_1) and (stream_out_V_V_full_n = ap_const_logic_0)) or ((tmp_190_reg_285 = ap_const_lv1_1) and (stream_in_V_data_V_0_vld_out = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_V_full_n, ap_enable_reg_pp0_iter1, tmp_190_reg_285)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((tmp_190_reg_285 = ap_const_lv1_1) and (stream_out_V_V_full_n = ap_const_logic_0)) or ((tmp_190_reg_285 = ap_const_lv1_1) and (stream_in_V_data_V_0_vld_out = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_V_full_n, ap_enable_reg_pp0_iter1, tmp_190_reg_285)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((tmp_190_reg_285 = ap_const_lv1_1) and (stream_out_V_V_full_n = ap_const_logic_0)) or ((tmp_190_reg_285 = ap_const_lv1_1) and (stream_in_V_data_V_0_vld_out = ap_const_logic_0))));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_V_full_n, ap_enable_reg_pp1_iter1, tmp_189_reg_309)
    begin
                ap_block_pp1_stage0_01001 <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (((tmp_189_reg_309 = ap_const_lv1_1) and (stream_out_V_V_full_n = ap_const_logic_0)) or ((tmp_189_reg_309 = ap_const_lv1_1) and (stream_in_V_data_V_0_vld_out = ap_const_logic_0))));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_V_full_n, ap_enable_reg_pp1_iter1, tmp_189_reg_309)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (((tmp_189_reg_309 = ap_const_lv1_1) and (stream_out_V_V_full_n = ap_const_logic_0)) or ((tmp_189_reg_309 = ap_const_lv1_1) and (stream_in_V_data_V_0_vld_out = ap_const_logic_0))));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_V_full_n, ap_enable_reg_pp1_iter1, tmp_189_reg_309)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (((tmp_189_reg_309 = ap_const_lv1_1) and (stream_out_V_V_full_n = ap_const_logic_0)) or ((tmp_189_reg_309 = ap_const_lv1_1) and (stream_in_V_data_V_0_vld_out = ap_const_logic_0))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;

        ap_block_state18_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state19_pp0_stage0_iter1_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_V_full_n, tmp_190_reg_285)
    begin
                ap_block_state19_pp0_stage0_iter1 <= (((tmp_190_reg_285 = ap_const_lv1_1) and (stream_out_V_V_full_n = ap_const_logic_0)) or ((tmp_190_reg_285 = ap_const_lv1_1) and (stream_in_V_data_V_0_vld_out = ap_const_logic_0)));
    end process;


    ap_block_state2_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_V_full_n)
    begin
                ap_block_state2 <= ((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state28_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state29_pp1_stage0_iter1_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_V_full_n, tmp_189_reg_309)
    begin
                ap_block_state29_pp1_stage0_iter1 <= (((tmp_189_reg_309 = ap_const_lv1_1) and (stream_out_V_V_full_n = ap_const_logic_0)) or ((tmp_189_reg_309 = ap_const_lv1_1) and (stream_in_V_data_V_0_vld_out = ap_const_logic_0)));
    end process;


    ap_block_state3_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_V_full_n)
    begin
                ap_block_state3 <= ((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_V_full_n)
    begin
                ap_block_state4 <= ((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_V_full_n)
    begin
                ap_block_state5 <= ((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state6_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_V_full_n)
    begin
                ap_block_state6 <= ((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state7_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_V_full_n)
    begin
                ap_block_state7 <= ((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state8_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_V_full_n)
    begin
                ap_block_state8 <= ((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state9_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_V_full_n)
    begin
                ap_block_state9 <= ((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state18_assign_proc : process(tmp_190_fu_148_p2)
    begin
        if ((tmp_190_fu_148_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state18 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state28_assign_proc : process(tmp_189_fu_167_p2)
    begin
        if ((tmp_189_fu_167_p2 = ap_const_lv1_0)) then 
            ap_condition_pp1_exit_iter0_state28 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state28 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    grp_fu_178_ce_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_V_full_n, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            grp_fu_178_ce <= ap_const_logic_1;
        else 
            grp_fu_178_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_178_p0 <= tmp_188_fu_124_p1(16 - 1 downto 0);
    grp_fu_178_p1 <= tmp_188_fu_124_p1(16 - 1 downto 0);

    grp_fu_184_ce_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_V_full_n, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            grp_fu_184_ce <= ap_const_logic_1;
        else 
            grp_fu_184_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_190_ce_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_V_full_n, ap_CS_fsm_state9, ap_CS_fsm_state22, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            grp_fu_190_ce <= ap_const_logic_1;
        else 
            grp_fu_190_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_196_ce_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_V_full_n, ap_CS_fsm_state9, ap_CS_fsm_state22, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            grp_fu_196_ce <= ap_const_logic_1;
        else 
            grp_fu_196_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_196_p0 <= rhs_V_fu_130_p1(16 - 1 downto 0);
    grp_fu_196_p1 <= rhs_V_fu_130_p1(16 - 1 downto 0);
    i1_cast_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_85),32));
    i_6_fu_153_p2 <= std_logic_vector(unsigned(i1_reg_85) + unsigned(ap_const_lv31_1));
    i_cast_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_96),32));
    i_s_fu_172_p2 <= std_logic_vector(unsigned(i_reg_96) + unsigned(ap_const_lv31_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

        lhs_V_4_fu_118_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_V_5_reg_227),32));


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

        rhs_V_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_V_4_reg_222),32));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_TDATA_blk_n_assign_proc : process(stream_in_V_data_V_0_state, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, tmp_189_reg_309, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_190_reg_285)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((tmp_190_reg_285 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((tmp_189_reg_309 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            stream_in_TDATA_blk_n <= stream_in_V_data_V_0_state(0);
        else 
            stream_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_in_TREADY <= stream_in_V_last_0_state(1);
    stream_in_V_data_V_0_ack_in <= stream_in_V_data_V_0_state(1);

    stream_in_V_data_V_0_ack_out_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, tmp_189_reg_309, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_190_reg_285, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001)
    begin
        if ((((tmp_190_reg_285 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((tmp_189_reg_309 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            stream_in_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_data_V_0_data_out_assign_proc : process(stream_in_V_data_V_0_payload_A, stream_in_V_data_V_0_payload_B, stream_in_V_data_V_0_sel)
    begin
        if ((stream_in_V_data_V_0_sel = ap_const_logic_1)) then 
            stream_in_V_data_V_0_data_out <= stream_in_V_data_V_0_payload_B;
        else 
            stream_in_V_data_V_0_data_out <= stream_in_V_data_V_0_payload_A;
        end if; 
    end process;

    stream_in_V_data_V_0_load_A <= (stream_in_V_data_V_0_state_cmp_full and not(stream_in_V_data_V_0_sel_wr));
    stream_in_V_data_V_0_load_B <= (stream_in_V_data_V_0_state_cmp_full and stream_in_V_data_V_0_sel_wr);
    stream_in_V_data_V_0_sel <= stream_in_V_data_V_0_sel_rd;
    stream_in_V_data_V_0_state_cmp_full <= '0' when (stream_in_V_data_V_0_state = ap_const_lv2_1) else '1';
    stream_in_V_data_V_0_vld_in <= stream_in_TVALID;
    stream_in_V_data_V_0_vld_out <= stream_in_V_data_V_0_state(0);

    stream_in_V_last_0_ack_out_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, tmp_189_reg_309, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_190_reg_285, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001)
    begin
        if ((((tmp_190_reg_285 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((tmp_189_reg_309 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            stream_in_V_last_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_last_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    stream_in_V_last_0_vld_in <= stream_in_TVALID;

    stream_out_V_V_blk_n_assign_proc : process(stream_out_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, tmp_189_reg_309, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_190_reg_285)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((tmp_190_reg_285 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((tmp_189_reg_309 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            stream_out_V_V_blk_n <= stream_out_V_V_full_n;
        else 
            stream_out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_out_V_V_din <= stream_in_V_data_V_0_data_out;

    stream_out_V_V_write_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, tmp_189_reg_309, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_190_reg_285, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001)
    begin
        if ((((tmp_190_reg_285 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((tmp_189_reg_309 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            stream_out_V_V_write <= ap_const_logic_1;
        else 
            stream_out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

        tmp_188_fu_124_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_V_2_reg_211),32));

    tmp_189_fu_167_p2 <= "1" when (signed(i_cast_fu_163_p1) < signed(IFM_bound_reg_304)) else "0";
    tmp_190_fu_148_p2 <= "1" when (signed(i1_cast_fu_144_p1) < signed(KER_bound_reg_280)) else "0";
    tmp_s_fu_112_p2 <= "1" when (stream_in_V_data_V_0_data_out = ap_const_lv16_0) else "0";
end behav;
