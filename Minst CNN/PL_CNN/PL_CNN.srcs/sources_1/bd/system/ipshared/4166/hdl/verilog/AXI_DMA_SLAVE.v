// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AXI_DMA_SLAVE (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        stream_in_TDATA,
        stream_in_TVALID,
        stream_in_TREADY,
        stream_in_TLAST,
        stream_out_V_V_din,
        stream_out_V_V_full_n,
        stream_out_V_V_write
);

parameter    ap_ST_fsm_state1 = 29'd1;
parameter    ap_ST_fsm_state2 = 29'd2;
parameter    ap_ST_fsm_state3 = 29'd4;
parameter    ap_ST_fsm_state4 = 29'd8;
parameter    ap_ST_fsm_state5 = 29'd16;
parameter    ap_ST_fsm_state6 = 29'd32;
parameter    ap_ST_fsm_state7 = 29'd64;
parameter    ap_ST_fsm_state8 = 29'd128;
parameter    ap_ST_fsm_state9 = 29'd256;
parameter    ap_ST_fsm_state10 = 29'd512;
parameter    ap_ST_fsm_state11 = 29'd1024;
parameter    ap_ST_fsm_state12 = 29'd2048;
parameter    ap_ST_fsm_state13 = 29'd4096;
parameter    ap_ST_fsm_state14 = 29'd8192;
parameter    ap_ST_fsm_state15 = 29'd16384;
parameter    ap_ST_fsm_state16 = 29'd32768;
parameter    ap_ST_fsm_state17 = 29'd65536;
parameter    ap_ST_fsm_pp0_stage0 = 29'd131072;
parameter    ap_ST_fsm_state20 = 29'd262144;
parameter    ap_ST_fsm_state21 = 29'd524288;
parameter    ap_ST_fsm_state22 = 29'd1048576;
parameter    ap_ST_fsm_state23 = 29'd2097152;
parameter    ap_ST_fsm_state24 = 29'd4194304;
parameter    ap_ST_fsm_state25 = 29'd8388608;
parameter    ap_ST_fsm_state26 = 29'd16777216;
parameter    ap_ST_fsm_state27 = 29'd33554432;
parameter    ap_ST_fsm_state28 = 29'd67108864;
parameter    ap_ST_fsm_state29 = 29'd134217728;
parameter    ap_ST_fsm_pp1_stage0 = 29'd268435456;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] stream_in_TDATA;
input   stream_in_TVALID;
output   stream_in_TREADY;
input   stream_in_TLAST;
output  [15:0] stream_out_V_V_din;
input   stream_out_V_V_full_n;
output   stream_out_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg stream_out_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [28:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [15:0] stream_in_V_data_V_0_data_out;
wire    stream_in_V_data_V_0_vld_in;
wire    stream_in_V_data_V_0_vld_out;
wire    stream_in_V_data_V_0_ack_in;
reg    stream_in_V_data_V_0_ack_out;
reg   [15:0] stream_in_V_data_V_0_payload_A;
reg   [15:0] stream_in_V_data_V_0_payload_B;
reg    stream_in_V_data_V_0_sel_rd;
reg    stream_in_V_data_V_0_sel_wr;
wire    stream_in_V_data_V_0_sel;
wire    stream_in_V_data_V_0_load_A;
wire    stream_in_V_data_V_0_load_B;
reg   [1:0] stream_in_V_data_V_0_state;
wire    stream_in_V_data_V_0_state_cmp_full;
wire    stream_in_V_last_0_vld_in;
reg    stream_in_V_last_0_ack_out;
reg   [1:0] stream_in_V_last_0_state;
reg    stream_in_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] tmp_74_reg_299;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_75_reg_275;
reg    stream_out_V_V_blk_n;
reg   [30:0] i1_reg_85;
reg   [30:0] i_reg_96;
wire   [0:0] tmp_s_fu_112_p2;
reg   [0:0] tmp_s_reg_198;
reg    ap_block_state2;
reg  signed [15:0] tmp_data_V_1_reg_202;
reg    ap_block_state3;
reg  signed [15:0] tmp_data_V_2_reg_207;
reg    ap_block_state4;
reg  signed [15:0] tmp_data_V_3_reg_212;
reg    ap_block_state5;
reg  signed [15:0] tmp_data_V_4_reg_218;
reg    ap_block_state6;
reg  signed [15:0] tmp_data_V_5_reg_223;
reg    ap_block_state7;
reg    ap_block_state8;
wire  signed [31:0] tmp_72_fu_124_p1;
wire  signed [31:0] rhs_V_fu_130_p1;
wire  signed [31:0] grp_fu_174_p2;
reg  signed [31:0] tmp3_reg_260;
wire    ap_CS_fsm_state10;
wire  signed [31:0] grp_fu_180_p2;
reg  signed [31:0] tmp4_reg_265;
wire   [31:0] grp_fu_136_p2;
reg   [31:0] KER_bound_reg_270;
wire    ap_CS_fsm_state17;
wire   [0:0] tmp_75_fu_144_p2;
wire    ap_block_state18_pp0_stage0_iter0;
reg    ap_block_state19_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] i_4_fu_149_p2;
reg    ap_enable_reg_pp0_iter0;
wire  signed [31:0] grp_fu_186_p2;
reg  signed [31:0] tmp1_reg_284;
wire    ap_CS_fsm_state22;
wire  signed [31:0] grp_fu_192_p2;
reg  signed [31:0] tmp2_reg_289;
wire   [31:0] grp_fu_155_p2;
reg   [31:0] IFM_bound_reg_294;
wire    ap_CS_fsm_state29;
wire   [0:0] tmp_74_fu_163_p2;
wire    ap_block_state30_pp1_stage0_iter0;
reg    ap_block_state31_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [30:0] i_s_fu_168_p2;
reg    ap_enable_reg_pp1_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state18;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state30;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp1_stage0_01001;
wire    ap_CS_fsm_state11;
wire   [31:0] i1_cast_fu_140_p1;
wire    ap_CS_fsm_state23;
wire   [31:0] i_cast_fu_159_p1;
wire  signed [15:0] grp_fu_174_p0;
wire  signed [15:0] grp_fu_174_p1;
wire  signed [15:0] grp_fu_192_p0;
wire  signed [15:0] grp_fu_192_p1;
reg    grp_fu_174_ce;
wire    ap_CS_fsm_state9;
reg    grp_fu_180_ce;
reg    grp_fu_186_ce;
wire    ap_CS_fsm_state21;
reg    grp_fu_192_ce;
wire    ap_CS_fsm_state20;
reg   [28:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 29'd1;
#0 stream_in_V_data_V_0_sel_rd = 1'b0;
#0 stream_in_V_data_V_0_sel_wr = 1'b0;
#0 stream_in_V_data_V_0_state = 2'd0;
#0 stream_in_V_last_0_state = 2'd0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

cnn_mul_32s_32s_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_mul_32s_32s_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp4_reg_265),
    .din1(tmp3_reg_260),
    .ce(1'b1),
    .dout(grp_fu_136_p2)
);

cnn_mul_32s_32s_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_mul_32s_32s_3bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp2_reg_289),
    .din1(tmp1_reg_284),
    .ce(1'b1),
    .dout(grp_fu_155_p2)
);

cnn_mul_mul_16s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
cnn_mul_mul_16s_1cud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_174_p0),
    .din1(grp_fu_174_p1),
    .ce(grp_fu_174_ce),
    .dout(grp_fu_174_p2)
);

cnn_mul_mul_16s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
cnn_mul_mul_16s_1cud_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_data_V_3_reg_212),
    .din1(tmp_data_V_5_reg_223),
    .ce(grp_fu_180_ce),
    .dout(grp_fu_180_p2)
);

cnn_mul_mul_16s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
cnn_mul_mul_16s_1cud_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_data_V_3_reg_212),
    .din1(tmp_data_V_1_reg_202),
    .ce(grp_fu_186_ce),
    .dout(grp_fu_186_p2)
);

cnn_mul_mul_16s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
cnn_mul_mul_16s_1cud_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_192_p0),
    .din1(grp_fu_192_p1),
    .ce(grp_fu_192_ce),
    .dout(grp_fu_192_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state18) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state18))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state18);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state30) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state30))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state30);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_data_V_0_ack_out == 1'b1) & (stream_in_V_data_V_0_vld_out == 1'b1))) begin
            stream_in_V_data_V_0_sel_rd <= ~stream_in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_data_V_0_ack_in == 1'b1) & (stream_in_V_data_V_0_vld_in == 1'b1))) begin
            stream_in_V_data_V_0_sel_wr <= ~stream_in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_data_V_0_state == 2'd2) & (stream_in_V_data_V_0_vld_in == 1'b0)) | ((stream_in_V_data_V_0_state == 2'd3) & (stream_in_V_data_V_0_vld_in == 1'b0) & (stream_in_V_data_V_0_ack_out == 1'b1)))) begin
            stream_in_V_data_V_0_state <= 2'd2;
        end else if ((((stream_in_V_data_V_0_state == 2'd1) & (stream_in_V_data_V_0_ack_out == 1'b0)) | ((stream_in_V_data_V_0_state == 2'd3) & (stream_in_V_data_V_0_ack_out == 1'b0) & (stream_in_V_data_V_0_vld_in == 1'b1)))) begin
            stream_in_V_data_V_0_state <= 2'd1;
        end else if ((((stream_in_V_data_V_0_state == 2'd1) & (stream_in_V_data_V_0_ack_out == 1'b1)) | ((stream_in_V_data_V_0_state == 2'd2) & (stream_in_V_data_V_0_vld_in == 1'b1)) | (~((stream_in_V_data_V_0_vld_in == 1'b0) & (stream_in_V_data_V_0_ack_out == 1'b1)) & ~((stream_in_V_data_V_0_ack_out == 1'b0) & (stream_in_V_data_V_0_vld_in == 1'b1)) & (stream_in_V_data_V_0_state == 2'd3)))) begin
            stream_in_V_data_V_0_state <= 2'd3;
        end else begin
            stream_in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_in_V_last_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_last_0_state == 2'd2) & (stream_in_V_last_0_vld_in == 1'b0)) | ((stream_in_V_last_0_state == 2'd3) & (stream_in_V_last_0_vld_in == 1'b0) & (stream_in_V_last_0_ack_out == 1'b1)))) begin
            stream_in_V_last_0_state <= 2'd2;
        end else if ((((stream_in_V_last_0_state == 2'd1) & (stream_in_V_last_0_ack_out == 1'b0)) | ((stream_in_V_last_0_state == 2'd3) & (stream_in_V_last_0_ack_out == 1'b0) & (stream_in_V_last_0_vld_in == 1'b1)))) begin
            stream_in_V_last_0_state <= 2'd1;
        end else if (((~((stream_in_V_last_0_vld_in == 1'b0) & (stream_in_V_last_0_ack_out == 1'b1)) & ~((stream_in_V_last_0_ack_out == 1'b0) & (stream_in_V_last_0_vld_in == 1'b1)) & (stream_in_V_last_0_state == 2'd3)) | ((stream_in_V_last_0_state == 2'd1) & (stream_in_V_last_0_ack_out == 1'b1)) | ((stream_in_V_last_0_state == 2'd2) & (stream_in_V_last_0_vld_in == 1'b1)))) begin
            stream_in_V_last_0_state <= 2'd3;
        end else begin
            stream_in_V_last_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_75_fu_144_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i1_reg_85 <= i_4_fu_149_p2;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        i1_reg_85 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_74_fu_163_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_reg_96 <= i_s_fu_168_p2;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        i_reg_96 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        IFM_bound_reg_294 <= grp_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        KER_bound_reg_270 <= grp_fu_136_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_data_V_0_load_A == 1'b1)) begin
        stream_in_V_data_V_0_payload_A <= stream_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_data_V_0_load_B == 1'b1)) begin
        stream_in_V_data_V_0_payload_B <= stream_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp1_reg_284 <= grp_fu_186_p2;
        tmp2_reg_289 <= grp_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp3_reg_260 <= grp_fu_174_p2;
        tmp4_reg_265 <= grp_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_74_reg_299 <= tmp_74_fu_163_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_75_reg_275 <= tmp_75_fu_144_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_data_V_1_reg_202 <= stream_in_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_data_V_2_reg_207 <= stream_in_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_data_V_3_reg_212 <= stream_in_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_data_V_4_reg_218 <= stream_in_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_data_V_5_reg_223 <= stream_in_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_s_reg_198 <= tmp_s_fu_112_p2;
    end
end

always @ (*) begin
    if ((tmp_75_fu_144_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state18 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state18 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_74_fu_163_p2 == 1'd0)) begin
        ap_condition_pp1_exit_iter0_state30 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state30 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)))) begin
        grp_fu_174_ce = 1'b1;
    end else begin
        grp_fu_174_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)))) begin
        grp_fu_180_ce = 1'b1;
    end else begin
        grp_fu_180_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state22) | (~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)))) begin
        grp_fu_186_ce = 1'b1;
    end else begin
        grp_fu_186_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state22) | (~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)))) begin
        grp_fu_192_ce = 1'b1;
    end else begin
        grp_fu_192_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((tmp_75_reg_275 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_74_reg_299 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        stream_in_TDATA_blk_n = stream_in_V_data_V_0_state[1'd0];
    end else begin
        stream_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((tmp_75_reg_275 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_74_reg_299 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        stream_in_V_data_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_data_V_0_sel == 1'b1)) begin
        stream_in_V_data_V_0_data_out = stream_in_V_data_V_0_payload_B;
    end else begin
        stream_in_V_data_V_0_data_out = stream_in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((tmp_75_reg_275 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_74_reg_299 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        stream_in_V_last_0_ack_out = 1'b1;
    end else begin
        stream_in_V_last_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((tmp_75_reg_275 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_74_reg_299 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        stream_out_V_V_blk_n = stream_out_V_V_full_n;
    end else begin
        stream_out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((tmp_75_reg_275 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_74_reg_299 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        stream_out_V_V_write = 1'b1;
    end else begin
        stream_out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if ((~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (tmp_s_reg_198 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else if ((~((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0)) & (tmp_s_reg_198 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((tmp_75_fu_144_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((tmp_75_fu_144_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((tmp_74_fu_163_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((tmp_74_fu_163_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_75_reg_275 == 1'd1) & (stream_out_V_V_full_n == 1'b0)) | ((tmp_75_reg_275 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_75_reg_275 == 1'd1) & (stream_out_V_V_full_n == 1'b0)) | ((tmp_75_reg_275 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_75_reg_275 == 1'd1) & (stream_out_V_V_full_n == 1'b0)) | ((tmp_75_reg_275 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0))));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (((tmp_74_reg_299 == 1'd1) & (stream_out_V_V_full_n == 1'b0)) | ((tmp_74_reg_299 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0))));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (((tmp_74_reg_299 == 1'd1) & (stream_out_V_V_full_n == 1'b0)) | ((tmp_74_reg_299 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((ap_enable_reg_pp1_iter1 == 1'b1) & (((tmp_74_reg_299 == 1'd1) & (stream_out_V_V_full_n == 1'b0)) | ((tmp_74_reg_299 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state18_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_pp0_stage0_iter1 = (((tmp_75_reg_275 == 1'd1) & (stream_out_V_V_full_n == 1'b0)) | ((tmp_75_reg_275 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)));
end

always @ (*) begin
    ap_block_state2 = ((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0));
end

assign ap_block_state30_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state31_pp1_stage0_iter1 = (((tmp_74_reg_299 == 1'd1) & (stream_out_V_V_full_n == 1'b0)) | ((tmp_74_reg_299 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)));
end

always @ (*) begin
    ap_block_state4 = ((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state6 = ((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state7 = ((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state8 = ((stream_in_V_data_V_0_vld_out == 1'b0) | (stream_out_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign grp_fu_174_p0 = tmp_72_fu_124_p1;

assign grp_fu_174_p1 = tmp_72_fu_124_p1;

assign grp_fu_192_p0 = rhs_V_fu_130_p1;

assign grp_fu_192_p1 = rhs_V_fu_130_p1;

assign i1_cast_fu_140_p1 = i1_reg_85;

assign i_4_fu_149_p2 = (i1_reg_85 + 31'd1);

assign i_cast_fu_159_p1 = i_reg_96;

assign i_s_fu_168_p2 = (i_reg_96 + 31'd1);

assign rhs_V_fu_130_p1 = tmp_data_V_4_reg_218;

assign start_out = real_start;

assign stream_in_TREADY = stream_in_V_last_0_state[1'd1];

assign stream_in_V_data_V_0_ack_in = stream_in_V_data_V_0_state[1'd1];

assign stream_in_V_data_V_0_load_A = (stream_in_V_data_V_0_state_cmp_full & ~stream_in_V_data_V_0_sel_wr);

assign stream_in_V_data_V_0_load_B = (stream_in_V_data_V_0_state_cmp_full & stream_in_V_data_V_0_sel_wr);

assign stream_in_V_data_V_0_sel = stream_in_V_data_V_0_sel_rd;

assign stream_in_V_data_V_0_state_cmp_full = ((stream_in_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_data_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_data_V_0_vld_out = stream_in_V_data_V_0_state[1'd0];

assign stream_in_V_last_0_vld_in = stream_in_TVALID;

assign stream_out_V_V_din = stream_in_V_data_V_0_data_out;

assign tmp_72_fu_124_p1 = tmp_data_V_2_reg_207;

assign tmp_74_fu_163_p2 = (($signed(i_cast_fu_159_p1) < $signed(IFM_bound_reg_294)) ? 1'b1 : 1'b0);

assign tmp_75_fu_144_p2 = (($signed(i1_cast_fu_140_p1) < $signed(KER_bound_reg_270)) ? 1'b1 : 1'b0);

assign tmp_s_fu_112_p2 = ((stream_in_V_data_V_0_data_out == 16'd0) ? 1'b1 : 1'b0);

endmodule //AXI_DMA_SLAVE
