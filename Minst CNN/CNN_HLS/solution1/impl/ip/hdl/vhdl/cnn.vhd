-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn is
port (
    stream_in_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    stream_in_TLAST : IN STD_LOGIC;
    stream_out_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    stream_out_TLAST : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    stream_in_TVALID : IN STD_LOGIC;
    stream_in_TREADY : OUT STD_LOGIC;
    stream_out_TVALID : OUT STD_LOGIC;
    stream_out_TREADY : IN STD_LOGIC );
end;


architecture behav of cnn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cnn,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=5.417500,HLS_SYN_LAT=10800837,HLS_SYN_TPT=10800190,HLS_SYN_MEM=157,HLS_SYN_DSP=55,HLS_SYN_FF=13014,HLS_SYN_LUT=14012,HLS_VERSION=2018_2}";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal ap_rst_n_inv : STD_LOGIC;
    signal AXI_DMA_SLAVE_U0_ap_start : STD_LOGIC;
    signal AXI_DMA_SLAVE_U0_ap_done : STD_LOGIC;
    signal AXI_DMA_SLAVE_U0_ap_continue : STD_LOGIC;
    signal AXI_DMA_SLAVE_U0_ap_idle : STD_LOGIC;
    signal AXI_DMA_SLAVE_U0_ap_ready : STD_LOGIC;
    signal AXI_DMA_SLAVE_U0_start_out : STD_LOGIC;
    signal AXI_DMA_SLAVE_U0_start_write : STD_LOGIC;
    signal AXI_DMA_SLAVE_U0_stream_in_TREADY : STD_LOGIC;
    signal AXI_DMA_SLAVE_U0_stream_out_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal AXI_DMA_SLAVE_U0_stream_out_V_V_write : STD_LOGIC;
    signal Conv_1_28_16_3_U0_ap_start : STD_LOGIC;
    signal Conv_1_28_16_3_U0_ap_done : STD_LOGIC;
    signal Conv_1_28_16_3_U0_ap_continue : STD_LOGIC;
    signal Conv_1_28_16_3_U0_ap_idle : STD_LOGIC;
    signal Conv_1_28_16_3_U0_ap_ready : STD_LOGIC;
    signal Conv_1_28_16_3_U0_start_out : STD_LOGIC;
    signal Conv_1_28_16_3_U0_start_write : STD_LOGIC;
    signal Conv_1_28_16_3_U0_stream_in_V_V_read : STD_LOGIC;
    signal Conv_1_28_16_3_U0_stream_out_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Conv_1_28_16_3_U0_stream_out_V_V_write : STD_LOGIC;
    signal Conv_16_26_32_3_U0_ap_start : STD_LOGIC;
    signal Conv_16_26_32_3_U0_ap_done : STD_LOGIC;
    signal Conv_16_26_32_3_U0_ap_continue : STD_LOGIC;
    signal Conv_16_26_32_3_U0_ap_idle : STD_LOGIC;
    signal Conv_16_26_32_3_U0_ap_ready : STD_LOGIC;
    signal Conv_16_26_32_3_U0_start_out : STD_LOGIC;
    signal Conv_16_26_32_3_U0_start_write : STD_LOGIC;
    signal Conv_16_26_32_3_U0_stream_in_V_V_read : STD_LOGIC;
    signal Conv_16_26_32_3_U0_stream_out_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Conv_16_26_32_3_U0_stream_out_V_V_write : STD_LOGIC;
    signal Pool_32_24_4_U0_ap_start : STD_LOGIC;
    signal Pool_32_24_4_U0_ap_done : STD_LOGIC;
    signal Pool_32_24_4_U0_ap_continue : STD_LOGIC;
    signal Pool_32_24_4_U0_ap_idle : STD_LOGIC;
    signal Pool_32_24_4_U0_ap_ready : STD_LOGIC;
    signal Pool_32_24_4_U0_start_out : STD_LOGIC;
    signal Pool_32_24_4_U0_start_write : STD_LOGIC;
    signal Pool_32_24_4_U0_stream_in_V_V_read : STD_LOGIC;
    signal Pool_32_24_4_U0_stream_out_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Pool_32_24_4_U0_stream_out_V_V_write : STD_LOGIC;
    signal FC_1152_128_U0_ap_start : STD_LOGIC;
    signal FC_1152_128_U0_ap_done : STD_LOGIC;
    signal FC_1152_128_U0_ap_continue : STD_LOGIC;
    signal FC_1152_128_U0_ap_idle : STD_LOGIC;
    signal FC_1152_128_U0_ap_ready : STD_LOGIC;
    signal FC_1152_128_U0_start_out : STD_LOGIC;
    signal FC_1152_128_U0_start_write : STD_LOGIC;
    signal FC_1152_128_U0_stream_in_V_V_read : STD_LOGIC;
    signal FC_1152_128_U0_stream_out_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal FC_1152_128_U0_stream_out_V_V_write : STD_LOGIC;
    signal FC_128_10_U0_ap_start : STD_LOGIC;
    signal FC_128_10_U0_ap_done : STD_LOGIC;
    signal FC_128_10_U0_ap_continue : STD_LOGIC;
    signal FC_128_10_U0_ap_idle : STD_LOGIC;
    signal FC_128_10_U0_ap_ready : STD_LOGIC;
    signal FC_128_10_U0_start_out : STD_LOGIC;
    signal FC_128_10_U0_start_write : STD_LOGIC;
    signal FC_128_10_U0_stream_in_V_V_read : STD_LOGIC;
    signal FC_128_10_U0_stream_out_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal FC_128_10_U0_stream_out_V_V_write : STD_LOGIC;
    signal AXI_DMA_MASTER_U0_ap_start : STD_LOGIC;
    signal AXI_DMA_MASTER_U0_ap_done : STD_LOGIC;
    signal AXI_DMA_MASTER_U0_ap_continue : STD_LOGIC;
    signal AXI_DMA_MASTER_U0_ap_idle : STD_LOGIC;
    signal AXI_DMA_MASTER_U0_ap_ready : STD_LOGIC;
    signal AXI_DMA_MASTER_U0_stream_in_V_V_read : STD_LOGIC;
    signal AXI_DMA_MASTER_U0_stream_out_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal AXI_DMA_MASTER_U0_stream_out_TVALID : STD_LOGIC;
    signal AXI_DMA_MASTER_U0_stream_out_TLAST : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal connect_0_V_V_full_n : STD_LOGIC;
    signal connect_0_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal connect_0_V_V_empty_n : STD_LOGIC;
    signal connect_1_V_V_full_n : STD_LOGIC;
    signal connect_1_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal connect_1_V_V_empty_n : STD_LOGIC;
    signal connect_2_V_V_full_n : STD_LOGIC;
    signal connect_2_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal connect_2_V_V_empty_n : STD_LOGIC;
    signal connect_3_V_V_full_n : STD_LOGIC;
    signal connect_3_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal connect_3_V_V_empty_n : STD_LOGIC;
    signal connect_4_V_V_full_n : STD_LOGIC;
    signal connect_4_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal connect_4_V_V_empty_n : STD_LOGIC;
    signal connect_5_V_V_full_n : STD_LOGIC;
    signal connect_5_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal connect_5_V_V_empty_n : STD_LOGIC;
    signal start_for_Conv_1_28_16_3_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Conv_1_28_16_3_U0_full_n : STD_LOGIC;
    signal start_for_Conv_1_28_16_3_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Conv_1_28_16_3_U0_empty_n : STD_LOGIC;
    signal start_for_Conv_16_26_32_3_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Conv_16_26_32_3_U0_full_n : STD_LOGIC;
    signal start_for_Conv_16_26_32_3_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Conv_16_26_32_3_U0_empty_n : STD_LOGIC;
    signal start_for_Pool_32_24_4_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Pool_32_24_4_U0_full_n : STD_LOGIC;
    signal start_for_Pool_32_24_4_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Pool_32_24_4_U0_empty_n : STD_LOGIC;
    signal start_for_FC_1152_128_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_FC_1152_128_U0_full_n : STD_LOGIC;
    signal start_for_FC_1152_128_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_FC_1152_128_U0_empty_n : STD_LOGIC;
    signal start_for_FC_128_10_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_FC_128_10_U0_full_n : STD_LOGIC;
    signal start_for_FC_128_10_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_FC_128_10_U0_empty_n : STD_LOGIC;
    signal start_for_AXI_DMA_MASTER_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_AXI_DMA_MASTER_U0_full_n : STD_LOGIC;
    signal start_for_AXI_DMA_MASTER_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_AXI_DMA_MASTER_U0_empty_n : STD_LOGIC;
    signal AXI_DMA_MASTER_U0_start_full_n : STD_LOGIC;
    signal AXI_DMA_MASTER_U0_start_write : STD_LOGIC;

    component AXI_DMA_SLAVE IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        stream_in_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        stream_in_TVALID : IN STD_LOGIC;
        stream_in_TREADY : OUT STD_LOGIC;
        stream_in_TLAST : IN STD_LOGIC;
        stream_out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        stream_out_V_V_full_n : IN STD_LOGIC;
        stream_out_V_V_write : OUT STD_LOGIC );
    end component;


    component Conv_1_28_16_3_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        stream_in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        stream_in_V_V_empty_n : IN STD_LOGIC;
        stream_in_V_V_read : OUT STD_LOGIC;
        stream_out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        stream_out_V_V_full_n : IN STD_LOGIC;
        stream_out_V_V_write : OUT STD_LOGIC );
    end component;


    component Conv_16_26_32_3_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        stream_in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        stream_in_V_V_empty_n : IN STD_LOGIC;
        stream_in_V_V_read : OUT STD_LOGIC;
        stream_out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        stream_out_V_V_full_n : IN STD_LOGIC;
        stream_out_V_V_write : OUT STD_LOGIC );
    end component;


    component Pool_32_24_4_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        stream_in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        stream_in_V_V_empty_n : IN STD_LOGIC;
        stream_in_V_V_read : OUT STD_LOGIC;
        stream_out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        stream_out_V_V_full_n : IN STD_LOGIC;
        stream_out_V_V_write : OUT STD_LOGIC );
    end component;


    component FC_1152_128_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        stream_in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        stream_in_V_V_empty_n : IN STD_LOGIC;
        stream_in_V_V_read : OUT STD_LOGIC;
        stream_out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        stream_out_V_V_full_n : IN STD_LOGIC;
        stream_out_V_V_write : OUT STD_LOGIC );
    end component;


    component FC_128_10_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        stream_in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        stream_in_V_V_empty_n : IN STD_LOGIC;
        stream_in_V_V_read : OUT STD_LOGIC;
        stream_out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        stream_out_V_V_full_n : IN STD_LOGIC;
        stream_out_V_V_write : OUT STD_LOGIC );
    end component;


    component AXI_DMA_MASTER IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        stream_in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        stream_in_V_V_empty_n : IN STD_LOGIC;
        stream_in_V_V_read : OUT STD_LOGIC;
        stream_out_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        stream_out_TVALID : OUT STD_LOGIC;
        stream_out_TREADY : IN STD_LOGIC;
        stream_out_TLAST : OUT STD_LOGIC );
    end component;


    component fifo_w16_d1000_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d12000_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d20000_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d1500_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d500_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d100_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Conv_1_dUL IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Conv_16dVL IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Pool_32dWL IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_FC_1152dXL IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_FC_128_dYM IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_AXI_DMAdZM IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    AXI_DMA_SLAVE_U0 : component AXI_DMA_SLAVE
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXI_DMA_SLAVE_U0_ap_start,
        start_full_n => start_for_Conv_1_28_16_3_U0_full_n,
        ap_done => AXI_DMA_SLAVE_U0_ap_done,
        ap_continue => AXI_DMA_SLAVE_U0_ap_continue,
        ap_idle => AXI_DMA_SLAVE_U0_ap_idle,
        ap_ready => AXI_DMA_SLAVE_U0_ap_ready,
        start_out => AXI_DMA_SLAVE_U0_start_out,
        start_write => AXI_DMA_SLAVE_U0_start_write,
        stream_in_TDATA => stream_in_TDATA,
        stream_in_TVALID => stream_in_TVALID,
        stream_in_TREADY => AXI_DMA_SLAVE_U0_stream_in_TREADY,
        stream_in_TLAST => stream_in_TLAST,
        stream_out_V_V_din => AXI_DMA_SLAVE_U0_stream_out_V_V_din,
        stream_out_V_V_full_n => connect_0_V_V_full_n,
        stream_out_V_V_write => AXI_DMA_SLAVE_U0_stream_out_V_V_write);

    Conv_1_28_16_3_U0 : component Conv_1_28_16_3_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Conv_1_28_16_3_U0_ap_start,
        start_full_n => start_for_Conv_16_26_32_3_U0_full_n,
        ap_done => Conv_1_28_16_3_U0_ap_done,
        ap_continue => Conv_1_28_16_3_U0_ap_continue,
        ap_idle => Conv_1_28_16_3_U0_ap_idle,
        ap_ready => Conv_1_28_16_3_U0_ap_ready,
        start_out => Conv_1_28_16_3_U0_start_out,
        start_write => Conv_1_28_16_3_U0_start_write,
        stream_in_V_V_dout => connect_0_V_V_dout,
        stream_in_V_V_empty_n => connect_0_V_V_empty_n,
        stream_in_V_V_read => Conv_1_28_16_3_U0_stream_in_V_V_read,
        stream_out_V_V_din => Conv_1_28_16_3_U0_stream_out_V_V_din,
        stream_out_V_V_full_n => connect_1_V_V_full_n,
        stream_out_V_V_write => Conv_1_28_16_3_U0_stream_out_V_V_write);

    Conv_16_26_32_3_U0 : component Conv_16_26_32_3_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Conv_16_26_32_3_U0_ap_start,
        start_full_n => start_for_Pool_32_24_4_U0_full_n,
        ap_done => Conv_16_26_32_3_U0_ap_done,
        ap_continue => Conv_16_26_32_3_U0_ap_continue,
        ap_idle => Conv_16_26_32_3_U0_ap_idle,
        ap_ready => Conv_16_26_32_3_U0_ap_ready,
        start_out => Conv_16_26_32_3_U0_start_out,
        start_write => Conv_16_26_32_3_U0_start_write,
        stream_in_V_V_dout => connect_1_V_V_dout,
        stream_in_V_V_empty_n => connect_1_V_V_empty_n,
        stream_in_V_V_read => Conv_16_26_32_3_U0_stream_in_V_V_read,
        stream_out_V_V_din => Conv_16_26_32_3_U0_stream_out_V_V_din,
        stream_out_V_V_full_n => connect_2_V_V_full_n,
        stream_out_V_V_write => Conv_16_26_32_3_U0_stream_out_V_V_write);

    Pool_32_24_4_U0 : component Pool_32_24_4_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Pool_32_24_4_U0_ap_start,
        start_full_n => start_for_FC_1152_128_U0_full_n,
        ap_done => Pool_32_24_4_U0_ap_done,
        ap_continue => Pool_32_24_4_U0_ap_continue,
        ap_idle => Pool_32_24_4_U0_ap_idle,
        ap_ready => Pool_32_24_4_U0_ap_ready,
        start_out => Pool_32_24_4_U0_start_out,
        start_write => Pool_32_24_4_U0_start_write,
        stream_in_V_V_dout => connect_2_V_V_dout,
        stream_in_V_V_empty_n => connect_2_V_V_empty_n,
        stream_in_V_V_read => Pool_32_24_4_U0_stream_in_V_V_read,
        stream_out_V_V_din => Pool_32_24_4_U0_stream_out_V_V_din,
        stream_out_V_V_full_n => connect_3_V_V_full_n,
        stream_out_V_V_write => Pool_32_24_4_U0_stream_out_V_V_write);

    FC_1152_128_U0 : component FC_1152_128_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => FC_1152_128_U0_ap_start,
        start_full_n => start_for_FC_128_10_U0_full_n,
        ap_done => FC_1152_128_U0_ap_done,
        ap_continue => FC_1152_128_U0_ap_continue,
        ap_idle => FC_1152_128_U0_ap_idle,
        ap_ready => FC_1152_128_U0_ap_ready,
        start_out => FC_1152_128_U0_start_out,
        start_write => FC_1152_128_U0_start_write,
        stream_in_V_V_dout => connect_3_V_V_dout,
        stream_in_V_V_empty_n => connect_3_V_V_empty_n,
        stream_in_V_V_read => FC_1152_128_U0_stream_in_V_V_read,
        stream_out_V_V_din => FC_1152_128_U0_stream_out_V_V_din,
        stream_out_V_V_full_n => connect_4_V_V_full_n,
        stream_out_V_V_write => FC_1152_128_U0_stream_out_V_V_write);

    FC_128_10_U0 : component FC_128_10_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => FC_128_10_U0_ap_start,
        start_full_n => start_for_AXI_DMA_MASTER_U0_full_n,
        ap_done => FC_128_10_U0_ap_done,
        ap_continue => FC_128_10_U0_ap_continue,
        ap_idle => FC_128_10_U0_ap_idle,
        ap_ready => FC_128_10_U0_ap_ready,
        start_out => FC_128_10_U0_start_out,
        start_write => FC_128_10_U0_start_write,
        stream_in_V_V_dout => connect_4_V_V_dout,
        stream_in_V_V_empty_n => connect_4_V_V_empty_n,
        stream_in_V_V_read => FC_128_10_U0_stream_in_V_V_read,
        stream_out_V_V_din => FC_128_10_U0_stream_out_V_V_din,
        stream_out_V_V_full_n => connect_5_V_V_full_n,
        stream_out_V_V_write => FC_128_10_U0_stream_out_V_V_write);

    AXI_DMA_MASTER_U0 : component AXI_DMA_MASTER
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXI_DMA_MASTER_U0_ap_start,
        ap_done => AXI_DMA_MASTER_U0_ap_done,
        ap_continue => AXI_DMA_MASTER_U0_ap_continue,
        ap_idle => AXI_DMA_MASTER_U0_ap_idle,
        ap_ready => AXI_DMA_MASTER_U0_ap_ready,
        stream_in_V_V_dout => connect_5_V_V_dout,
        stream_in_V_V_empty_n => connect_5_V_V_empty_n,
        stream_in_V_V_read => AXI_DMA_MASTER_U0_stream_in_V_V_read,
        stream_out_TDATA => AXI_DMA_MASTER_U0_stream_out_TDATA,
        stream_out_TVALID => AXI_DMA_MASTER_U0_stream_out_TVALID,
        stream_out_TREADY => stream_out_TREADY,
        stream_out_TLAST => AXI_DMA_MASTER_U0_stream_out_TLAST);

    connect_0_V_V_U : component fifo_w16_d1000_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXI_DMA_SLAVE_U0_stream_out_V_V_din,
        if_full_n => connect_0_V_V_full_n,
        if_write => AXI_DMA_SLAVE_U0_stream_out_V_V_write,
        if_dout => connect_0_V_V_dout,
        if_empty_n => connect_0_V_V_empty_n,
        if_read => Conv_1_28_16_3_U0_stream_in_V_V_read);

    connect_1_V_V_U : component fifo_w16_d12000_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Conv_1_28_16_3_U0_stream_out_V_V_din,
        if_full_n => connect_1_V_V_full_n,
        if_write => Conv_1_28_16_3_U0_stream_out_V_V_write,
        if_dout => connect_1_V_V_dout,
        if_empty_n => connect_1_V_V_empty_n,
        if_read => Conv_16_26_32_3_U0_stream_in_V_V_read);

    connect_2_V_V_U : component fifo_w16_d20000_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Conv_16_26_32_3_U0_stream_out_V_V_din,
        if_full_n => connect_2_V_V_full_n,
        if_write => Conv_16_26_32_3_U0_stream_out_V_V_write,
        if_dout => connect_2_V_V_dout,
        if_empty_n => connect_2_V_V_empty_n,
        if_read => Pool_32_24_4_U0_stream_in_V_V_read);

    connect_3_V_V_U : component fifo_w16_d1500_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Pool_32_24_4_U0_stream_out_V_V_din,
        if_full_n => connect_3_V_V_full_n,
        if_write => Pool_32_24_4_U0_stream_out_V_V_write,
        if_dout => connect_3_V_V_dout,
        if_empty_n => connect_3_V_V_empty_n,
        if_read => FC_1152_128_U0_stream_in_V_V_read);

    connect_4_V_V_U : component fifo_w16_d500_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => FC_1152_128_U0_stream_out_V_V_din,
        if_full_n => connect_4_V_V_full_n,
        if_write => FC_1152_128_U0_stream_out_V_V_write,
        if_dout => connect_4_V_V_dout,
        if_empty_n => connect_4_V_V_empty_n,
        if_read => FC_128_10_U0_stream_in_V_V_read);

    connect_5_V_V_U : component fifo_w16_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => FC_128_10_U0_stream_out_V_V_din,
        if_full_n => connect_5_V_V_full_n,
        if_write => FC_128_10_U0_stream_out_V_V_write,
        if_dout => connect_5_V_V_dout,
        if_empty_n => connect_5_V_V_empty_n,
        if_read => AXI_DMA_MASTER_U0_stream_in_V_V_read);

    start_for_Conv_1_dUL_U : component start_for_Conv_1_dUL
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Conv_1_28_16_3_U0_din,
        if_full_n => start_for_Conv_1_28_16_3_U0_full_n,
        if_write => AXI_DMA_SLAVE_U0_start_write,
        if_dout => start_for_Conv_1_28_16_3_U0_dout,
        if_empty_n => start_for_Conv_1_28_16_3_U0_empty_n,
        if_read => Conv_1_28_16_3_U0_ap_ready);

    start_for_Conv_16dVL_U : component start_for_Conv_16dVL
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Conv_16_26_32_3_U0_din,
        if_full_n => start_for_Conv_16_26_32_3_U0_full_n,
        if_write => Conv_1_28_16_3_U0_start_write,
        if_dout => start_for_Conv_16_26_32_3_U0_dout,
        if_empty_n => start_for_Conv_16_26_32_3_U0_empty_n,
        if_read => Conv_16_26_32_3_U0_ap_ready);

    start_for_Pool_32dWL_U : component start_for_Pool_32dWL
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Pool_32_24_4_U0_din,
        if_full_n => start_for_Pool_32_24_4_U0_full_n,
        if_write => Conv_16_26_32_3_U0_start_write,
        if_dout => start_for_Pool_32_24_4_U0_dout,
        if_empty_n => start_for_Pool_32_24_4_U0_empty_n,
        if_read => Pool_32_24_4_U0_ap_ready);

    start_for_FC_1152dXL_U : component start_for_FC_1152dXL
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_FC_1152_128_U0_din,
        if_full_n => start_for_FC_1152_128_U0_full_n,
        if_write => Pool_32_24_4_U0_start_write,
        if_dout => start_for_FC_1152_128_U0_dout,
        if_empty_n => start_for_FC_1152_128_U0_empty_n,
        if_read => FC_1152_128_U0_ap_ready);

    start_for_FC_128_dYM_U : component start_for_FC_128_dYM
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_FC_128_10_U0_din,
        if_full_n => start_for_FC_128_10_U0_full_n,
        if_write => FC_1152_128_U0_start_write,
        if_dout => start_for_FC_128_10_U0_dout,
        if_empty_n => start_for_FC_128_10_U0_empty_n,
        if_read => FC_128_10_U0_ap_ready);

    start_for_AXI_DMAdZM_U : component start_for_AXI_DMAdZM
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_AXI_DMA_MASTER_U0_din,
        if_full_n => start_for_AXI_DMA_MASTER_U0_full_n,
        if_write => FC_128_10_U0_start_write,
        if_dout => start_for_AXI_DMA_MASTER_U0_dout,
        if_empty_n => start_for_AXI_DMA_MASTER_U0_empty_n,
        if_read => AXI_DMA_MASTER_U0_ap_ready);




    AXI_DMA_MASTER_U0_ap_continue <= ap_const_logic_1;
    AXI_DMA_MASTER_U0_ap_start <= start_for_AXI_DMA_MASTER_U0_empty_n;
    AXI_DMA_MASTER_U0_start_full_n <= ap_const_logic_1;
    AXI_DMA_MASTER_U0_start_write <= ap_const_logic_0;
    AXI_DMA_SLAVE_U0_ap_continue <= ap_const_logic_1;
    AXI_DMA_SLAVE_U0_ap_start <= ap_const_logic_1;
    Conv_16_26_32_3_U0_ap_continue <= ap_const_logic_1;
    Conv_16_26_32_3_U0_ap_start <= start_for_Conv_16_26_32_3_U0_empty_n;
    Conv_1_28_16_3_U0_ap_continue <= ap_const_logic_1;
    Conv_1_28_16_3_U0_ap_start <= start_for_Conv_1_28_16_3_U0_empty_n;
    FC_1152_128_U0_ap_continue <= ap_const_logic_1;
    FC_1152_128_U0_ap_start <= start_for_FC_1152_128_U0_empty_n;
    FC_128_10_U0_ap_continue <= ap_const_logic_1;
    FC_128_10_U0_ap_start <= start_for_FC_128_10_U0_empty_n;
    Pool_32_24_4_U0_ap_continue <= ap_const_logic_1;
    Pool_32_24_4_U0_ap_start <= start_for_Pool_32_24_4_U0_empty_n;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    start_for_AXI_DMA_MASTER_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Conv_16_26_32_3_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Conv_1_28_16_3_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_FC_1152_128_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_FC_128_10_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Pool_32_24_4_U0_din <= (0=>ap_const_logic_1, others=>'-');
    stream_in_TREADY <= AXI_DMA_SLAVE_U0_stream_in_TREADY;
    stream_out_TDATA <= AXI_DMA_MASTER_U0_stream_out_TDATA;
    stream_out_TLAST <= AXI_DMA_MASTER_U0_stream_out_TLAST;
    stream_out_TVALID <= AXI_DMA_MASTER_U0_stream_out_TVALID;
end behav;
