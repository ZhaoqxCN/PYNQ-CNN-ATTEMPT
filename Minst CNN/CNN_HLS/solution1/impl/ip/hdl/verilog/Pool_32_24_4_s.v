// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Pool_32_24_4_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        stream_in_V_V_dout,
        stream_in_V_V_empty_n,
        stream_in_V_V_read,
        stream_out_V_V_din,
        stream_out_V_V_full_n,
        stream_out_V_V_write
);

parameter    ap_ST_fsm_state1 = 26'd1;
parameter    ap_ST_fsm_state2 = 26'd2;
parameter    ap_ST_fsm_state3 = 26'd4;
parameter    ap_ST_fsm_state4 = 26'd8;
parameter    ap_ST_fsm_state5 = 26'd16;
parameter    ap_ST_fsm_state6 = 26'd32;
parameter    ap_ST_fsm_state7 = 26'd64;
parameter    ap_ST_fsm_state8 = 26'd128;
parameter    ap_ST_fsm_state9 = 26'd256;
parameter    ap_ST_fsm_state10 = 26'd512;
parameter    ap_ST_fsm_state11 = 26'd1024;
parameter    ap_ST_fsm_state12 = 26'd2048;
parameter    ap_ST_fsm_state13 = 26'd4096;
parameter    ap_ST_fsm_state14 = 26'd8192;
parameter    ap_ST_fsm_pp0_stage0 = 26'd16384;
parameter    ap_ST_fsm_state17 = 26'd32768;
parameter    ap_ST_fsm_state18 = 26'd65536;
parameter    ap_ST_fsm_pp1_stage0 = 26'd131072;
parameter    ap_ST_fsm_state23 = 26'd262144;
parameter    ap_ST_fsm_state24 = 26'd524288;
parameter    ap_ST_fsm_state25 = 26'd1048576;
parameter    ap_ST_fsm_state26 = 26'd2097152;
parameter    ap_ST_fsm_state27 = 26'd4194304;
parameter    ap_ST_fsm_state28 = 26'd8388608;
parameter    ap_ST_fsm_pp2_stage0 = 26'd16777216;
parameter    ap_ST_fsm_state34 = 26'd33554432;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] stream_in_V_V_dout;
input   stream_in_V_V_empty_n;
output   stream_in_V_V_read;
output  [15:0] stream_out_V_V_din;
input   stream_out_V_V_full_n;
output   stream_out_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg stream_in_V_V_read;
reg[15:0] stream_out_V_V_din;
reg stream_out_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [25:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [9:0] A_V_4_0_address0;
reg    A_V_4_0_ce0;
wire   [7:0] A_V_4_0_q0;
wire   [9:0] A_V_4_0_address1;
reg    A_V_4_0_ce1;
reg    A_V_4_0_we1;
wire   [9:0] A_V_4_1_address0;
reg    A_V_4_1_ce0;
wire   [7:0] A_V_4_1_q0;
wire   [9:0] A_V_4_1_address1;
reg    A_V_4_1_ce1;
reg    A_V_4_1_we1;
wire   [9:0] A_V_4_2_address0;
reg    A_V_4_2_ce0;
wire   [7:0] A_V_4_2_q0;
wire   [9:0] A_V_4_2_address1;
reg    A_V_4_2_ce1;
reg    A_V_4_2_we1;
wire   [9:0] A_V_4_3_address0;
reg    A_V_4_3_ce0;
wire   [7:0] A_V_4_3_q0;
wire   [9:0] A_V_4_3_address1;
reg    A_V_4_3_ce1;
reg    A_V_4_3_we1;
reg   [9:0] A_V_4_4_address0;
reg    A_V_4_4_ce0;
wire   [7:0] A_V_4_4_q0;
wire   [9:0] A_V_4_4_address1;
reg    A_V_4_4_ce1;
reg    A_V_4_4_we1;
wire   [9:0] A_V_4_5_address0;
reg    A_V_4_5_ce0;
wire   [7:0] A_V_4_5_q0;
wire   [9:0] A_V_4_5_address1;
reg    A_V_4_5_ce1;
reg    A_V_4_5_we1;
wire   [9:0] A_V_4_6_address0;
reg    A_V_4_6_ce0;
wire   [7:0] A_V_4_6_q0;
wire   [9:0] A_V_4_6_address1;
reg    A_V_4_6_ce1;
reg    A_V_4_6_we1;
wire   [9:0] A_V_4_7_address0;
reg    A_V_4_7_ce0;
wire   [7:0] A_V_4_7_q0;
wire   [9:0] A_V_4_7_address1;
reg    A_V_4_7_ce1;
reg    A_V_4_7_we1;
reg   [9:0] A_V_4_8_address0;
reg    A_V_4_8_ce0;
wire   [7:0] A_V_4_8_q0;
wire   [9:0] A_V_4_8_address1;
reg    A_V_4_8_ce1;
reg    A_V_4_8_we1;
wire   [9:0] A_V_4_9_address0;
reg    A_V_4_9_ce0;
wire   [7:0] A_V_4_9_q0;
wire   [9:0] A_V_4_9_address1;
reg    A_V_4_9_ce1;
reg    A_V_4_9_we1;
wire   [9:0] A_V_4_10_address0;
reg    A_V_4_10_ce0;
wire   [7:0] A_V_4_10_q0;
wire   [9:0] A_V_4_10_address1;
reg    A_V_4_10_ce1;
reg    A_V_4_10_we1;
wire   [9:0] A_V_4_11_address0;
reg    A_V_4_11_ce0;
wire   [7:0] A_V_4_11_q0;
wire   [9:0] A_V_4_11_address1;
reg    A_V_4_11_ce1;
reg    A_V_4_11_we1;
reg   [9:0] A_V_4_12_address0;
reg    A_V_4_12_ce0;
wire   [7:0] A_V_4_12_q0;
wire   [9:0] A_V_4_12_address1;
reg    A_V_4_12_ce1;
reg    A_V_4_12_we1;
wire   [9:0] A_V_4_13_address0;
reg    A_V_4_13_ce0;
wire   [7:0] A_V_4_13_q0;
wire   [9:0] A_V_4_13_address1;
reg    A_V_4_13_ce1;
reg    A_V_4_13_we1;
wire   [9:0] A_V_4_14_address0;
reg    A_V_4_14_ce0;
wire   [7:0] A_V_4_14_q0;
wire   [9:0] A_V_4_14_address1;
reg    A_V_4_14_ce1;
reg    A_V_4_14_we1;
wire   [9:0] A_V_4_15_address0;
reg    A_V_4_15_ce0;
wire   [7:0] A_V_4_15_q0;
wire   [9:0] A_V_4_15_address1;
reg    A_V_4_15_ce1;
reg    A_V_4_15_we1;
reg   [9:0] A_V_4_16_address0;
reg    A_V_4_16_ce0;
wire   [7:0] A_V_4_16_q0;
wire   [9:0] A_V_4_16_address1;
reg    A_V_4_16_ce1;
reg    A_V_4_16_we1;
wire   [9:0] A_V_4_17_address0;
reg    A_V_4_17_ce0;
wire   [7:0] A_V_4_17_q0;
wire   [9:0] A_V_4_17_address1;
reg    A_V_4_17_ce1;
reg    A_V_4_17_we1;
wire   [9:0] A_V_4_18_address0;
reg    A_V_4_18_ce0;
wire   [7:0] A_V_4_18_q0;
wire   [9:0] A_V_4_18_address1;
reg    A_V_4_18_ce1;
reg    A_V_4_18_we1;
wire   [9:0] A_V_4_19_address0;
reg    A_V_4_19_ce0;
wire   [7:0] A_V_4_19_q0;
wire   [9:0] A_V_4_19_address1;
reg    A_V_4_19_ce1;
reg    A_V_4_19_we1;
reg   [9:0] A_V_4_20_address0;
reg    A_V_4_20_ce0;
wire   [7:0] A_V_4_20_q0;
wire   [9:0] A_V_4_20_address1;
reg    A_V_4_20_ce1;
reg    A_V_4_20_we1;
wire   [9:0] A_V_4_21_address0;
reg    A_V_4_21_ce0;
wire   [7:0] A_V_4_21_q0;
wire   [9:0] A_V_4_21_address1;
reg    A_V_4_21_ce1;
reg    A_V_4_21_we1;
wire   [9:0] A_V_4_22_address0;
reg    A_V_4_22_ce0;
wire   [7:0] A_V_4_22_q0;
wire   [9:0] A_V_4_22_address1;
reg    A_V_4_22_ce1;
reg    A_V_4_22_we1;
wire   [9:0] A_V_4_23_address0;
reg    A_V_4_23_ce0;
wire   [7:0] A_V_4_23_q0;
wire   [9:0] A_V_4_23_address1;
reg    A_V_4_23_ce1;
reg    A_V_4_23_we1;
reg    stream_in_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond_flatten1_reg_1671;
reg   [0:0] exitcond_flatten1_reg_1671_pp1_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_7_reg_1653;
reg    stream_out_V_V_blk_n;
wire    ap_CS_fsm_state34;
reg   [30:0] i4_reg_878;
reg   [14:0] indvar_flatten1_reg_900;
reg   [4:0] j_reg_911;
reg   [10:0] indvar_flatten_reg_923;
reg   [4:0] k_reg_934;
reg   [5:0] i1_reg_946;
reg  signed [7:0] p_1_reg_1032;
reg   [4:0] k3_reg_1043;
reg   [15:0] reg_1054;
reg    ap_block_state1;
reg    ap_block_state2;
reg   [7:0] reg_1058;
wire    ap_CS_fsm_state27;
reg   [4:0] ib_mid2_reg_1791;
reg    ap_enable_reg_pp2_iter2;
wire    ap_block_state29_pp2_stage0_iter0;
wire    ap_block_state30_pp2_stage0_iter1;
wire    ap_block_state31_pp2_stage0_iter2;
wire    ap_block_state32_pp2_stage0_iter3;
wire    ap_block_state33_pp2_stage0_iter4;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] exitcond_reg_1832;
reg   [0:0] exitcond_reg_1832_pp2_iter1_reg;
reg   [7:0] reg_1063;
reg   [7:0] reg_1068;
reg   [7:0] reg_1073;
reg   [7:0] reg_1078;
reg   [7:0] reg_1083;
wire   [0:0] tmp_s_fu_1088_p2;
reg   [0:0] tmp_s_reg_1603;
reg  signed [15:0] tmp_V_4_reg_1607;
reg    ap_block_state3;
reg  signed [15:0] tmp_V_6_reg_1612;
reg    ap_block_state4;
reg  signed [15:0] tmp_V_10_reg_1617;
reg    ap_block_state6;
reg    ap_block_state7;
wire  signed [31:0] tmp_4_fu_1100_p1;
wire  signed [31:0] grp_fu_1591_p2;
reg  signed [31:0] tmp1_reg_1638;
wire    ap_CS_fsm_state9;
wire  signed [31:0] grp_fu_1597_p2;
reg  signed [31:0] tmp2_reg_1643;
wire   [31:0] grp_fu_1103_p2;
reg   [31:0] KER_bound_reg_1648;
wire    ap_CS_fsm_state14;
wire   [0:0] tmp_7_fu_1111_p2;
wire    ap_block_state15_pp0_stage0_iter0;
reg    ap_block_state16_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] i_fu_1116_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_6_fu_1126_p2;
wire    ap_CS_fsm_state18;
wire   [14:0] num_img_1_fu_1132_p2;
reg   [14:0] num_img_1_reg_1666;
wire   [0:0] exitcond_flatten1_fu_1138_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state19_pp1_stage0_iter0;
wire    ap_block_state20_pp1_stage0_iter1;
reg    ap_block_state21_pp1_stage0_iter2;
wire    ap_block_state22_pp1_stage0_iter3;
reg    ap_block_pp1_stage0_11001;
wire   [14:0] indvar_flatten_next1_fu_1144_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] exitcond_flatten_fu_1150_p2;
reg   [0:0] exitcond_flatten_reg_1680;
wire   [10:0] indvar_flatten_next_fu_1162_p3;
wire   [4:0] tmp_8_mid2_v_fu_1183_p3;
reg   [4:0] tmp_8_mid2_v_reg_1693;
reg    ap_enable_reg_pp1_iter1;
wire   [5:0] i1_mid2_fu_1218_p3;
reg   [5:0] i1_mid2_reg_1699;
wire   [4:0] k_mid2_fu_1226_p3;
reg   [4:0] k_mid2_reg_1705;
reg   [4:0] k_mid2_reg_1705_pp1_iter2_reg;
wire   [5:0] i_1_fu_1234_p2;
reg   [5:0] i_1_reg_1710;
wire   [10:0] tmp_10_fu_1267_p2;
reg   [10:0] tmp_10_reg_1715;
wire   [7:0] tmp_13_fu_1273_p1;
reg   [7:0] tmp_13_reg_1720;
wire   [10:0] indvar_flatten_next3_fu_1310_p2;
reg   [10:0] indvar_flatten_next3_reg_1751;
wire    ap_CS_fsm_state24;
wire   [0:0] exitcond_flatten2_fu_1322_p2;
reg   [0:0] exitcond_flatten2_reg_1756;
wire   [0:0] exitcond_flatten3_fu_1304_p2;
wire   [4:0] ib_mid_fu_1328_p3;
reg   [4:0] ib_mid_reg_1761;
wire   [4:0] ia_cast_cast_mid2_v_fu_1336_p3;
reg   [4:0] ia_cast_cast_mid2_v_reg_1767;
wire   [0:0] exitcond4_mid_fu_1356_p2;
reg   [0:0] exitcond4_mid_reg_1774;
wire   [5:0] i2_mid2_fu_1368_p3;
reg   [5:0] i2_mid2_reg_1779;
wire   [5:0] ia_cast_cast_mid2_fu_1376_p1;
reg   [5:0] ia_cast_cast_mid2_reg_1786;
wire    ap_CS_fsm_state25;
wire   [4:0] ib_mid2_fu_1387_p3;
wire   [10:0] tmp_19_fu_1411_p2;
reg   [10:0] tmp_19_reg_1797;
reg   [9:0] A_V_4_0_addr_1_reg_1802;
reg   [9:0] A_V_4_12_addr_1_reg_1807;
reg   [9:0] A_V_4_16_addr_1_reg_1812;
reg   [9:0] A_V_4_20_addr_1_reg_1817;
reg   [9:0] A_V_4_4_addr_1_reg_1822;
reg   [9:0] A_V_4_8_addr_1_reg_1827;
wire   [0:0] exitcond_fu_1433_p2;
wire    ap_CS_fsm_pp2_stage0;
reg   [0:0] exitcond_reg_1832_pp2_iter2_reg;
reg   [0:0] exitcond_reg_1832_pp2_iter3_reg;
wire   [1:0] tmp_21_fu_1439_p1;
reg   [1:0] tmp_21_reg_1836;
reg   [1:0] tmp_21_reg_1836_pp2_iter1_reg;
reg   [1:0] tmp_21_reg_1836_pp2_iter2_reg;
wire   [10:0] tmp_23_fu_1466_p2;
reg   [10:0] tmp_23_reg_1841;
wire   [4:0] k_2_fu_1471_p2;
reg    ap_enable_reg_pp2_iter0;
reg   [7:0] A_V_4_1_load_reg_1971;
reg   [7:0] A_V_4_2_load_reg_1976;
reg   [7:0] A_V_4_3_load_reg_1981;
reg   [7:0] A_V_4_5_load_reg_1986;
reg   [7:0] A_V_4_6_load_reg_1991;
reg   [7:0] A_V_4_7_load_reg_1996;
reg   [7:0] A_V_4_9_load_reg_2001;
reg   [7:0] A_V_4_10_load_reg_2006;
reg   [7:0] A_V_4_11_load_reg_2011;
reg   [7:0] A_V_4_13_load_reg_2016;
reg   [7:0] A_V_4_14_load_reg_2021;
reg   [7:0] A_V_4_15_load_reg_2026;
reg   [7:0] A_V_4_17_load_reg_2031;
reg   [7:0] A_V_4_18_load_reg_2036;
reg   [7:0] A_V_4_19_load_reg_2041;
reg   [7:0] A_V_4_21_load_reg_2046;
reg   [7:0] A_V_4_22_load_reg_2051;
reg   [7:0] A_V_4_23_load_reg_2056;
wire   [7:0] tmp_17_fu_1520_p26;
reg   [7:0] tmp_17_reg_2061;
wire   [7:0] buf_V_fu_1561_p3;
reg    ap_enable_reg_pp2_iter4;
wire   [5:0] i_2_fu_1573_p2;
wire   [8:0] indvar_flatten_next2_fu_1584_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state15;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state19;
reg    ap_enable_reg_pp1_iter3;
wire    ap_CS_fsm_state28;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state29;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter3;
reg   [14:0] num_img_reg_889;
reg   [4:0] ap_phi_mux_j_phi_fu_915_p4;
reg   [4:0] ap_phi_mux_k_phi_fu_938_p4;
reg   [5:0] ap_phi_mux_i1_phi_fu_950_p4;
reg   [10:0] indvar_flatten2_reg_958;
wire    ap_CS_fsm_state23;
reg   [4:0] ia_reg_969;
reg   [8:0] indvar_flatten3_reg_980;
reg   [4:0] ib_reg_992;
reg   [5:0] i2_reg_1003;
reg   [7:0] ap_phi_mux_p_1_ph_phi_fu_1017_p12;
wire  signed [63:0] tmp_10_cast_fu_1277_p1;
wire  signed [63:0] tmp_21_cast_fu_1423_p1;
wire  signed [63:0] tmp_24_cast_fu_1477_p1;
wire    ap_block_pp2_stage0;
reg    ap_block_state5;
reg    ap_block_pp0_stage0_01001;
wire  signed [15:0] Outbuf_V_fu_1568_p1;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state10;
wire   [31:0] i4_cast_fu_1107_p1;
wire   [15:0] num_img_cast_fu_1122_p1;
wire   [10:0] indvar_flatten_op_fu_1156_p2;
wire   [4:0] j_1_fu_1170_p2;
wire   [0:0] exitcond1_fu_1195_p2;
wire   [0:0] not_exitcond_flatten_fu_1190_p2;
wire   [4:0] k_mid_fu_1176_p3;
wire   [0:0] exitcond3_mid_fu_1201_p2;
wire   [0:0] tmp_2_fu_1213_p2;
wire   [4:0] k_1_fu_1207_p2;
wire   [8:0] tmp_8_fu_1250_p3;
wire   [10:0] tmp_3_fu_1243_p3;
wire   [10:0] p_shl1_cast_fu_1257_p1;
wire   [10:0] tmp_8_mid2_cast_fu_1240_p1;
wire   [10:0] tmp_9_fu_1261_p2;
wire   [4:0] ia_1_fu_1316_p2;
wire   [0:0] exitcond2_fu_1350_p2;
wire   [0:0] not_exitcond_flatten_2_fu_1344_p2;
wire   [0:0] tmp_11_fu_1362_p2;
wire   [4:0] ib_1_fu_1382_p2;
wire   [8:0] tmp_18_fu_1400_p3;
wire   [10:0] tmp_15_fu_1393_p3;
wire   [10:0] p_shl3_cast_fu_1407_p1;
wire   [10:0] tmp_2_mid2_cast_fu_1379_p1;
wire   [10:0] tmp_20_fu_1417_p2;
wire   [2:0] tmp_22_fu_1443_p4;
wire   [5:0] tmp_19_cast_cast_fu_1453_p1;
wire   [5:0] tmp_14_fu_1457_p2;
wire   [10:0] tmp_15_cast_fu_1462_p1;
wire   [2:0] tmp_16_fu_1504_p4;
wire   [4:0] tmp_17_fu_1520_p25;
wire   [0:0] tmp_i_fu_1556_p2;
wire   [8:0] indvar_flatten18_op_fu_1578_p2;
wire  signed [15:0] grp_fu_1591_p0;
wire  signed [15:0] grp_fu_1591_p1;
reg    grp_fu_1591_ce;
wire    ap_CS_fsm_state8;
reg    grp_fu_1597_ce;
wire    ap_CS_fsm_state17;
reg   [25:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_condition_498;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 26'd1;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
end

Pool_32_24_4_s_A_bck #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
A_V_4_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_4_0_address0),
    .ce0(A_V_4_0_ce0),
    .q0(A_V_4_0_q0),
    .address1(A_V_4_0_address1),
    .ce1(A_V_4_0_ce1),
    .we1(A_V_4_0_we1),
    .d1(tmp_13_reg_1720)
);

Pool_32_24_4_s_A_bck #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
A_V_4_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_4_1_address0),
    .ce0(A_V_4_1_ce0),
    .q0(A_V_4_1_q0),
    .address1(A_V_4_1_address1),
    .ce1(A_V_4_1_ce1),
    .we1(A_V_4_1_we1),
    .d1(tmp_13_reg_1720)
);

Pool_32_24_4_s_A_bck #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
A_V_4_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_4_2_address0),
    .ce0(A_V_4_2_ce0),
    .q0(A_V_4_2_q0),
    .address1(A_V_4_2_address1),
    .ce1(A_V_4_2_ce1),
    .we1(A_V_4_2_we1),
    .d1(tmp_13_reg_1720)
);

Pool_32_24_4_s_A_bck #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
A_V_4_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_4_3_address0),
    .ce0(A_V_4_3_ce0),
    .q0(A_V_4_3_q0),
    .address1(A_V_4_3_address1),
    .ce1(A_V_4_3_ce1),
    .we1(A_V_4_3_we1),
    .d1(tmp_13_reg_1720)
);

Pool_32_24_4_s_A_bck #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
A_V_4_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_4_4_address0),
    .ce0(A_V_4_4_ce0),
    .q0(A_V_4_4_q0),
    .address1(A_V_4_4_address1),
    .ce1(A_V_4_4_ce1),
    .we1(A_V_4_4_we1),
    .d1(tmp_13_reg_1720)
);

Pool_32_24_4_s_A_bck #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
A_V_4_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_4_5_address0),
    .ce0(A_V_4_5_ce0),
    .q0(A_V_4_5_q0),
    .address1(A_V_4_5_address1),
    .ce1(A_V_4_5_ce1),
    .we1(A_V_4_5_we1),
    .d1(tmp_13_reg_1720)
);

Pool_32_24_4_s_A_bck #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
A_V_4_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_4_6_address0),
    .ce0(A_V_4_6_ce0),
    .q0(A_V_4_6_q0),
    .address1(A_V_4_6_address1),
    .ce1(A_V_4_6_ce1),
    .we1(A_V_4_6_we1),
    .d1(tmp_13_reg_1720)
);

Pool_32_24_4_s_A_bck #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
A_V_4_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_4_7_address0),
    .ce0(A_V_4_7_ce0),
    .q0(A_V_4_7_q0),
    .address1(A_V_4_7_address1),
    .ce1(A_V_4_7_ce1),
    .we1(A_V_4_7_we1),
    .d1(tmp_13_reg_1720)
);

Pool_32_24_4_s_A_bck #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
A_V_4_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_4_8_address0),
    .ce0(A_V_4_8_ce0),
    .q0(A_V_4_8_q0),
    .address1(A_V_4_8_address1),
    .ce1(A_V_4_8_ce1),
    .we1(A_V_4_8_we1),
    .d1(tmp_13_reg_1720)
);

Pool_32_24_4_s_A_bck #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
A_V_4_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_4_9_address0),
    .ce0(A_V_4_9_ce0),
    .q0(A_V_4_9_q0),
    .address1(A_V_4_9_address1),
    .ce1(A_V_4_9_ce1),
    .we1(A_V_4_9_we1),
    .d1(tmp_13_reg_1720)
);

Pool_32_24_4_s_A_bck #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
A_V_4_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_4_10_address0),
    .ce0(A_V_4_10_ce0),
    .q0(A_V_4_10_q0),
    .address1(A_V_4_10_address1),
    .ce1(A_V_4_10_ce1),
    .we1(A_V_4_10_we1),
    .d1(tmp_13_reg_1720)
);

Pool_32_24_4_s_A_bck #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
A_V_4_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_4_11_address0),
    .ce0(A_V_4_11_ce0),
    .q0(A_V_4_11_q0),
    .address1(A_V_4_11_address1),
    .ce1(A_V_4_11_ce1),
    .we1(A_V_4_11_we1),
    .d1(tmp_13_reg_1720)
);

Pool_32_24_4_s_A_bck #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
A_V_4_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_4_12_address0),
    .ce0(A_V_4_12_ce0),
    .q0(A_V_4_12_q0),
    .address1(A_V_4_12_address1),
    .ce1(A_V_4_12_ce1),
    .we1(A_V_4_12_we1),
    .d1(tmp_13_reg_1720)
);

Pool_32_24_4_s_A_bck #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
A_V_4_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_4_13_address0),
    .ce0(A_V_4_13_ce0),
    .q0(A_V_4_13_q0),
    .address1(A_V_4_13_address1),
    .ce1(A_V_4_13_ce1),
    .we1(A_V_4_13_we1),
    .d1(tmp_13_reg_1720)
);

Pool_32_24_4_s_A_bck #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
A_V_4_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_4_14_address0),
    .ce0(A_V_4_14_ce0),
    .q0(A_V_4_14_q0),
    .address1(A_V_4_14_address1),
    .ce1(A_V_4_14_ce1),
    .we1(A_V_4_14_we1),
    .d1(tmp_13_reg_1720)
);

Pool_32_24_4_s_A_bck #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
A_V_4_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_4_15_address0),
    .ce0(A_V_4_15_ce0),
    .q0(A_V_4_15_q0),
    .address1(A_V_4_15_address1),
    .ce1(A_V_4_15_ce1),
    .we1(A_V_4_15_we1),
    .d1(tmp_13_reg_1720)
);

Pool_32_24_4_s_A_bck #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
A_V_4_16_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_4_16_address0),
    .ce0(A_V_4_16_ce0),
    .q0(A_V_4_16_q0),
    .address1(A_V_4_16_address1),
    .ce1(A_V_4_16_ce1),
    .we1(A_V_4_16_we1),
    .d1(tmp_13_reg_1720)
);

Pool_32_24_4_s_A_bck #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
A_V_4_17_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_4_17_address0),
    .ce0(A_V_4_17_ce0),
    .q0(A_V_4_17_q0),
    .address1(A_V_4_17_address1),
    .ce1(A_V_4_17_ce1),
    .we1(A_V_4_17_we1),
    .d1(tmp_13_reg_1720)
);

Pool_32_24_4_s_A_bck #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
A_V_4_18_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_4_18_address0),
    .ce0(A_V_4_18_ce0),
    .q0(A_V_4_18_q0),
    .address1(A_V_4_18_address1),
    .ce1(A_V_4_18_ce1),
    .we1(A_V_4_18_we1),
    .d1(tmp_13_reg_1720)
);

Pool_32_24_4_s_A_bck #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
A_V_4_19_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_4_19_address0),
    .ce0(A_V_4_19_ce0),
    .q0(A_V_4_19_q0),
    .address1(A_V_4_19_address1),
    .ce1(A_V_4_19_ce1),
    .we1(A_V_4_19_we1),
    .d1(tmp_13_reg_1720)
);

Pool_32_24_4_s_A_bck #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
A_V_4_20_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_4_20_address0),
    .ce0(A_V_4_20_ce0),
    .q0(A_V_4_20_q0),
    .address1(A_V_4_20_address1),
    .ce1(A_V_4_20_ce1),
    .we1(A_V_4_20_we1),
    .d1(tmp_13_reg_1720)
);

Pool_32_24_4_s_A_bck #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
A_V_4_21_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_4_21_address0),
    .ce0(A_V_4_21_ce0),
    .q0(A_V_4_21_q0),
    .address1(A_V_4_21_address1),
    .ce1(A_V_4_21_ce1),
    .we1(A_V_4_21_we1),
    .d1(tmp_13_reg_1720)
);

Pool_32_24_4_s_A_bck #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
A_V_4_22_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_4_22_address0),
    .ce0(A_V_4_22_ce0),
    .q0(A_V_4_22_q0),
    .address1(A_V_4_22_address1),
    .ce1(A_V_4_22_ce1),
    .we1(A_V_4_22_we1),
    .d1(tmp_13_reg_1720)
);

Pool_32_24_4_s_A_bck #(
    .DataWidth( 8 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
A_V_4_23_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_V_4_23_address0),
    .ce0(A_V_4_23_ce0),
    .q0(A_V_4_23_q0),
    .address1(A_V_4_23_address1),
    .ce1(A_V_4_23_ce1),
    .we1(A_V_4_23_we1),
    .d1(tmp_13_reg_1720)
);

cnn_mul_32s_32s_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_mul_32s_32s_3bkb_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp2_reg_1643),
    .din1(tmp1_reg_1638),
    .ce(1'b1),
    .dout(grp_fu_1103_p2)
);

cnn_mux_245_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
cnn_mux_245_8_1_1_U33(
    .din0(reg_1078),
    .din1(A_V_4_1_load_reg_1971),
    .din2(A_V_4_2_load_reg_1976),
    .din3(A_V_4_3_load_reg_1981),
    .din4(reg_1073),
    .din5(A_V_4_5_load_reg_1986),
    .din6(A_V_4_6_load_reg_1991),
    .din7(A_V_4_7_load_reg_1996),
    .din8(reg_1068),
    .din9(A_V_4_9_load_reg_2001),
    .din10(A_V_4_10_load_reg_2006),
    .din11(A_V_4_11_load_reg_2011),
    .din12(reg_1063),
    .din13(A_V_4_13_load_reg_2016),
    .din14(A_V_4_14_load_reg_2021),
    .din15(A_V_4_15_load_reg_2026),
    .din16(reg_1058),
    .din17(A_V_4_17_load_reg_2031),
    .din18(A_V_4_18_load_reg_2036),
    .din19(A_V_4_19_load_reg_2041),
    .din20(reg_1083),
    .din21(A_V_4_21_load_reg_2046),
    .din22(A_V_4_22_load_reg_2051),
    .din23(A_V_4_23_load_reg_2056),
    .din24(tmp_17_fu_1520_p25),
    .dout(tmp_17_fu_1520_p26)
);

cnn_mul_mul_16s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
cnn_mul_mul_16s_1cud_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1591_p0),
    .din1(grp_fu_1591_p1),
    .ce(grp_fu_1591_ce),
    .dout(grp_fu_1591_p2)
);

cnn_mul_mul_16s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
cnn_mul_mul_16s_1cud_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_V_6_reg_1612),
    .din1(tmp_V_10_reg_1617),
    .ce(grp_fu_1597_ce),
    .dout(grp_fu_1597_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state15) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state15))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state15);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state19) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((tmp_6_fu_1126_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state19)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state19);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if (((tmp_6_fu_1126_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state29) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state28)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state29)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state29);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end else if ((1'b1 == ap_CS_fsm_state28)) begin
            ap_enable_reg_pp2_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten1_reg_1671_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        i1_reg_946 <= i_1_reg_1710;
    end else if (((tmp_6_fu_1126_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        i1_reg_946 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        i2_reg_1003 <= 6'd0;
    end else if (((stream_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
        i2_reg_1003 <= i_2_fu_1573_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_7_fu_1111_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i4_reg_878 <= i_fu_1116_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        i4_reg_878 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ia_reg_969 <= 5'd0;
    end else if (((stream_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
        ia_reg_969 <= ia_cast_cast_mid2_v_reg_1767;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ib_reg_992 <= 5'd0;
    end else if (((stream_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
        ib_reg_992 <= ib_mid2_reg_1791;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten1_fu_1138_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten1_reg_900 <= indvar_flatten_next1_fu_1144_p2;
    end else if (((tmp_6_fu_1126_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        indvar_flatten1_reg_900 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        indvar_flatten2_reg_958 <= 11'd0;
    end else if (((stream_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
        indvar_flatten2_reg_958 <= indvar_flatten_next3_reg_1751;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        indvar_flatten3_reg_980 <= 9'd0;
    end else if (((stream_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
        indvar_flatten3_reg_980 <= indvar_flatten_next2_fu_1584_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten1_fu_1138_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten_reg_923 <= indvar_flatten_next_fu_1162_p3;
    end else if (((tmp_6_fu_1126_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        indvar_flatten_reg_923 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten1_reg_1671_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        j_reg_911 <= tmp_8_mid2_v_reg_1693;
    end else if (((tmp_6_fu_1126_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        j_reg_911 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        k3_reg_1043 <= 5'd1;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_fu_1433_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        k3_reg_1043 <= k_2_fu_1471_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten1_reg_1671_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        k_reg_934 <= k_mid2_reg_1705;
    end else if (((tmp_6_fu_1126_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        k_reg_934 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (tmp_s_reg_1603 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        num_img_reg_889 <= 15'd0;
    end else if (((exitcond_flatten3_fu_1304_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
        num_img_reg_889 <= num_img_1_reg_1666;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        p_1_reg_1032 <= ap_phi_mux_p_1_ph_phi_fu_1017_p12;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_reg_1832_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        p_1_reg_1032 <= buf_V_fu_1561_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        A_V_4_0_addr_1_reg_1802 <= tmp_21_cast_fu_1423_p1;
        A_V_4_12_addr_1_reg_1807 <= tmp_21_cast_fu_1423_p1;
        A_V_4_16_addr_1_reg_1812 <= tmp_21_cast_fu_1423_p1;
        A_V_4_20_addr_1_reg_1817 <= tmp_21_cast_fu_1423_p1;
        A_V_4_4_addr_1_reg_1822 <= tmp_21_cast_fu_1423_p1;
        A_V_4_8_addr_1_reg_1827 <= tmp_21_cast_fu_1423_p1;
        ia_cast_cast_mid2_reg_1786[4 : 0] <= ia_cast_cast_mid2_fu_1376_p1[4 : 0];
        ib_mid2_reg_1791 <= ib_mid2_fu_1387_p3;
        tmp_19_reg_1797[10 : 3] <= tmp_19_fu_1411_p2[10 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_reg_1832_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        A_V_4_10_load_reg_2006 <= A_V_4_10_q0;
        A_V_4_11_load_reg_2011 <= A_V_4_11_q0;
        A_V_4_13_load_reg_2016 <= A_V_4_13_q0;
        A_V_4_14_load_reg_2021 <= A_V_4_14_q0;
        A_V_4_15_load_reg_2026 <= A_V_4_15_q0;
        A_V_4_17_load_reg_2031 <= A_V_4_17_q0;
        A_V_4_18_load_reg_2036 <= A_V_4_18_q0;
        A_V_4_19_load_reg_2041 <= A_V_4_19_q0;
        A_V_4_1_load_reg_1971 <= A_V_4_1_q0;
        A_V_4_21_load_reg_2046 <= A_V_4_21_q0;
        A_V_4_22_load_reg_2051 <= A_V_4_22_q0;
        A_V_4_23_load_reg_2056 <= A_V_4_23_q0;
        A_V_4_2_load_reg_1976 <= A_V_4_2_q0;
        A_V_4_3_load_reg_1981 <= A_V_4_3_q0;
        A_V_4_5_load_reg_1986 <= A_V_4_5_q0;
        A_V_4_6_load_reg_1991 <= A_V_4_6_q0;
        A_V_4_7_load_reg_1996 <= A_V_4_7_q0;
        A_V_4_9_load_reg_2001 <= A_V_4_9_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        KER_bound_reg_1648 <= grp_fu_1103_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten3_fu_1304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        exitcond4_mid_reg_1774 <= exitcond4_mid_fu_1356_p2;
        exitcond_flatten2_reg_1756 <= exitcond_flatten2_fu_1322_p2;
        i2_mid2_reg_1779 <= i2_mid2_fu_1368_p3;
        ia_cast_cast_mid2_v_reg_1767 <= ia_cast_cast_mid2_v_fu_1336_p3;
        ib_mid_reg_1761 <= ib_mid_fu_1328_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_flatten1_reg_1671 <= exitcond_flatten1_fu_1138_p2;
        exitcond_flatten1_reg_1671_pp1_iter1_reg <= exitcond_flatten1_reg_1671;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten1_fu_1138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_flatten_reg_1680 <= exitcond_flatten_fu_1150_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        exitcond_reg_1832 <= exitcond_fu_1433_p2;
        exitcond_reg_1832_pp2_iter1_reg <= exitcond_reg_1832;
        tmp_21_reg_1836_pp2_iter1_reg <= tmp_21_reg_1836;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        exitcond_reg_1832_pp2_iter2_reg <= exitcond_reg_1832_pp2_iter1_reg;
        exitcond_reg_1832_pp2_iter3_reg <= exitcond_reg_1832_pp2_iter2_reg;
        tmp_21_reg_1836_pp2_iter2_reg <= tmp_21_reg_1836_pp2_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten1_reg_1671 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i1_mid2_reg_1699 <= i1_mid2_fu_1218_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten1_reg_1671 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_1_reg_1710 <= i_1_fu_1234_p2;
        k_mid2_reg_1705 <= k_mid2_fu_1226_p3;
        tmp_8_mid2_v_reg_1693 <= tmp_8_mid2_v_fu_1183_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        indvar_flatten_next3_reg_1751 <= indvar_flatten_next3_fu_1310_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        k_mid2_reg_1705_pp1_iter2_reg <= k_mid2_reg_1705;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        num_img_1_reg_1666 <= num_img_1_fu_1132_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_done_reg == 1'b1) | (stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        reg_1054 <= stream_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_reg_1832_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((ib_mid2_reg_1791 == 5'd16) & (1'b1 == ap_CS_fsm_state27)))) begin
        reg_1058 <= A_V_4_16_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_reg_1832_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((ib_mid2_reg_1791 == 5'd12) & (1'b1 == ap_CS_fsm_state27)))) begin
        reg_1063 <= A_V_4_12_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_reg_1832_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((ib_mid2_reg_1791 == 5'd8) & (1'b1 == ap_CS_fsm_state27)))) begin
        reg_1068 <= A_V_4_8_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_reg_1832_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((ib_mid2_reg_1791 == 5'd4) & (1'b1 == ap_CS_fsm_state27)))) begin
        reg_1073 <= A_V_4_4_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_reg_1832_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((ib_mid2_reg_1791 == 5'd0) & (1'b1 == ap_CS_fsm_state27)))) begin
        reg_1078 <= A_V_4_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_reg_1832_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | (~(ib_mid2_reg_1791 == 5'd0) & ~(ib_mid2_reg_1791 == 5'd4) & ~(ib_mid2_reg_1791 == 5'd8) & ~(ib_mid2_reg_1791 == 5'd12) & ~(ib_mid2_reg_1791 == 5'd16) & (1'b1 == ap_CS_fsm_state27)))) begin
        reg_1083 <= A_V_4_20_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp1_reg_1638 <= grp_fu_1591_p2;
        tmp2_reg_1643 <= grp_fu_1597_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten1_reg_1671_pp1_iter1_reg == 1'd0))) begin
        tmp_10_reg_1715 <= tmp_10_fu_1267_p2;
        tmp_13_reg_1720 <= tmp_13_fu_1273_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_reg_1832_pp2_iter2_reg == 1'd0))) begin
        tmp_17_reg_2061 <= tmp_17_fu_1520_p26;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond_fu_1433_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        tmp_21_reg_1836 <= tmp_21_fu_1439_p1;
        tmp_23_reg_1841 <= tmp_23_fu_1466_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_7_reg_1653 <= tmp_7_fu_1111_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_V_10_reg_1617 <= stream_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_V_4_reg_1607 <= stream_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_V_6_reg_1612 <= stream_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_s_reg_1603 <= tmp_s_fu_1088_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_4_0_address0 = tmp_24_cast_fu_1477_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        A_V_4_0_address0 = A_V_4_0_addr_1_reg_1802;
    end else begin
        A_V_4_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        A_V_4_0_ce0 = 1'b1;
    end else begin
        A_V_4_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_0_ce1 = 1'b1;
    end else begin
        A_V_4_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (k_mid2_reg_1705_pp1_iter2_reg == 5'd0) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_0_we1 = 1'b1;
    end else begin
        A_V_4_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_4_10_ce0 = 1'b1;
    end else begin
        A_V_4_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_10_ce1 = 1'b1;
    end else begin
        A_V_4_10_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((k_mid2_reg_1705_pp1_iter2_reg == 5'd10) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_10_we1 = 1'b1;
    end else begin
        A_V_4_10_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_4_11_ce0 = 1'b1;
    end else begin
        A_V_4_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_11_ce1 = 1'b1;
    end else begin
        A_V_4_11_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((k_mid2_reg_1705_pp1_iter2_reg == 5'd11) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_11_we1 = 1'b1;
    end else begin
        A_V_4_11_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_4_12_address0 = tmp_24_cast_fu_1477_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        A_V_4_12_address0 = A_V_4_12_addr_1_reg_1807;
    end else begin
        A_V_4_12_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        A_V_4_12_ce0 = 1'b1;
    end else begin
        A_V_4_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_12_ce1 = 1'b1;
    end else begin
        A_V_4_12_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (k_mid2_reg_1705_pp1_iter2_reg == 5'd12) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_12_we1 = 1'b1;
    end else begin
        A_V_4_12_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_4_13_ce0 = 1'b1;
    end else begin
        A_V_4_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_13_ce1 = 1'b1;
    end else begin
        A_V_4_13_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((k_mid2_reg_1705_pp1_iter2_reg == 5'd13) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_13_we1 = 1'b1;
    end else begin
        A_V_4_13_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_4_14_ce0 = 1'b1;
    end else begin
        A_V_4_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_14_ce1 = 1'b1;
    end else begin
        A_V_4_14_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((k_mid2_reg_1705_pp1_iter2_reg == 5'd14) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_14_we1 = 1'b1;
    end else begin
        A_V_4_14_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_4_15_ce0 = 1'b1;
    end else begin
        A_V_4_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_15_ce1 = 1'b1;
    end else begin
        A_V_4_15_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((k_mid2_reg_1705_pp1_iter2_reg == 5'd15) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_15_we1 = 1'b1;
    end else begin
        A_V_4_15_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_4_16_address0 = tmp_24_cast_fu_1477_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        A_V_4_16_address0 = A_V_4_16_addr_1_reg_1812;
    end else begin
        A_V_4_16_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        A_V_4_16_ce0 = 1'b1;
    end else begin
        A_V_4_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_16_ce1 = 1'b1;
    end else begin
        A_V_4_16_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (k_mid2_reg_1705_pp1_iter2_reg == 5'd16) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_16_we1 = 1'b1;
    end else begin
        A_V_4_16_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_4_17_ce0 = 1'b1;
    end else begin
        A_V_4_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_17_ce1 = 1'b1;
    end else begin
        A_V_4_17_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((k_mid2_reg_1705_pp1_iter2_reg == 5'd17) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_17_we1 = 1'b1;
    end else begin
        A_V_4_17_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_4_18_ce0 = 1'b1;
    end else begin
        A_V_4_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_18_ce1 = 1'b1;
    end else begin
        A_V_4_18_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((k_mid2_reg_1705_pp1_iter2_reg == 5'd18) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_18_we1 = 1'b1;
    end else begin
        A_V_4_18_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_4_19_ce0 = 1'b1;
    end else begin
        A_V_4_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_19_ce1 = 1'b1;
    end else begin
        A_V_4_19_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((k_mid2_reg_1705_pp1_iter2_reg == 5'd19) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_19_we1 = 1'b1;
    end else begin
        A_V_4_19_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_4_1_ce0 = 1'b1;
    end else begin
        A_V_4_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_1_ce1 = 1'b1;
    end else begin
        A_V_4_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((k_mid2_reg_1705_pp1_iter2_reg == 5'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_1_we1 = 1'b1;
    end else begin
        A_V_4_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_4_20_address0 = tmp_24_cast_fu_1477_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        A_V_4_20_address0 = A_V_4_20_addr_1_reg_1817;
    end else begin
        A_V_4_20_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        A_V_4_20_ce0 = 1'b1;
    end else begin
        A_V_4_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_20_ce1 = 1'b1;
    end else begin
        A_V_4_20_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((k_mid2_reg_1705_pp1_iter2_reg == 5'd20) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_20_we1 = 1'b1;
    end else begin
        A_V_4_20_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_4_21_ce0 = 1'b1;
    end else begin
        A_V_4_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_21_ce1 = 1'b1;
    end else begin
        A_V_4_21_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((k_mid2_reg_1705_pp1_iter2_reg == 5'd21) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_21_we1 = 1'b1;
    end else begin
        A_V_4_21_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_4_22_ce0 = 1'b1;
    end else begin
        A_V_4_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_22_ce1 = 1'b1;
    end else begin
        A_V_4_22_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((k_mid2_reg_1705_pp1_iter2_reg == 5'd22) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_22_we1 = 1'b1;
    end else begin
        A_V_4_22_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_4_23_ce0 = 1'b1;
    end else begin
        A_V_4_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_23_ce1 = 1'b1;
    end else begin
        A_V_4_23_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~(k_mid2_reg_1705_pp1_iter2_reg == 5'd0) & ~(k_mid2_reg_1705_pp1_iter2_reg == 5'd1) & ~(k_mid2_reg_1705_pp1_iter2_reg == 5'd2) & ~(k_mid2_reg_1705_pp1_iter2_reg == 5'd3) & ~(k_mid2_reg_1705_pp1_iter2_reg == 5'd4) & ~(k_mid2_reg_1705_pp1_iter2_reg == 5'd5) & ~(k_mid2_reg_1705_pp1_iter2_reg == 5'd6) & ~(k_mid2_reg_1705_pp1_iter2_reg == 5'd7) & ~(k_mid2_reg_1705_pp1_iter2_reg == 5'd8) & ~(k_mid2_reg_1705_pp1_iter2_reg == 5'd9) & ~(k_mid2_reg_1705_pp1_iter2_reg == 5'd10) & ~(k_mid2_reg_1705_pp1_iter2_reg == 5'd11) & ~(k_mid2_reg_1705_pp1_iter2_reg == 5'd12) & ~(k_mid2_reg_1705_pp1_iter2_reg == 5'd13) & ~(k_mid2_reg_1705_pp1_iter2_reg == 5'd14) & ~(k_mid2_reg_1705_pp1_iter2_reg == 5'd15) & ~(k_mid2_reg_1705_pp1_iter2_reg == 5'd16) & ~(k_mid2_reg_1705_pp1_iter2_reg == 5'd17) & ~(k_mid2_reg_1705_pp1_iter2_reg == 5'd18) & ~(k_mid2_reg_1705_pp1_iter2_reg == 5'd19) & ~(k_mid2_reg_1705_pp1_iter2_reg == 5'd20) & ~(k_mid2_reg_1705_pp1_iter2_reg == 5'd21) & ~(k_mid2_reg_1705_pp1_iter2_reg == 5'd22) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_23_we1 = 1'b1;
    end else begin
        A_V_4_23_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_4_2_ce0 = 1'b1;
    end else begin
        A_V_4_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_2_ce1 = 1'b1;
    end else begin
        A_V_4_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((k_mid2_reg_1705_pp1_iter2_reg == 5'd2) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_2_we1 = 1'b1;
    end else begin
        A_V_4_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_4_3_ce0 = 1'b1;
    end else begin
        A_V_4_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_3_ce1 = 1'b1;
    end else begin
        A_V_4_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((k_mid2_reg_1705_pp1_iter2_reg == 5'd3) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_3_we1 = 1'b1;
    end else begin
        A_V_4_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_4_4_address0 = tmp_24_cast_fu_1477_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        A_V_4_4_address0 = A_V_4_4_addr_1_reg_1822;
    end else begin
        A_V_4_4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        A_V_4_4_ce0 = 1'b1;
    end else begin
        A_V_4_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_4_ce1 = 1'b1;
    end else begin
        A_V_4_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (k_mid2_reg_1705_pp1_iter2_reg == 5'd4) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_4_we1 = 1'b1;
    end else begin
        A_V_4_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_4_5_ce0 = 1'b1;
    end else begin
        A_V_4_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_5_ce1 = 1'b1;
    end else begin
        A_V_4_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((k_mid2_reg_1705_pp1_iter2_reg == 5'd5) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_5_we1 = 1'b1;
    end else begin
        A_V_4_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_4_6_ce0 = 1'b1;
    end else begin
        A_V_4_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_6_ce1 = 1'b1;
    end else begin
        A_V_4_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((k_mid2_reg_1705_pp1_iter2_reg == 5'd6) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_6_we1 = 1'b1;
    end else begin
        A_V_4_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_4_7_ce0 = 1'b1;
    end else begin
        A_V_4_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_7_ce1 = 1'b1;
    end else begin
        A_V_4_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((k_mid2_reg_1705_pp1_iter2_reg == 5'd7) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_7_we1 = 1'b1;
    end else begin
        A_V_4_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_4_8_address0 = tmp_24_cast_fu_1477_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        A_V_4_8_address0 = A_V_4_8_addr_1_reg_1827;
    end else begin
        A_V_4_8_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        A_V_4_8_ce0 = 1'b1;
    end else begin
        A_V_4_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_8_ce1 = 1'b1;
    end else begin
        A_V_4_8_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (k_mid2_reg_1705_pp1_iter2_reg == 5'd8) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_8_we1 = 1'b1;
    end else begin
        A_V_4_8_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        A_V_4_9_ce0 = 1'b1;
    end else begin
        A_V_4_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_9_ce1 = 1'b1;
    end else begin
        A_V_4_9_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((k_mid2_reg_1705_pp1_iter2_reg == 5'd9) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        A_V_4_9_we1 = 1'b1;
    end else begin
        A_V_4_9_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_7_fu_1111_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state15 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state15 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten1_fu_1138_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state19 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state19 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_1433_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state29 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state29 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_1671_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        ap_phi_mux_i1_phi_fu_950_p4 = i_1_reg_1710;
    end else begin
        ap_phi_mux_i1_phi_fu_950_p4 = i1_reg_946;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_1671_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        ap_phi_mux_j_phi_fu_915_p4 = tmp_8_mid2_v_reg_1693;
    end else begin
        ap_phi_mux_j_phi_fu_915_p4 = j_reg_911;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_1671_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        ap_phi_mux_k_phi_fu_938_p4 = k_mid2_reg_1705;
    end else begin
        ap_phi_mux_k_phi_fu_938_p4 = k_reg_934;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        if ((1'b1 == ap_condition_498)) begin
            ap_phi_mux_p_1_ph_phi_fu_1017_p12 = reg_1083;
        end else if ((ib_mid2_reg_1791 == 5'd16)) begin
            ap_phi_mux_p_1_ph_phi_fu_1017_p12 = reg_1058;
        end else if ((ib_mid2_reg_1791 == 5'd12)) begin
            ap_phi_mux_p_1_ph_phi_fu_1017_p12 = reg_1063;
        end else if ((ib_mid2_reg_1791 == 5'd8)) begin
            ap_phi_mux_p_1_ph_phi_fu_1017_p12 = reg_1068;
        end else if ((ib_mid2_reg_1791 == 5'd4)) begin
            ap_phi_mux_p_1_ph_phi_fu_1017_p12 = reg_1073;
        end else if ((ib_mid2_reg_1791 == 5'd0)) begin
            ap_phi_mux_p_1_ph_phi_fu_1017_p12 = reg_1078;
        end else begin
            ap_phi_mux_p_1_ph_phi_fu_1017_p12 = 'bx;
        end
    end else begin
        ap_phi_mux_p_1_ph_phi_fu_1017_p12 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)))) begin
        grp_fu_1591_ce = 1'b1;
    end else begin
        grp_fu_1591_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)))) begin
        grp_fu_1597_ce = 1'b1;
    end else begin
        grp_fu_1597_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_7_reg_1653 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((exitcond_flatten1_reg_1671_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        stream_in_V_V_blk_n = stream_in_V_V_empty_n;
    end else begin
        stream_in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (tmp_7_reg_1653 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten1_reg_1671_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        stream_in_V_V_read = 1'b1;
    end else begin
        stream_in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_7_reg_1653 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        stream_out_V_V_blk_n = stream_out_V_V_full_n;
    end else begin
        stream_out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((stream_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
        stream_out_V_V_din = Outbuf_V_fu_1568_p1;
    end else if (((~((ap_done_reg == 1'b1) | (stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_01001) & (tmp_7_reg_1653 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        stream_out_V_V_din = stream_in_V_V_dout;
    end else begin
        stream_out_V_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((stream_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((1'b0 == ap_block_pp0_stage0_11001) & (tmp_7_reg_1653 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        stream_out_V_V_write = 1'b1;
    end else begin
        stream_out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (tmp_s_reg_1603 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else if ((~((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0)) & (tmp_s_reg_1603 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (tmp_7_fu_1111_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (tmp_7_fu_1111_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state18 : begin
            if (((tmp_6_fu_1126_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (exitcond_flatten1_fu_1138_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (exitcond_flatten1_fu_1138_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((exitcond_flatten3_fu_1304_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (exitcond_fu_1433_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((ap_enable_reg_pp2_iter3 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter3 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter4 == 1'b1)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (exitcond_fu_1433_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((stream_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_V_4_0_address1 = tmp_10_cast_fu_1277_p1;

assign A_V_4_10_address0 = tmp_24_cast_fu_1477_p1;

assign A_V_4_10_address1 = tmp_10_cast_fu_1277_p1;

assign A_V_4_11_address0 = tmp_24_cast_fu_1477_p1;

assign A_V_4_11_address1 = tmp_10_cast_fu_1277_p1;

assign A_V_4_12_address1 = tmp_10_cast_fu_1277_p1;

assign A_V_4_13_address0 = tmp_24_cast_fu_1477_p1;

assign A_V_4_13_address1 = tmp_10_cast_fu_1277_p1;

assign A_V_4_14_address0 = tmp_24_cast_fu_1477_p1;

assign A_V_4_14_address1 = tmp_10_cast_fu_1277_p1;

assign A_V_4_15_address0 = tmp_24_cast_fu_1477_p1;

assign A_V_4_15_address1 = tmp_10_cast_fu_1277_p1;

assign A_V_4_16_address1 = tmp_10_cast_fu_1277_p1;

assign A_V_4_17_address0 = tmp_24_cast_fu_1477_p1;

assign A_V_4_17_address1 = tmp_10_cast_fu_1277_p1;

assign A_V_4_18_address0 = tmp_24_cast_fu_1477_p1;

assign A_V_4_18_address1 = tmp_10_cast_fu_1277_p1;

assign A_V_4_19_address0 = tmp_24_cast_fu_1477_p1;

assign A_V_4_19_address1 = tmp_10_cast_fu_1277_p1;

assign A_V_4_1_address0 = tmp_24_cast_fu_1477_p1;

assign A_V_4_1_address1 = tmp_10_cast_fu_1277_p1;

assign A_V_4_20_address1 = tmp_10_cast_fu_1277_p1;

assign A_V_4_21_address0 = tmp_24_cast_fu_1477_p1;

assign A_V_4_21_address1 = tmp_10_cast_fu_1277_p1;

assign A_V_4_22_address0 = tmp_24_cast_fu_1477_p1;

assign A_V_4_22_address1 = tmp_10_cast_fu_1277_p1;

assign A_V_4_23_address0 = tmp_24_cast_fu_1477_p1;

assign A_V_4_23_address1 = tmp_10_cast_fu_1277_p1;

assign A_V_4_2_address0 = tmp_24_cast_fu_1477_p1;

assign A_V_4_2_address1 = tmp_10_cast_fu_1277_p1;

assign A_V_4_3_address0 = tmp_24_cast_fu_1477_p1;

assign A_V_4_3_address1 = tmp_10_cast_fu_1277_p1;

assign A_V_4_4_address1 = tmp_10_cast_fu_1277_p1;

assign A_V_4_5_address0 = tmp_24_cast_fu_1477_p1;

assign A_V_4_5_address1 = tmp_10_cast_fu_1277_p1;

assign A_V_4_6_address0 = tmp_24_cast_fu_1477_p1;

assign A_V_4_6_address1 = tmp_10_cast_fu_1277_p1;

assign A_V_4_7_address0 = tmp_24_cast_fu_1477_p1;

assign A_V_4_7_address1 = tmp_10_cast_fu_1277_p1;

assign A_V_4_8_address1 = tmp_10_cast_fu_1277_p1;

assign A_V_4_9_address0 = tmp_24_cast_fu_1477_p1;

assign A_V_4_9_address1 = tmp_10_cast_fu_1277_p1;

assign Outbuf_V_fu_1568_p1 = p_1_reg_1032;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_7_reg_1653 == 1'd1) & (stream_out_V_V_full_n == 1'b0)) | ((tmp_7_reg_1653 == 1'd1) & (stream_in_V_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_7_reg_1653 == 1'd1) & (stream_out_V_V_full_n == 1'b0)) | ((tmp_7_reg_1653 == 1'd1) & (stream_in_V_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_7_reg_1653 == 1'd1) & (stream_out_V_V_full_n == 1'b0)) | ((tmp_7_reg_1653 == 1'd1) & (stream_in_V_V_empty_n == 1'b0))));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((exitcond_flatten1_reg_1671_pp1_iter1_reg == 1'd0) & (stream_in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((exitcond_flatten1_reg_1671_pp1_iter1_reg == 1'd0) & (stream_in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0) | (real_start == 1'b0));
end

assign ap_block_state15_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_pp0_stage0_iter1 = (((tmp_7_reg_1653 == 1'd1) & (stream_out_V_V_full_n == 1'b0)) | ((tmp_7_reg_1653 == 1'd1) & (stream_in_V_V_empty_n == 1'b0)));
end

assign ap_block_state19_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2 = ((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0));
end

assign ap_block_state20_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state21_pp1_stage0_iter2 = ((exitcond_flatten1_reg_1671_pp1_iter1_reg == 1'd0) & (stream_in_V_V_empty_n == 1'b0));
end

assign ap_block_state22_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3 = ((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0));
end

assign ap_block_state30_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4 = ((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state6 = ((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state7 = ((stream_out_V_V_full_n == 1'b0) | (stream_in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_498 = (~(ib_mid2_reg_1791 == 5'd0) & ~(ib_mid2_reg_1791 == 5'd4) & ~(ib_mid2_reg_1791 == 5'd8) & ~(ib_mid2_reg_1791 == 5'd12) & ~(ib_mid2_reg_1791 == 5'd16));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign buf_V_fu_1561_p3 = ((tmp_i_fu_1556_p2[0:0] === 1'b1) ? p_1_reg_1032 : tmp_17_reg_2061);

assign exitcond1_fu_1195_p2 = ((ap_phi_mux_i1_phi_fu_950_p4 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond2_fu_1350_p2 = ((i2_reg_1003 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond3_mid_fu_1201_p2 = (not_exitcond_flatten_fu_1190_p2 & exitcond1_fu_1195_p2);

assign exitcond4_mid_fu_1356_p2 = (not_exitcond_flatten_2_fu_1344_p2 & exitcond2_fu_1350_p2);

assign exitcond_flatten1_fu_1138_p2 = ((indvar_flatten1_reg_900 == 15'd18432) ? 1'b1 : 1'b0);

assign exitcond_flatten2_fu_1322_p2 = ((indvar_flatten3_reg_980 == 9'd192) ? 1'b1 : 1'b0);

assign exitcond_flatten3_fu_1304_p2 = ((indvar_flatten2_reg_958 == 11'd1152) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_1150_p2 = ((indvar_flatten_reg_923 == 11'd768) ? 1'b1 : 1'b0);

assign exitcond_fu_1433_p2 = ((k3_reg_1043 == 5'd16) ? 1'b1 : 1'b0);

assign grp_fu_1591_p0 = tmp_4_fu_1100_p1;

assign grp_fu_1591_p1 = tmp_4_fu_1100_p1;

assign i1_mid2_fu_1218_p3 = ((tmp_2_fu_1213_p2[0:0] === 1'b1) ? 6'd0 : ap_phi_mux_i1_phi_fu_950_p4);

assign i2_mid2_fu_1368_p3 = ((tmp_11_fu_1362_p2[0:0] === 1'b1) ? 6'd0 : i2_reg_1003);

assign i4_cast_fu_1107_p1 = i4_reg_878;

assign i_1_fu_1234_p2 = (i1_mid2_fu_1218_p3 + 6'd1);

assign i_2_fu_1573_p2 = (i2_mid2_reg_1779 + 6'd1);

assign i_fu_1116_p2 = (i4_reg_878 + 31'd1);

assign ia_1_fu_1316_p2 = (ia_reg_969 + 5'd4);

assign ia_cast_cast_mid2_fu_1376_p1 = ia_cast_cast_mid2_v_reg_1767;

assign ia_cast_cast_mid2_v_fu_1336_p3 = ((exitcond_flatten2_fu_1322_p2[0:0] === 1'b1) ? ia_1_fu_1316_p2 : ia_reg_969);

assign ib_1_fu_1382_p2 = (ib_mid_reg_1761 + 5'd4);

assign ib_mid2_fu_1387_p3 = ((exitcond4_mid_reg_1774[0:0] === 1'b1) ? ib_1_fu_1382_p2 : ib_mid_reg_1761);

assign ib_mid_fu_1328_p3 = ((exitcond_flatten2_fu_1322_p2[0:0] === 1'b1) ? 5'd0 : ib_reg_992);

assign indvar_flatten18_op_fu_1578_p2 = (indvar_flatten3_reg_980 + 9'd1);

assign indvar_flatten_next1_fu_1144_p2 = (indvar_flatten1_reg_900 + 15'd1);

assign indvar_flatten_next2_fu_1584_p3 = ((exitcond_flatten2_reg_1756[0:0] === 1'b1) ? 9'd1 : indvar_flatten18_op_fu_1578_p2);

assign indvar_flatten_next3_fu_1310_p2 = (indvar_flatten2_reg_958 + 11'd1);

assign indvar_flatten_next_fu_1162_p3 = ((exitcond_flatten_fu_1150_p2[0:0] === 1'b1) ? 11'd1 : indvar_flatten_op_fu_1156_p2);

assign indvar_flatten_op_fu_1156_p2 = (indvar_flatten_reg_923 + 11'd1);

assign j_1_fu_1170_p2 = (5'd1 + ap_phi_mux_j_phi_fu_915_p4);

assign k_1_fu_1207_p2 = (5'd1 + k_mid_fu_1176_p3);

assign k_2_fu_1471_p2 = (5'd1 + k3_reg_1043);

assign k_mid2_fu_1226_p3 = ((exitcond3_mid_fu_1201_p2[0:0] === 1'b1) ? k_1_fu_1207_p2 : k_mid_fu_1176_p3);

assign k_mid_fu_1176_p3 = ((exitcond_flatten_reg_1680[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_k_phi_fu_938_p4);

assign not_exitcond_flatten_2_fu_1344_p2 = (exitcond_flatten2_fu_1322_p2 ^ 1'd1);

assign not_exitcond_flatten_fu_1190_p2 = (exitcond_flatten_reg_1680 ^ 1'd1);

assign num_img_1_fu_1132_p2 = (num_img_reg_889 + 15'd1);

assign num_img_cast_fu_1122_p1 = num_img_reg_889;

assign p_shl1_cast_fu_1257_p1 = tmp_8_fu_1250_p3;

assign p_shl3_cast_fu_1407_p1 = tmp_18_fu_1400_p3;

assign start_out = real_start;

assign tmp_10_cast_fu_1277_p1 = $signed(tmp_10_reg_1715);

assign tmp_10_fu_1267_p2 = (tmp_8_mid2_cast_fu_1240_p1 + tmp_9_fu_1261_p2);

assign tmp_11_fu_1362_p2 = (exitcond_flatten2_fu_1322_p2 | exitcond4_mid_fu_1356_p2);

assign tmp_13_fu_1273_p1 = stream_in_V_V_dout[7:0];

assign tmp_14_fu_1457_p2 = (tmp_19_cast_cast_fu_1453_p1 + ia_cast_cast_mid2_reg_1786);

assign tmp_15_cast_fu_1462_p1 = tmp_14_fu_1457_p2;

assign tmp_15_fu_1393_p3 = {{i2_mid2_reg_1779}, {5'd0}};

assign tmp_16_fu_1504_p4 = {{ib_mid2_reg_1791[4:2]}};

assign tmp_17_fu_1520_p25 = {{tmp_16_fu_1504_p4}, {tmp_21_reg_1836_pp2_iter2_reg}};

assign tmp_18_fu_1400_p3 = {{i2_mid2_reg_1779}, {3'd0}};

assign tmp_19_cast_cast_fu_1453_p1 = tmp_22_fu_1443_p4;

assign tmp_19_fu_1411_p2 = (tmp_15_fu_1393_p3 - p_shl3_cast_fu_1407_p1);

assign tmp_20_fu_1417_p2 = (tmp_19_fu_1411_p2 + tmp_2_mid2_cast_fu_1379_p1);

assign tmp_21_cast_fu_1423_p1 = $signed(tmp_20_fu_1417_p2);

assign tmp_21_fu_1439_p1 = k3_reg_1043[1:0];

assign tmp_22_fu_1443_p4 = {{k3_reg_1043[4:2]}};

assign tmp_23_fu_1466_p2 = (tmp_19_reg_1797 + tmp_15_cast_fu_1462_p1);

assign tmp_24_cast_fu_1477_p1 = $signed(tmp_23_reg_1841);

assign tmp_2_fu_1213_p2 = (exitcond_flatten_reg_1680 | exitcond3_mid_fu_1201_p2);

assign tmp_2_mid2_cast_fu_1379_p1 = ia_cast_cast_mid2_v_reg_1767;

assign tmp_3_fu_1243_p3 = {{i1_mid2_reg_1699}, {5'd0}};

assign tmp_4_fu_1100_p1 = tmp_V_4_reg_1607;

assign tmp_6_fu_1126_p2 = (($signed(num_img_cast_fu_1122_p1) < $signed(reg_1054)) ? 1'b1 : 1'b0);

assign tmp_7_fu_1111_p2 = (($signed(i4_cast_fu_1107_p1) < $signed(KER_bound_reg_1648)) ? 1'b1 : 1'b0);

assign tmp_8_fu_1250_p3 = {{i1_mid2_reg_1699}, {3'd0}};

assign tmp_8_mid2_cast_fu_1240_p1 = tmp_8_mid2_v_reg_1693;

assign tmp_8_mid2_v_fu_1183_p3 = ((exitcond_flatten_reg_1680[0:0] === 1'b1) ? j_1_fu_1170_p2 : ap_phi_mux_j_phi_fu_915_p4);

assign tmp_9_fu_1261_p2 = (tmp_3_fu_1243_p3 - p_shl1_cast_fu_1257_p1);

assign tmp_i_fu_1556_p2 = (($signed(p_1_reg_1032) > $signed(tmp_17_reg_2061)) ? 1'b1 : 1'b0);

assign tmp_s_fu_1088_p2 = ((reg_1054 == 16'd0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    ia_cast_cast_mid2_reg_1786[5] <= 1'b0;
    tmp_19_reg_1797[2:0] <= 3'b000;
end

endmodule //Pool_32_24_4_s
