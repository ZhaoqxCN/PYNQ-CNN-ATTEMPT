-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Pool_32_24_4_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    stream_in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    stream_in_V_V_empty_n : IN STD_LOGIC;
    stream_in_V_V_read : OUT STD_LOGIC;
    stream_out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    stream_out_V_V_full_n : IN STD_LOGIC;
    stream_out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of Pool_32_24_4_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv15_4800 : STD_LOGIC_VECTOR (14 downto 0) := "100100000000000";
    constant ap_const_lv11_300 : STD_LOGIC_VECTOR (10 downto 0) := "01100000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_480 : STD_LOGIC_VECTOR (10 downto 0) := "10010000000";
    constant ap_const_lv9_C0 : STD_LOGIC_VECTOR (8 downto 0) := "011000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal A_V_4_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_0_ce0 : STD_LOGIC;
    signal A_V_4_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_0_ce1 : STD_LOGIC;
    signal A_V_4_0_we1 : STD_LOGIC;
    signal A_V_4_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_1_ce0 : STD_LOGIC;
    signal A_V_4_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_1_ce1 : STD_LOGIC;
    signal A_V_4_1_we1 : STD_LOGIC;
    signal A_V_4_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_2_ce0 : STD_LOGIC;
    signal A_V_4_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_2_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_2_ce1 : STD_LOGIC;
    signal A_V_4_2_we1 : STD_LOGIC;
    signal A_V_4_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_3_ce0 : STD_LOGIC;
    signal A_V_4_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_3_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_3_ce1 : STD_LOGIC;
    signal A_V_4_3_we1 : STD_LOGIC;
    signal A_V_4_4_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_4_ce0 : STD_LOGIC;
    signal A_V_4_4_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_4_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_4_ce1 : STD_LOGIC;
    signal A_V_4_4_we1 : STD_LOGIC;
    signal A_V_4_5_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_5_ce0 : STD_LOGIC;
    signal A_V_4_5_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_5_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_5_ce1 : STD_LOGIC;
    signal A_V_4_5_we1 : STD_LOGIC;
    signal A_V_4_6_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_6_ce0 : STD_LOGIC;
    signal A_V_4_6_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_6_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_6_ce1 : STD_LOGIC;
    signal A_V_4_6_we1 : STD_LOGIC;
    signal A_V_4_7_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_7_ce0 : STD_LOGIC;
    signal A_V_4_7_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_7_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_7_ce1 : STD_LOGIC;
    signal A_V_4_7_we1 : STD_LOGIC;
    signal A_V_4_8_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_8_ce0 : STD_LOGIC;
    signal A_V_4_8_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_8_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_8_ce1 : STD_LOGIC;
    signal A_V_4_8_we1 : STD_LOGIC;
    signal A_V_4_9_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_9_ce0 : STD_LOGIC;
    signal A_V_4_9_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_9_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_9_ce1 : STD_LOGIC;
    signal A_V_4_9_we1 : STD_LOGIC;
    signal A_V_4_10_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_10_ce0 : STD_LOGIC;
    signal A_V_4_10_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_10_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_10_ce1 : STD_LOGIC;
    signal A_V_4_10_we1 : STD_LOGIC;
    signal A_V_4_11_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_11_ce0 : STD_LOGIC;
    signal A_V_4_11_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_11_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_11_ce1 : STD_LOGIC;
    signal A_V_4_11_we1 : STD_LOGIC;
    signal A_V_4_12_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_12_ce0 : STD_LOGIC;
    signal A_V_4_12_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_12_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_12_ce1 : STD_LOGIC;
    signal A_V_4_12_we1 : STD_LOGIC;
    signal A_V_4_13_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_13_ce0 : STD_LOGIC;
    signal A_V_4_13_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_13_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_13_ce1 : STD_LOGIC;
    signal A_V_4_13_we1 : STD_LOGIC;
    signal A_V_4_14_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_14_ce0 : STD_LOGIC;
    signal A_V_4_14_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_14_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_14_ce1 : STD_LOGIC;
    signal A_V_4_14_we1 : STD_LOGIC;
    signal A_V_4_15_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_15_ce0 : STD_LOGIC;
    signal A_V_4_15_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_15_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_15_ce1 : STD_LOGIC;
    signal A_V_4_15_we1 : STD_LOGIC;
    signal A_V_4_16_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_16_ce0 : STD_LOGIC;
    signal A_V_4_16_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_16_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_16_ce1 : STD_LOGIC;
    signal A_V_4_16_we1 : STD_LOGIC;
    signal A_V_4_17_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_17_ce0 : STD_LOGIC;
    signal A_V_4_17_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_17_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_17_ce1 : STD_LOGIC;
    signal A_V_4_17_we1 : STD_LOGIC;
    signal A_V_4_18_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_18_ce0 : STD_LOGIC;
    signal A_V_4_18_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_18_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_18_ce1 : STD_LOGIC;
    signal A_V_4_18_we1 : STD_LOGIC;
    signal A_V_4_19_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_19_ce0 : STD_LOGIC;
    signal A_V_4_19_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_19_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_19_ce1 : STD_LOGIC;
    signal A_V_4_19_we1 : STD_LOGIC;
    signal A_V_4_20_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_20_ce0 : STD_LOGIC;
    signal A_V_4_20_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_20_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_20_ce1 : STD_LOGIC;
    signal A_V_4_20_we1 : STD_LOGIC;
    signal A_V_4_21_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_21_ce0 : STD_LOGIC;
    signal A_V_4_21_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_21_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_21_ce1 : STD_LOGIC;
    signal A_V_4_21_we1 : STD_LOGIC;
    signal A_V_4_22_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_22_ce0 : STD_LOGIC;
    signal A_V_4_22_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_22_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_22_ce1 : STD_LOGIC;
    signal A_V_4_22_we1 : STD_LOGIC;
    signal A_V_4_23_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_23_ce0 : STD_LOGIC;
    signal A_V_4_23_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_23_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_23_ce1 : STD_LOGIC;
    signal A_V_4_23_we1 : STD_LOGIC;
    signal stream_in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond_flatten1_reg_1671 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_reg_1671_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_7_reg_1653 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal i4_reg_878 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten1_reg_900 : STD_LOGIC_VECTOR (14 downto 0);
    signal j_reg_911 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_923 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_reg_934 : STD_LOGIC_VECTOR (4 downto 0);
    signal i1_reg_946 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_1_reg_1032 : STD_LOGIC_VECTOR (7 downto 0);
    signal k3_reg_1043 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_1054 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state2 : BOOLEAN;
    signal reg_1058 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ib_mid2_reg_1791 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_state29_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state30_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state31_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state32_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state33_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal exitcond_reg_1832 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_1832_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_1063 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1068 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1073 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1078 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1083 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_1088_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_1603 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_4_reg_1607 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal tmp_V_6_reg_1612 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal tmp_V_10_reg_1617 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state6 : BOOLEAN;
    signal ap_block_state7 : BOOLEAN;
    signal tmp_4_fu_1100_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1591_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_1638 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_1597_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_1643 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1103_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal KER_bound_reg_1648 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_7_fu_1111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state15_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_1116_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_6_fu_1126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal num_img_1_fu_1132_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal num_img_1_reg_1666 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond_flatten1_fu_1138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state19_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next1_fu_1144_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal exitcond_flatten_fu_1150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1680 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_1162_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_mid2_v_fu_1183_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_mid2_v_reg_1693 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal i1_mid2_fu_1218_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal i1_mid2_reg_1699 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_mid2_fu_1226_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_mid2_reg_1705 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_mid2_reg_1705_pp1_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_fu_1234_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_1710 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_10_fu_1267_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_reg_1715 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_fu_1273_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_reg_1720 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_next3_fu_1310_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten_next3_reg_1751 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal exitcond_flatten2_fu_1322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_1756 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten3_fu_1304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ib_mid_fu_1328_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ib_mid_reg_1761 : STD_LOGIC_VECTOR (4 downto 0);
    signal ia_cast_cast_mid2_v_fu_1336_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ia_cast_cast_mid2_v_reg_1767 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond4_mid_fu_1356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_mid_reg_1774 : STD_LOGIC_VECTOR (0 downto 0);
    signal i2_mid2_fu_1368_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal i2_mid2_reg_1779 : STD_LOGIC_VECTOR (5 downto 0);
    signal ia_cast_cast_mid2_fu_1376_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ia_cast_cast_mid2_reg_1786 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ib_mid2_fu_1387_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_19_fu_1411_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_19_reg_1797 : STD_LOGIC_VECTOR (10 downto 0);
    signal A_V_4_0_addr_1_reg_1802 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_12_addr_1_reg_1807 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_16_addr_1_reg_1812 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_20_addr_1_reg_1817 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_4_addr_1_reg_1822 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_V_4_8_addr_1_reg_1827 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_1433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal exitcond_reg_1832_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_1832_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_1439_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_21_reg_1836 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_21_reg_1836_pp2_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_21_reg_1836_pp2_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_23_fu_1466_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_23_reg_1841 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_2_fu_1471_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal A_V_4_1_load_reg_1971 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_2_load_reg_1976 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_3_load_reg_1981 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_5_load_reg_1986 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_6_load_reg_1991 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_7_load_reg_1996 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_9_load_reg_2001 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_10_load_reg_2006 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_11_load_reg_2011 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_13_load_reg_2016 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_14_load_reg_2021 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_15_load_reg_2026 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_17_load_reg_2031 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_18_load_reg_2036 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_19_load_reg_2041 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_21_load_reg_2046 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_22_load_reg_2051 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_4_23_load_reg_2056 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_1520_p26 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_reg_2061 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_V_fu_1561_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal i_2_fu_1573_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_next2_fu_1584_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state15 : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state19 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state29 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal num_img_reg_889 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_j_phi_fu_915_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_k_phi_fu_938_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_i1_phi_fu_950_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten2_reg_958 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ia_reg_969 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten3_reg_980 : STD_LOGIC_VECTOR (8 downto 0);
    signal ib_reg_992 : STD_LOGIC_VECTOR (4 downto 0);
    signal i2_reg_1003 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_p_1_ph_phi_fu_1017_p12 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_cast_fu_1277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_cast_fu_1423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_cast_fu_1477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_block_state5 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal Outbuf_V_fu_1568_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i4_cast_fu_1107_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_img_cast_fu_1122_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten_op_fu_1156_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_1_fu_1170_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_1195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_1190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_mid_fu_1176_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond3_mid_fu_1201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_1213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_1207_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_1250_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_fu_1243_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_1257_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_mid2_cast_fu_1240_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_fu_1261_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ia_1_fu_1316_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_fu_1350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_2_fu_1344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_1362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ib_1_fu_1382_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_fu_1400_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_15_fu_1393_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_1407_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_mid2_cast_fu_1379_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_20_fu_1417_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_22_fu_1443_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_19_cast_cast_fu_1453_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_fu_1457_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_cast_fu_1462_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_16_fu_1504_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_17_fu_1520_p25 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_i_fu_1556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten18_op_fu_1578_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1591_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1591_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1591_ce : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_1597_ce : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_condition_498 : BOOLEAN;

    component cnn_mul_32s_32s_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_mux_245_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (7 downto 0);
        din17 : IN STD_LOGIC_VECTOR (7 downto 0);
        din18 : IN STD_LOGIC_VECTOR (7 downto 0);
        din19 : IN STD_LOGIC_VECTOR (7 downto 0);
        din20 : IN STD_LOGIC_VECTOR (7 downto 0);
        din21 : IN STD_LOGIC_VECTOR (7 downto 0);
        din22 : IN STD_LOGIC_VECTOR (7 downto 0);
        din23 : IN STD_LOGIC_VECTOR (7 downto 0);
        din24 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cnn_mul_mul_16s_1cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_32_24_4_s_A_bck IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    A_V_4_0_U : component Pool_32_24_4_s_A_bck
    generic map (
        DataWidth => 8,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_4_0_address0,
        ce0 => A_V_4_0_ce0,
        q0 => A_V_4_0_q0,
        address1 => A_V_4_0_address1,
        ce1 => A_V_4_0_ce1,
        we1 => A_V_4_0_we1,
        d1 => tmp_13_reg_1720);

    A_V_4_1_U : component Pool_32_24_4_s_A_bck
    generic map (
        DataWidth => 8,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_4_1_address0,
        ce0 => A_V_4_1_ce0,
        q0 => A_V_4_1_q0,
        address1 => A_V_4_1_address1,
        ce1 => A_V_4_1_ce1,
        we1 => A_V_4_1_we1,
        d1 => tmp_13_reg_1720);

    A_V_4_2_U : component Pool_32_24_4_s_A_bck
    generic map (
        DataWidth => 8,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_4_2_address0,
        ce0 => A_V_4_2_ce0,
        q0 => A_V_4_2_q0,
        address1 => A_V_4_2_address1,
        ce1 => A_V_4_2_ce1,
        we1 => A_V_4_2_we1,
        d1 => tmp_13_reg_1720);

    A_V_4_3_U : component Pool_32_24_4_s_A_bck
    generic map (
        DataWidth => 8,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_4_3_address0,
        ce0 => A_V_4_3_ce0,
        q0 => A_V_4_3_q0,
        address1 => A_V_4_3_address1,
        ce1 => A_V_4_3_ce1,
        we1 => A_V_4_3_we1,
        d1 => tmp_13_reg_1720);

    A_V_4_4_U : component Pool_32_24_4_s_A_bck
    generic map (
        DataWidth => 8,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_4_4_address0,
        ce0 => A_V_4_4_ce0,
        q0 => A_V_4_4_q0,
        address1 => A_V_4_4_address1,
        ce1 => A_V_4_4_ce1,
        we1 => A_V_4_4_we1,
        d1 => tmp_13_reg_1720);

    A_V_4_5_U : component Pool_32_24_4_s_A_bck
    generic map (
        DataWidth => 8,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_4_5_address0,
        ce0 => A_V_4_5_ce0,
        q0 => A_V_4_5_q0,
        address1 => A_V_4_5_address1,
        ce1 => A_V_4_5_ce1,
        we1 => A_V_4_5_we1,
        d1 => tmp_13_reg_1720);

    A_V_4_6_U : component Pool_32_24_4_s_A_bck
    generic map (
        DataWidth => 8,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_4_6_address0,
        ce0 => A_V_4_6_ce0,
        q0 => A_V_4_6_q0,
        address1 => A_V_4_6_address1,
        ce1 => A_V_4_6_ce1,
        we1 => A_V_4_6_we1,
        d1 => tmp_13_reg_1720);

    A_V_4_7_U : component Pool_32_24_4_s_A_bck
    generic map (
        DataWidth => 8,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_4_7_address0,
        ce0 => A_V_4_7_ce0,
        q0 => A_V_4_7_q0,
        address1 => A_V_4_7_address1,
        ce1 => A_V_4_7_ce1,
        we1 => A_V_4_7_we1,
        d1 => tmp_13_reg_1720);

    A_V_4_8_U : component Pool_32_24_4_s_A_bck
    generic map (
        DataWidth => 8,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_4_8_address0,
        ce0 => A_V_4_8_ce0,
        q0 => A_V_4_8_q0,
        address1 => A_V_4_8_address1,
        ce1 => A_V_4_8_ce1,
        we1 => A_V_4_8_we1,
        d1 => tmp_13_reg_1720);

    A_V_4_9_U : component Pool_32_24_4_s_A_bck
    generic map (
        DataWidth => 8,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_4_9_address0,
        ce0 => A_V_4_9_ce0,
        q0 => A_V_4_9_q0,
        address1 => A_V_4_9_address1,
        ce1 => A_V_4_9_ce1,
        we1 => A_V_4_9_we1,
        d1 => tmp_13_reg_1720);

    A_V_4_10_U : component Pool_32_24_4_s_A_bck
    generic map (
        DataWidth => 8,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_4_10_address0,
        ce0 => A_V_4_10_ce0,
        q0 => A_V_4_10_q0,
        address1 => A_V_4_10_address1,
        ce1 => A_V_4_10_ce1,
        we1 => A_V_4_10_we1,
        d1 => tmp_13_reg_1720);

    A_V_4_11_U : component Pool_32_24_4_s_A_bck
    generic map (
        DataWidth => 8,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_4_11_address0,
        ce0 => A_V_4_11_ce0,
        q0 => A_V_4_11_q0,
        address1 => A_V_4_11_address1,
        ce1 => A_V_4_11_ce1,
        we1 => A_V_4_11_we1,
        d1 => tmp_13_reg_1720);

    A_V_4_12_U : component Pool_32_24_4_s_A_bck
    generic map (
        DataWidth => 8,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_4_12_address0,
        ce0 => A_V_4_12_ce0,
        q0 => A_V_4_12_q0,
        address1 => A_V_4_12_address1,
        ce1 => A_V_4_12_ce1,
        we1 => A_V_4_12_we1,
        d1 => tmp_13_reg_1720);

    A_V_4_13_U : component Pool_32_24_4_s_A_bck
    generic map (
        DataWidth => 8,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_4_13_address0,
        ce0 => A_V_4_13_ce0,
        q0 => A_V_4_13_q0,
        address1 => A_V_4_13_address1,
        ce1 => A_V_4_13_ce1,
        we1 => A_V_4_13_we1,
        d1 => tmp_13_reg_1720);

    A_V_4_14_U : component Pool_32_24_4_s_A_bck
    generic map (
        DataWidth => 8,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_4_14_address0,
        ce0 => A_V_4_14_ce0,
        q0 => A_V_4_14_q0,
        address1 => A_V_4_14_address1,
        ce1 => A_V_4_14_ce1,
        we1 => A_V_4_14_we1,
        d1 => tmp_13_reg_1720);

    A_V_4_15_U : component Pool_32_24_4_s_A_bck
    generic map (
        DataWidth => 8,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_4_15_address0,
        ce0 => A_V_4_15_ce0,
        q0 => A_V_4_15_q0,
        address1 => A_V_4_15_address1,
        ce1 => A_V_4_15_ce1,
        we1 => A_V_4_15_we1,
        d1 => tmp_13_reg_1720);

    A_V_4_16_U : component Pool_32_24_4_s_A_bck
    generic map (
        DataWidth => 8,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_4_16_address0,
        ce0 => A_V_4_16_ce0,
        q0 => A_V_4_16_q0,
        address1 => A_V_4_16_address1,
        ce1 => A_V_4_16_ce1,
        we1 => A_V_4_16_we1,
        d1 => tmp_13_reg_1720);

    A_V_4_17_U : component Pool_32_24_4_s_A_bck
    generic map (
        DataWidth => 8,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_4_17_address0,
        ce0 => A_V_4_17_ce0,
        q0 => A_V_4_17_q0,
        address1 => A_V_4_17_address1,
        ce1 => A_V_4_17_ce1,
        we1 => A_V_4_17_we1,
        d1 => tmp_13_reg_1720);

    A_V_4_18_U : component Pool_32_24_4_s_A_bck
    generic map (
        DataWidth => 8,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_4_18_address0,
        ce0 => A_V_4_18_ce0,
        q0 => A_V_4_18_q0,
        address1 => A_V_4_18_address1,
        ce1 => A_V_4_18_ce1,
        we1 => A_V_4_18_we1,
        d1 => tmp_13_reg_1720);

    A_V_4_19_U : component Pool_32_24_4_s_A_bck
    generic map (
        DataWidth => 8,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_4_19_address0,
        ce0 => A_V_4_19_ce0,
        q0 => A_V_4_19_q0,
        address1 => A_V_4_19_address1,
        ce1 => A_V_4_19_ce1,
        we1 => A_V_4_19_we1,
        d1 => tmp_13_reg_1720);

    A_V_4_20_U : component Pool_32_24_4_s_A_bck
    generic map (
        DataWidth => 8,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_4_20_address0,
        ce0 => A_V_4_20_ce0,
        q0 => A_V_4_20_q0,
        address1 => A_V_4_20_address1,
        ce1 => A_V_4_20_ce1,
        we1 => A_V_4_20_we1,
        d1 => tmp_13_reg_1720);

    A_V_4_21_U : component Pool_32_24_4_s_A_bck
    generic map (
        DataWidth => 8,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_4_21_address0,
        ce0 => A_V_4_21_ce0,
        q0 => A_V_4_21_q0,
        address1 => A_V_4_21_address1,
        ce1 => A_V_4_21_ce1,
        we1 => A_V_4_21_we1,
        d1 => tmp_13_reg_1720);

    A_V_4_22_U : component Pool_32_24_4_s_A_bck
    generic map (
        DataWidth => 8,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_4_22_address0,
        ce0 => A_V_4_22_ce0,
        q0 => A_V_4_22_q0,
        address1 => A_V_4_22_address1,
        ce1 => A_V_4_22_ce1,
        we1 => A_V_4_22_we1,
        d1 => tmp_13_reg_1720);

    A_V_4_23_U : component Pool_32_24_4_s_A_bck
    generic map (
        DataWidth => 8,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_4_23_address0,
        ce0 => A_V_4_23_ce0,
        q0 => A_V_4_23_q0,
        address1 => A_V_4_23_address1,
        ce1 => A_V_4_23_ce1,
        we1 => A_V_4_23_we1,
        d1 => tmp_13_reg_1720);

    cnn_mul_32s_32s_3bkb_U32 : component cnn_mul_32s_32s_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp2_reg_1643,
        din1 => tmp1_reg_1638,
        ce => ap_const_logic_1,
        dout => grp_fu_1103_p2);

    cnn_mux_245_8_1_1_U33 : component cnn_mux_245_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 5,
        dout_WIDTH => 8)
    port map (
        din0 => reg_1078,
        din1 => A_V_4_1_load_reg_1971,
        din2 => A_V_4_2_load_reg_1976,
        din3 => A_V_4_3_load_reg_1981,
        din4 => reg_1073,
        din5 => A_V_4_5_load_reg_1986,
        din6 => A_V_4_6_load_reg_1991,
        din7 => A_V_4_7_load_reg_1996,
        din8 => reg_1068,
        din9 => A_V_4_9_load_reg_2001,
        din10 => A_V_4_10_load_reg_2006,
        din11 => A_V_4_11_load_reg_2011,
        din12 => reg_1063,
        din13 => A_V_4_13_load_reg_2016,
        din14 => A_V_4_14_load_reg_2021,
        din15 => A_V_4_15_load_reg_2026,
        din16 => reg_1058,
        din17 => A_V_4_17_load_reg_2031,
        din18 => A_V_4_18_load_reg_2036,
        din19 => A_V_4_19_load_reg_2041,
        din20 => reg_1083,
        din21 => A_V_4_21_load_reg_2046,
        din22 => A_V_4_22_load_reg_2051,
        din23 => A_V_4_23_load_reg_2056,
        din24 => tmp_17_fu_1520_p25,
        dout => tmp_17_fu_1520_p26);

    cnn_mul_mul_16s_1cud_U34 : component cnn_mul_mul_16s_1cud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1591_p0,
        din1 => grp_fu_1591_p1,
        ce => grp_fu_1591_ce,
        dout => grp_fu_1591_p2);

    cnn_mul_mul_16s_1cud_U35 : component cnn_mul_mul_16s_1cud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_V_6_reg_1612,
        din1 => tmp_V_10_reg_1617,
        ce => grp_fu_1597_ce,
        dout => grp_fu_1597_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state15) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state15))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state15);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state19) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((tmp_6_fu_1126_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state19)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state19);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                elsif (((tmp_6_fu_1126_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                    ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state29) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state29)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state29);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                    ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_946_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten1_reg_1671_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
                i1_reg_946 <= i_1_reg_1710;
            elsif (((tmp_6_fu_1126_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                i1_reg_946 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i2_reg_1003_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i2_reg_1003 <= ap_const_lv6_0;
            elsif (((stream_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                i2_reg_1003 <= i_2_fu_1573_p2;
            end if; 
        end if;
    end process;

    i4_reg_878_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_7_fu_1111_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i4_reg_878 <= i_fu_1116_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i4_reg_878 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    ia_reg_969_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                ia_reg_969 <= ap_const_lv5_0;
            elsif (((stream_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                ia_reg_969 <= ia_cast_cast_mid2_v_reg_1767;
            end if; 
        end if;
    end process;

    ib_reg_992_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                ib_reg_992 <= ap_const_lv5_0;
            elsif (((stream_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                ib_reg_992 <= ib_mid2_reg_1791;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_900_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten1_fu_1138_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                indvar_flatten1_reg_900 <= indvar_flatten_next1_fu_1144_p2;
            elsif (((tmp_6_fu_1126_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                indvar_flatten1_reg_900 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvar_flatten2_reg_958_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                indvar_flatten2_reg_958 <= ap_const_lv11_0;
            elsif (((stream_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                indvar_flatten2_reg_958 <= indvar_flatten_next3_reg_1751;
            end if; 
        end if;
    end process;

    indvar_flatten3_reg_980_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                indvar_flatten3_reg_980 <= ap_const_lv9_0;
            elsif (((stream_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                indvar_flatten3_reg_980 <= indvar_flatten_next2_fu_1584_p3;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_923_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten1_fu_1138_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                indvar_flatten_reg_923 <= indvar_flatten_next_fu_1162_p3;
            elsif (((tmp_6_fu_1126_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                indvar_flatten_reg_923 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    j_reg_911_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten1_reg_1671_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
                j_reg_911 <= tmp_8_mid2_v_reg_1693;
            elsif (((tmp_6_fu_1126_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                j_reg_911 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    k3_reg_1043_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                k3_reg_1043 <= ap_const_lv5_1;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_fu_1433_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                k3_reg_1043 <= k_2_fu_1471_p2;
            end if; 
        end if;
    end process;

    k_reg_934_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten1_reg_1671_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
                k_reg_934 <= k_mid2_reg_1705;
            elsif (((tmp_6_fu_1126_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                k_reg_934 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    num_img_reg_889_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (tmp_s_reg_1603 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                num_img_reg_889 <= ap_const_lv15_0;
            elsif (((exitcond_flatten3_fu_1304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                num_img_reg_889 <= num_img_1_reg_1666;
            end if; 
        end if;
    end process;

    p_1_reg_1032_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                p_1_reg_1032 <= ap_phi_mux_p_1_ph_phi_fu_1017_p12;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_reg_1832_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
                p_1_reg_1032 <= buf_V_fu_1561_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                A_V_4_0_addr_1_reg_1802 <= tmp_21_cast_fu_1423_p1(10 - 1 downto 0);
                A_V_4_12_addr_1_reg_1807 <= tmp_21_cast_fu_1423_p1(10 - 1 downto 0);
                A_V_4_16_addr_1_reg_1812 <= tmp_21_cast_fu_1423_p1(10 - 1 downto 0);
                A_V_4_20_addr_1_reg_1817 <= tmp_21_cast_fu_1423_p1(10 - 1 downto 0);
                A_V_4_4_addr_1_reg_1822 <= tmp_21_cast_fu_1423_p1(10 - 1 downto 0);
                A_V_4_8_addr_1_reg_1827 <= tmp_21_cast_fu_1423_p1(10 - 1 downto 0);
                    ia_cast_cast_mid2_reg_1786(4 downto 0) <= ia_cast_cast_mid2_fu_1376_p1(4 downto 0);
                ib_mid2_reg_1791 <= ib_mid2_fu_1387_p3;
                    tmp_19_reg_1797(10 downto 3) <= tmp_19_fu_1411_p2(10 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_reg_1832_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then
                A_V_4_10_load_reg_2006 <= A_V_4_10_q0;
                A_V_4_11_load_reg_2011 <= A_V_4_11_q0;
                A_V_4_13_load_reg_2016 <= A_V_4_13_q0;
                A_V_4_14_load_reg_2021 <= A_V_4_14_q0;
                A_V_4_15_load_reg_2026 <= A_V_4_15_q0;
                A_V_4_17_load_reg_2031 <= A_V_4_17_q0;
                A_V_4_18_load_reg_2036 <= A_V_4_18_q0;
                A_V_4_19_load_reg_2041 <= A_V_4_19_q0;
                A_V_4_1_load_reg_1971 <= A_V_4_1_q0;
                A_V_4_21_load_reg_2046 <= A_V_4_21_q0;
                A_V_4_22_load_reg_2051 <= A_V_4_22_q0;
                A_V_4_23_load_reg_2056 <= A_V_4_23_q0;
                A_V_4_2_load_reg_1976 <= A_V_4_2_q0;
                A_V_4_3_load_reg_1981 <= A_V_4_3_q0;
                A_V_4_5_load_reg_1986 <= A_V_4_5_q0;
                A_V_4_6_load_reg_1991 <= A_V_4_6_q0;
                A_V_4_7_load_reg_1996 <= A_V_4_7_q0;
                A_V_4_9_load_reg_2001 <= A_V_4_9_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                KER_bound_reg_1648 <= grp_fu_1103_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten3_fu_1304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                exitcond4_mid_reg_1774 <= exitcond4_mid_fu_1356_p2;
                exitcond_flatten2_reg_1756 <= exitcond_flatten2_fu_1322_p2;
                i2_mid2_reg_1779 <= i2_mid2_fu_1368_p3;
                ia_cast_cast_mid2_v_reg_1767 <= ia_cast_cast_mid2_v_fu_1336_p3;
                ib_mid_reg_1761 <= ib_mid_fu_1328_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond_flatten1_reg_1671 <= exitcond_flatten1_fu_1138_p2;
                exitcond_flatten1_reg_1671_pp1_iter1_reg <= exitcond_flatten1_reg_1671;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten1_fu_1138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond_flatten_reg_1680 <= exitcond_flatten_fu_1150_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                exitcond_reg_1832 <= exitcond_fu_1433_p2;
                exitcond_reg_1832_pp2_iter1_reg <= exitcond_reg_1832;
                tmp_21_reg_1836_pp2_iter1_reg <= tmp_21_reg_1836;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                exitcond_reg_1832_pp2_iter2_reg <= exitcond_reg_1832_pp2_iter1_reg;
                exitcond_reg_1832_pp2_iter3_reg <= exitcond_reg_1832_pp2_iter2_reg;
                tmp_21_reg_1836_pp2_iter2_reg <= tmp_21_reg_1836_pp2_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten1_reg_1671 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                i1_mid2_reg_1699 <= i1_mid2_fu_1218_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten1_reg_1671 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                i_1_reg_1710 <= i_1_fu_1234_p2;
                k_mid2_reg_1705 <= k_mid2_fu_1226_p3;
                tmp_8_mid2_v_reg_1693 <= tmp_8_mid2_v_fu_1183_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                indvar_flatten_next3_reg_1751 <= indvar_flatten_next3_fu_1310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                k_mid2_reg_1705_pp1_iter2_reg <= k_mid2_reg_1705;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                num_img_1_reg_1666 <= num_img_1_fu_1132_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_done_reg = ap_const_logic_1) or (stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then
                reg_1054 <= stream_in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_reg_1832_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ib_mid2_reg_1791 = ap_const_lv5_10) and (ap_const_logic_1 = ap_CS_fsm_state27)))) then
                reg_1058 <= A_V_4_16_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_reg_1832_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ib_mid2_reg_1791 = ap_const_lv5_C) and (ap_const_logic_1 = ap_CS_fsm_state27)))) then
                reg_1063 <= A_V_4_12_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_reg_1832_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ib_mid2_reg_1791 = ap_const_lv5_8) and (ap_const_logic_1 = ap_CS_fsm_state27)))) then
                reg_1068 <= A_V_4_8_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_reg_1832_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ib_mid2_reg_1791 = ap_const_lv5_4) and (ap_const_logic_1 = ap_CS_fsm_state27)))) then
                reg_1073 <= A_V_4_4_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_reg_1832_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ib_mid2_reg_1791 = ap_const_lv5_0) and (ap_const_logic_1 = ap_CS_fsm_state27)))) then
                reg_1078 <= A_V_4_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_reg_1832_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or (not((ib_mid2_reg_1791 = ap_const_lv5_0)) and not((ib_mid2_reg_1791 = ap_const_lv5_4)) and not((ib_mid2_reg_1791 = ap_const_lv5_8)) and not((ib_mid2_reg_1791 = ap_const_lv5_C)) and not((ib_mid2_reg_1791 = ap_const_lv5_10)) and (ap_const_logic_1 = ap_CS_fsm_state27)))) then
                reg_1083 <= A_V_4_20_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp1_reg_1638 <= grp_fu_1591_p2;
                tmp2_reg_1643 <= grp_fu_1597_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten1_reg_1671_pp1_iter1_reg = ap_const_lv1_0))) then
                tmp_10_reg_1715 <= tmp_10_fu_1267_p2;
                tmp_13_reg_1720 <= tmp_13_fu_1273_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_reg_1832_pp2_iter2_reg = ap_const_lv1_0))) then
                tmp_17_reg_2061 <= tmp_17_fu_1520_p26;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond_fu_1433_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                tmp_21_reg_1836 <= tmp_21_fu_1439_p1;
                tmp_23_reg_1841 <= tmp_23_fu_1466_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_7_reg_1653 <= tmp_7_fu_1111_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_V_10_reg_1617 <= stream_in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_V_4_reg_1607 <= stream_in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_V_6_reg_1612 <= stream_in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_s_reg_1603 <= tmp_s_fu_1088_p2;
            end if;
        end if;
    end process;
    ia_cast_cast_mid2_reg_1786(5) <= '0';
    tmp_19_reg_1797(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, stream_in_V_V_empty_n, stream_out_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_enable_reg_pp1_iter2, ap_CS_fsm_state34, tmp_s_reg_1603, tmp_7_fu_1111_p2, ap_enable_reg_pp0_iter0, tmp_6_fu_1126_p2, ap_CS_fsm_state18, exitcond_flatten1_fu_1138_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state24, exitcond_flatten3_fu_1304_p2, exitcond_fu_1433_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter4, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter3, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (tmp_s_reg_1603 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                elsif ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (tmp_s_reg_1603 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_7_fu_1111_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_7_fu_1111_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state18 => 
                if (((tmp_6_fu_1126_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (exitcond_flatten1_fu_1138_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (exitcond_flatten1_fu_1138_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((exitcond_flatten3_fu_1304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond_fu_1433_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond_fu_1433_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state34 => 
                if (((stream_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_V_4_0_address0_assign_proc : process(A_V_4_0_addr_1_reg_1802, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, tmp_24_cast_fu_1477_p1, ap_block_pp2_stage0, ap_CS_fsm_state26)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            A_V_4_0_address0 <= tmp_24_cast_fu_1477_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            A_V_4_0_address0 <= A_V_4_0_addr_1_reg_1802;
        else 
            A_V_4_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    A_V_4_0_address1 <= tmp_10_cast_fu_1277_p1(10 - 1 downto 0);

    A_V_4_0_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            A_V_4_0_ce0 <= ap_const_logic_1;
        else 
            A_V_4_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_0_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_0_ce1 <= ap_const_logic_1;
        else 
            A_V_4_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_0_we1_assign_proc : process(ap_block_pp1_stage0_11001, k_mid2_reg_1705_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_0_we1 <= ap_const_logic_1;
        else 
            A_V_4_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_4_10_address0 <= tmp_24_cast_fu_1477_p1(10 - 1 downto 0);
    A_V_4_10_address1 <= tmp_10_cast_fu_1277_p1(10 - 1 downto 0);

    A_V_4_10_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            A_V_4_10_ce0 <= ap_const_logic_1;
        else 
            A_V_4_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_10_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_10_ce1 <= ap_const_logic_1;
        else 
            A_V_4_10_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_10_we1_assign_proc : process(ap_block_pp1_stage0_11001, k_mid2_reg_1705_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_A) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_10_we1 <= ap_const_logic_1;
        else 
            A_V_4_10_we1 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_4_11_address0 <= tmp_24_cast_fu_1477_p1(10 - 1 downto 0);
    A_V_4_11_address1 <= tmp_10_cast_fu_1277_p1(10 - 1 downto 0);

    A_V_4_11_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            A_V_4_11_ce0 <= ap_const_logic_1;
        else 
            A_V_4_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_11_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_11_ce1 <= ap_const_logic_1;
        else 
            A_V_4_11_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_11_we1_assign_proc : process(ap_block_pp1_stage0_11001, k_mid2_reg_1705_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_B) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_11_we1 <= ap_const_logic_1;
        else 
            A_V_4_11_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_12_address0_assign_proc : process(A_V_4_12_addr_1_reg_1807, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, tmp_24_cast_fu_1477_p1, ap_block_pp2_stage0, ap_CS_fsm_state26)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            A_V_4_12_address0 <= tmp_24_cast_fu_1477_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            A_V_4_12_address0 <= A_V_4_12_addr_1_reg_1807;
        else 
            A_V_4_12_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    A_V_4_12_address1 <= tmp_10_cast_fu_1277_p1(10 - 1 downto 0);

    A_V_4_12_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            A_V_4_12_ce0 <= ap_const_logic_1;
        else 
            A_V_4_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_12_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_12_ce1 <= ap_const_logic_1;
        else 
            A_V_4_12_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_12_we1_assign_proc : process(ap_block_pp1_stage0_11001, k_mid2_reg_1705_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_C) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_12_we1 <= ap_const_logic_1;
        else 
            A_V_4_12_we1 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_4_13_address0 <= tmp_24_cast_fu_1477_p1(10 - 1 downto 0);
    A_V_4_13_address1 <= tmp_10_cast_fu_1277_p1(10 - 1 downto 0);

    A_V_4_13_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            A_V_4_13_ce0 <= ap_const_logic_1;
        else 
            A_V_4_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_13_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_13_ce1 <= ap_const_logic_1;
        else 
            A_V_4_13_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_13_we1_assign_proc : process(ap_block_pp1_stage0_11001, k_mid2_reg_1705_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_D) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_13_we1 <= ap_const_logic_1;
        else 
            A_V_4_13_we1 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_4_14_address0 <= tmp_24_cast_fu_1477_p1(10 - 1 downto 0);
    A_V_4_14_address1 <= tmp_10_cast_fu_1277_p1(10 - 1 downto 0);

    A_V_4_14_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            A_V_4_14_ce0 <= ap_const_logic_1;
        else 
            A_V_4_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_14_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_14_ce1 <= ap_const_logic_1;
        else 
            A_V_4_14_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_14_we1_assign_proc : process(ap_block_pp1_stage0_11001, k_mid2_reg_1705_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_E) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_14_we1 <= ap_const_logic_1;
        else 
            A_V_4_14_we1 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_4_15_address0 <= tmp_24_cast_fu_1477_p1(10 - 1 downto 0);
    A_V_4_15_address1 <= tmp_10_cast_fu_1277_p1(10 - 1 downto 0);

    A_V_4_15_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            A_V_4_15_ce0 <= ap_const_logic_1;
        else 
            A_V_4_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_15_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_15_ce1 <= ap_const_logic_1;
        else 
            A_V_4_15_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_15_we1_assign_proc : process(ap_block_pp1_stage0_11001, k_mid2_reg_1705_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_F) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_15_we1 <= ap_const_logic_1;
        else 
            A_V_4_15_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_16_address0_assign_proc : process(A_V_4_16_addr_1_reg_1812, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, tmp_24_cast_fu_1477_p1, ap_block_pp2_stage0, ap_CS_fsm_state26)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            A_V_4_16_address0 <= tmp_24_cast_fu_1477_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            A_V_4_16_address0 <= A_V_4_16_addr_1_reg_1812;
        else 
            A_V_4_16_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    A_V_4_16_address1 <= tmp_10_cast_fu_1277_p1(10 - 1 downto 0);

    A_V_4_16_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            A_V_4_16_ce0 <= ap_const_logic_1;
        else 
            A_V_4_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_16_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_16_ce1 <= ap_const_logic_1;
        else 
            A_V_4_16_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_16_we1_assign_proc : process(ap_block_pp1_stage0_11001, k_mid2_reg_1705_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_10) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_16_we1 <= ap_const_logic_1;
        else 
            A_V_4_16_we1 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_4_17_address0 <= tmp_24_cast_fu_1477_p1(10 - 1 downto 0);
    A_V_4_17_address1 <= tmp_10_cast_fu_1277_p1(10 - 1 downto 0);

    A_V_4_17_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            A_V_4_17_ce0 <= ap_const_logic_1;
        else 
            A_V_4_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_17_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_17_ce1 <= ap_const_logic_1;
        else 
            A_V_4_17_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_17_we1_assign_proc : process(ap_block_pp1_stage0_11001, k_mid2_reg_1705_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_11) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_17_we1 <= ap_const_logic_1;
        else 
            A_V_4_17_we1 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_4_18_address0 <= tmp_24_cast_fu_1477_p1(10 - 1 downto 0);
    A_V_4_18_address1 <= tmp_10_cast_fu_1277_p1(10 - 1 downto 0);

    A_V_4_18_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            A_V_4_18_ce0 <= ap_const_logic_1;
        else 
            A_V_4_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_18_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_18_ce1 <= ap_const_logic_1;
        else 
            A_V_4_18_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_18_we1_assign_proc : process(ap_block_pp1_stage0_11001, k_mid2_reg_1705_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_12) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_18_we1 <= ap_const_logic_1;
        else 
            A_V_4_18_we1 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_4_19_address0 <= tmp_24_cast_fu_1477_p1(10 - 1 downto 0);
    A_V_4_19_address1 <= tmp_10_cast_fu_1277_p1(10 - 1 downto 0);

    A_V_4_19_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            A_V_4_19_ce0 <= ap_const_logic_1;
        else 
            A_V_4_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_19_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_19_ce1 <= ap_const_logic_1;
        else 
            A_V_4_19_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_19_we1_assign_proc : process(ap_block_pp1_stage0_11001, k_mid2_reg_1705_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_13) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_19_we1 <= ap_const_logic_1;
        else 
            A_V_4_19_we1 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_4_1_address0 <= tmp_24_cast_fu_1477_p1(10 - 1 downto 0);
    A_V_4_1_address1 <= tmp_10_cast_fu_1277_p1(10 - 1 downto 0);

    A_V_4_1_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            A_V_4_1_ce0 <= ap_const_logic_1;
        else 
            A_V_4_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_1_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_1_ce1 <= ap_const_logic_1;
        else 
            A_V_4_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_1_we1_assign_proc : process(ap_block_pp1_stage0_11001, k_mid2_reg_1705_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_1_we1 <= ap_const_logic_1;
        else 
            A_V_4_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_20_address0_assign_proc : process(A_V_4_20_addr_1_reg_1817, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, tmp_24_cast_fu_1477_p1, ap_block_pp2_stage0, ap_CS_fsm_state26)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            A_V_4_20_address0 <= tmp_24_cast_fu_1477_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            A_V_4_20_address0 <= A_V_4_20_addr_1_reg_1817;
        else 
            A_V_4_20_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    A_V_4_20_address1 <= tmp_10_cast_fu_1277_p1(10 - 1 downto 0);

    A_V_4_20_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            A_V_4_20_ce0 <= ap_const_logic_1;
        else 
            A_V_4_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_20_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_20_ce1 <= ap_const_logic_1;
        else 
            A_V_4_20_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_20_we1_assign_proc : process(ap_block_pp1_stage0_11001, k_mid2_reg_1705_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_14) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_20_we1 <= ap_const_logic_1;
        else 
            A_V_4_20_we1 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_4_21_address0 <= tmp_24_cast_fu_1477_p1(10 - 1 downto 0);
    A_V_4_21_address1 <= tmp_10_cast_fu_1277_p1(10 - 1 downto 0);

    A_V_4_21_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            A_V_4_21_ce0 <= ap_const_logic_1;
        else 
            A_V_4_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_21_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_21_ce1 <= ap_const_logic_1;
        else 
            A_V_4_21_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_21_we1_assign_proc : process(ap_block_pp1_stage0_11001, k_mid2_reg_1705_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_15) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_21_we1 <= ap_const_logic_1;
        else 
            A_V_4_21_we1 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_4_22_address0 <= tmp_24_cast_fu_1477_p1(10 - 1 downto 0);
    A_V_4_22_address1 <= tmp_10_cast_fu_1277_p1(10 - 1 downto 0);

    A_V_4_22_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            A_V_4_22_ce0 <= ap_const_logic_1;
        else 
            A_V_4_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_22_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_22_ce1 <= ap_const_logic_1;
        else 
            A_V_4_22_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_22_we1_assign_proc : process(ap_block_pp1_stage0_11001, k_mid2_reg_1705_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_16) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_22_we1 <= ap_const_logic_1;
        else 
            A_V_4_22_we1 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_4_23_address0 <= tmp_24_cast_fu_1477_p1(10 - 1 downto 0);
    A_V_4_23_address1 <= tmp_10_cast_fu_1277_p1(10 - 1 downto 0);

    A_V_4_23_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            A_V_4_23_ce0 <= ap_const_logic_1;
        else 
            A_V_4_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_23_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_23_ce1 <= ap_const_logic_1;
        else 
            A_V_4_23_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_23_we1_assign_proc : process(ap_block_pp1_stage0_11001, k_mid2_reg_1705_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if ((not((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_0)) and not((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_1)) and not((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_2)) and not((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_3)) and not((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_4)) and not((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_5)) and not((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_6)) and not((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_7)) and not((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_8)) and not((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_9)) and not((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_A)) and not((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_B)) and not((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_C)) and not((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_D)) and not((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_E)) and not((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_F)) and not((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_10)) and not((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_11)) and not((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_12)) and not((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_13)) and not((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_14)) and not((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_15)) and not((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_16)) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_23_we1 <= ap_const_logic_1;
        else 
            A_V_4_23_we1 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_4_2_address0 <= tmp_24_cast_fu_1477_p1(10 - 1 downto 0);
    A_V_4_2_address1 <= tmp_10_cast_fu_1277_p1(10 - 1 downto 0);

    A_V_4_2_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            A_V_4_2_ce0 <= ap_const_logic_1;
        else 
            A_V_4_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_2_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_2_ce1 <= ap_const_logic_1;
        else 
            A_V_4_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_2_we1_assign_proc : process(ap_block_pp1_stage0_11001, k_mid2_reg_1705_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_2) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_2_we1 <= ap_const_logic_1;
        else 
            A_V_4_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_4_3_address0 <= tmp_24_cast_fu_1477_p1(10 - 1 downto 0);
    A_V_4_3_address1 <= tmp_10_cast_fu_1277_p1(10 - 1 downto 0);

    A_V_4_3_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            A_V_4_3_ce0 <= ap_const_logic_1;
        else 
            A_V_4_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_3_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_3_ce1 <= ap_const_logic_1;
        else 
            A_V_4_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_3_we1_assign_proc : process(ap_block_pp1_stage0_11001, k_mid2_reg_1705_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_3) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_3_we1 <= ap_const_logic_1;
        else 
            A_V_4_3_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_4_address0_assign_proc : process(A_V_4_4_addr_1_reg_1822, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, tmp_24_cast_fu_1477_p1, ap_block_pp2_stage0, ap_CS_fsm_state26)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            A_V_4_4_address0 <= tmp_24_cast_fu_1477_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            A_V_4_4_address0 <= A_V_4_4_addr_1_reg_1822;
        else 
            A_V_4_4_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    A_V_4_4_address1 <= tmp_10_cast_fu_1277_p1(10 - 1 downto 0);

    A_V_4_4_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            A_V_4_4_ce0 <= ap_const_logic_1;
        else 
            A_V_4_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_4_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_4_ce1 <= ap_const_logic_1;
        else 
            A_V_4_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_4_we1_assign_proc : process(ap_block_pp1_stage0_11001, k_mid2_reg_1705_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_4) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_4_we1 <= ap_const_logic_1;
        else 
            A_V_4_4_we1 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_4_5_address0 <= tmp_24_cast_fu_1477_p1(10 - 1 downto 0);
    A_V_4_5_address1 <= tmp_10_cast_fu_1277_p1(10 - 1 downto 0);

    A_V_4_5_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            A_V_4_5_ce0 <= ap_const_logic_1;
        else 
            A_V_4_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_5_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_5_ce1 <= ap_const_logic_1;
        else 
            A_V_4_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_5_we1_assign_proc : process(ap_block_pp1_stage0_11001, k_mid2_reg_1705_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_5) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_5_we1 <= ap_const_logic_1;
        else 
            A_V_4_5_we1 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_4_6_address0 <= tmp_24_cast_fu_1477_p1(10 - 1 downto 0);
    A_V_4_6_address1 <= tmp_10_cast_fu_1277_p1(10 - 1 downto 0);

    A_V_4_6_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            A_V_4_6_ce0 <= ap_const_logic_1;
        else 
            A_V_4_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_6_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_6_ce1 <= ap_const_logic_1;
        else 
            A_V_4_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_6_we1_assign_proc : process(ap_block_pp1_stage0_11001, k_mid2_reg_1705_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_6) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_6_we1 <= ap_const_logic_1;
        else 
            A_V_4_6_we1 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_4_7_address0 <= tmp_24_cast_fu_1477_p1(10 - 1 downto 0);
    A_V_4_7_address1 <= tmp_10_cast_fu_1277_p1(10 - 1 downto 0);

    A_V_4_7_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            A_V_4_7_ce0 <= ap_const_logic_1;
        else 
            A_V_4_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_7_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_7_ce1 <= ap_const_logic_1;
        else 
            A_V_4_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_7_we1_assign_proc : process(ap_block_pp1_stage0_11001, k_mid2_reg_1705_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_7) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_7_we1 <= ap_const_logic_1;
        else 
            A_V_4_7_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_8_address0_assign_proc : process(A_V_4_8_addr_1_reg_1827, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, tmp_24_cast_fu_1477_p1, ap_block_pp2_stage0, ap_CS_fsm_state26)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            A_V_4_8_address0 <= tmp_24_cast_fu_1477_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            A_V_4_8_address0 <= A_V_4_8_addr_1_reg_1827;
        else 
            A_V_4_8_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    A_V_4_8_address1 <= tmp_10_cast_fu_1277_p1(10 - 1 downto 0);

    A_V_4_8_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            A_V_4_8_ce0 <= ap_const_logic_1;
        else 
            A_V_4_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_8_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_8_ce1 <= ap_const_logic_1;
        else 
            A_V_4_8_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_8_we1_assign_proc : process(ap_block_pp1_stage0_11001, k_mid2_reg_1705_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_8) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_8_we1 <= ap_const_logic_1;
        else 
            A_V_4_8_we1 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_4_9_address0 <= tmp_24_cast_fu_1477_p1(10 - 1 downto 0);
    A_V_4_9_address1 <= tmp_10_cast_fu_1277_p1(10 - 1 downto 0);

    A_V_4_9_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            A_V_4_9_ce0 <= ap_const_logic_1;
        else 
            A_V_4_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_9_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_9_ce1 <= ap_const_logic_1;
        else 
            A_V_4_9_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_4_9_we1_assign_proc : process(ap_block_pp1_stage0_11001, k_mid2_reg_1705_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((k_mid2_reg_1705_pp1_iter2_reg = ap_const_lv5_9) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            A_V_4_9_we1 <= ap_const_logic_1;
        else 
            A_V_4_9_we1 <= ap_const_logic_0;
        end if; 
    end process;

        Outbuf_V_fu_1568_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_1_reg_1032),16));

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(14);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(17);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(24);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(18);
    ap_CS_fsm_state24 <= ap_CS_fsm(19);
    ap_CS_fsm_state25 <= ap_CS_fsm(20);
    ap_CS_fsm_state26 <= ap_CS_fsm(21);
    ap_CS_fsm_state27 <= ap_CS_fsm(22);
    ap_CS_fsm_state28 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state34 <= ap_CS_fsm(25);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n, ap_enable_reg_pp0_iter1, tmp_7_reg_1653)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((tmp_7_reg_1653 = ap_const_lv1_1) and (stream_out_V_V_full_n = ap_const_logic_0)) or ((tmp_7_reg_1653 = ap_const_lv1_1) and (stream_in_V_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n, ap_enable_reg_pp0_iter1, tmp_7_reg_1653)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((tmp_7_reg_1653 = ap_const_lv1_1) and (stream_out_V_V_full_n = ap_const_logic_0)) or ((tmp_7_reg_1653 = ap_const_lv1_1) and (stream_in_V_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n, ap_enable_reg_pp0_iter1, tmp_7_reg_1653)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((tmp_7_reg_1653 = ap_const_lv1_1) and (stream_out_V_V_full_n = ap_const_logic_0)) or ((tmp_7_reg_1653 = ap_const_lv1_1) and (stream_in_V_V_empty_n = ap_const_logic_0))));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(stream_in_V_V_empty_n, ap_enable_reg_pp1_iter2, exitcond_flatten1_reg_1671_pp1_iter1_reg)
    begin
                ap_block_pp1_stage0_11001 <= ((exitcond_flatten1_reg_1671_pp1_iter1_reg = ap_const_lv1_0) and (stream_in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(stream_in_V_V_empty_n, ap_enable_reg_pp1_iter2, exitcond_flatten1_reg_1671_pp1_iter1_reg)
    begin
                ap_block_pp1_stage0_subdone <= ((exitcond_flatten1_reg_1671_pp1_iter1_reg = ap_const_lv1_0) and (stream_in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, stream_in_V_V_empty_n, stream_out_V_V_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0));
    end process;

        ap_block_state15_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_pp0_stage0_iter1_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n, tmp_7_reg_1653)
    begin
                ap_block_state16_pp0_stage0_iter1 <= (((tmp_7_reg_1653 = ap_const_lv1_1) and (stream_out_V_V_full_n = ap_const_logic_0)) or ((tmp_7_reg_1653 = ap_const_lv1_1) and (stream_in_V_V_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state19_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n)
    begin
                ap_block_state2 <= ((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state20_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state21_pp1_stage0_iter2_assign_proc : process(stream_in_V_V_empty_n, exitcond_flatten1_reg_1671_pp1_iter1_reg)
    begin
                ap_block_state21_pp1_stage0_iter2 <= ((exitcond_flatten1_reg_1671_pp1_iter1_reg = ap_const_lv1_0) and (stream_in_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state22_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n)
    begin
                ap_block_state3 <= ((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state30_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n)
    begin
                ap_block_state4 <= ((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n)
    begin
                ap_block_state5 <= ((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state6_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n)
    begin
                ap_block_state6 <= ((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state7_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n)
    begin
                ap_block_state7 <= ((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_condition_498_assign_proc : process(ib_mid2_reg_1791)
    begin
                ap_condition_498 <= (not((ib_mid2_reg_1791 = ap_const_lv5_0)) and not((ib_mid2_reg_1791 = ap_const_lv5_4)) and not((ib_mid2_reg_1791 = ap_const_lv5_8)) and not((ib_mid2_reg_1791 = ap_const_lv5_C)) and not((ib_mid2_reg_1791 = ap_const_lv5_10)));
    end process;


    ap_condition_pp0_exit_iter0_state15_assign_proc : process(tmp_7_fu_1111_p2)
    begin
        if ((tmp_7_fu_1111_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state15 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state19_assign_proc : process(exitcond_flatten1_fu_1138_p2)
    begin
        if ((exitcond_flatten1_fu_1138_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state19 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state29_assign_proc : process(exitcond_fu_1433_p2)
    begin
        if ((exitcond_fu_1433_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state29 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state29 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i1_phi_fu_950_p4_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, exitcond_flatten1_reg_1671_pp1_iter1_reg, i1_reg_946, i_1_reg_1710)
    begin
        if (((exitcond_flatten1_reg_1671_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_i1_phi_fu_950_p4 <= i_1_reg_1710;
        else 
            ap_phi_mux_i1_phi_fu_950_p4 <= i1_reg_946;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_915_p4_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, exitcond_flatten1_reg_1671_pp1_iter1_reg, j_reg_911, tmp_8_mid2_v_reg_1693)
    begin
        if (((exitcond_flatten1_reg_1671_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_j_phi_fu_915_p4 <= tmp_8_mid2_v_reg_1693;
        else 
            ap_phi_mux_j_phi_fu_915_p4 <= j_reg_911;
        end if; 
    end process;


    ap_phi_mux_k_phi_fu_938_p4_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, exitcond_flatten1_reg_1671_pp1_iter1_reg, k_reg_934, k_mid2_reg_1705)
    begin
        if (((exitcond_flatten1_reg_1671_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_k_phi_fu_938_p4 <= k_mid2_reg_1705;
        else 
            ap_phi_mux_k_phi_fu_938_p4 <= k_reg_934;
        end if; 
    end process;


    ap_phi_mux_p_1_ph_phi_fu_1017_p12_assign_proc : process(reg_1058, ib_mid2_reg_1791, reg_1063, reg_1068, reg_1073, reg_1078, reg_1083, ap_CS_fsm_state28, ap_condition_498)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
            if ((ap_const_boolean_1 = ap_condition_498)) then 
                ap_phi_mux_p_1_ph_phi_fu_1017_p12 <= reg_1083;
            elsif ((ib_mid2_reg_1791 = ap_const_lv5_10)) then 
                ap_phi_mux_p_1_ph_phi_fu_1017_p12 <= reg_1058;
            elsif ((ib_mid2_reg_1791 = ap_const_lv5_C)) then 
                ap_phi_mux_p_1_ph_phi_fu_1017_p12 <= reg_1063;
            elsif ((ib_mid2_reg_1791 = ap_const_lv5_8)) then 
                ap_phi_mux_p_1_ph_phi_fu_1017_p12 <= reg_1068;
            elsif ((ib_mid2_reg_1791 = ap_const_lv5_4)) then 
                ap_phi_mux_p_1_ph_phi_fu_1017_p12 <= reg_1073;
            elsif ((ib_mid2_reg_1791 = ap_const_lv5_0)) then 
                ap_phi_mux_p_1_ph_phi_fu_1017_p12 <= reg_1078;
            else 
                ap_phi_mux_p_1_ph_phi_fu_1017_p12 <= "XXXXXXXX";
            end if;
        else 
            ap_phi_mux_p_1_ph_phi_fu_1017_p12 <= "XXXXXXXX";
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    buf_V_fu_1561_p3 <= 
        p_1_reg_1032 when (tmp_i_fu_1556_p2(0) = '1') else 
        tmp_17_reg_2061;
    exitcond1_fu_1195_p2 <= "1" when (ap_phi_mux_i1_phi_fu_950_p4 = ap_const_lv6_20) else "0";
    exitcond2_fu_1350_p2 <= "1" when (i2_reg_1003 = ap_const_lv6_20) else "0";
    exitcond3_mid_fu_1201_p2 <= (not_exitcond_flatten_fu_1190_p2 and exitcond1_fu_1195_p2);
    exitcond4_mid_fu_1356_p2 <= (not_exitcond_flatten_2_fu_1344_p2 and exitcond2_fu_1350_p2);
    exitcond_flatten1_fu_1138_p2 <= "1" when (indvar_flatten1_reg_900 = ap_const_lv15_4800) else "0";
    exitcond_flatten2_fu_1322_p2 <= "1" when (indvar_flatten3_reg_980 = ap_const_lv9_C0) else "0";
    exitcond_flatten3_fu_1304_p2 <= "1" when (indvar_flatten2_reg_958 = ap_const_lv11_480) else "0";
    exitcond_flatten_fu_1150_p2 <= "1" when (indvar_flatten_reg_923 = ap_const_lv11_300) else "0";
    exitcond_fu_1433_p2 <= "1" when (k3_reg_1043 = ap_const_lv5_10) else "0";

    grp_fu_1591_ce_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            grp_fu_1591_ce <= ap_const_logic_1;
        else 
            grp_fu_1591_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1591_p0 <= tmp_4_fu_1100_p1(16 - 1 downto 0);
    grp_fu_1591_p1 <= tmp_4_fu_1100_p1(16 - 1 downto 0);

    grp_fu_1597_ce_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            grp_fu_1597_ce <= ap_const_logic_1;
        else 
            grp_fu_1597_ce <= ap_const_logic_0;
        end if; 
    end process;

    i1_mid2_fu_1218_p3 <= 
        ap_const_lv6_0 when (tmp_2_fu_1213_p2(0) = '1') else 
        ap_phi_mux_i1_phi_fu_950_p4;
    i2_mid2_fu_1368_p3 <= 
        ap_const_lv6_0 when (tmp_11_fu_1362_p2(0) = '1') else 
        i2_reg_1003;
    i4_cast_fu_1107_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_reg_878),32));
    i_1_fu_1234_p2 <= std_logic_vector(unsigned(i1_mid2_fu_1218_p3) + unsigned(ap_const_lv6_1));
    i_2_fu_1573_p2 <= std_logic_vector(unsigned(i2_mid2_reg_1779) + unsigned(ap_const_lv6_1));
    i_fu_1116_p2 <= std_logic_vector(unsigned(i4_reg_878) + unsigned(ap_const_lv31_1));
    ia_1_fu_1316_p2 <= std_logic_vector(unsigned(ia_reg_969) + unsigned(ap_const_lv5_4));
    ia_cast_cast_mid2_fu_1376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ia_cast_cast_mid2_v_reg_1767),6));
    ia_cast_cast_mid2_v_fu_1336_p3 <= 
        ia_1_fu_1316_p2 when (exitcond_flatten2_fu_1322_p2(0) = '1') else 
        ia_reg_969;
    ib_1_fu_1382_p2 <= std_logic_vector(unsigned(ib_mid_reg_1761) + unsigned(ap_const_lv5_4));
    ib_mid2_fu_1387_p3 <= 
        ib_1_fu_1382_p2 when (exitcond4_mid_reg_1774(0) = '1') else 
        ib_mid_reg_1761;
    ib_mid_fu_1328_p3 <= 
        ap_const_lv5_0 when (exitcond_flatten2_fu_1322_p2(0) = '1') else 
        ib_reg_992;
    indvar_flatten18_op_fu_1578_p2 <= std_logic_vector(unsigned(indvar_flatten3_reg_980) + unsigned(ap_const_lv9_1));
    indvar_flatten_next1_fu_1144_p2 <= std_logic_vector(unsigned(indvar_flatten1_reg_900) + unsigned(ap_const_lv15_1));
    indvar_flatten_next2_fu_1584_p3 <= 
        ap_const_lv9_1 when (exitcond_flatten2_reg_1756(0) = '1') else 
        indvar_flatten18_op_fu_1578_p2;
    indvar_flatten_next3_fu_1310_p2 <= std_logic_vector(unsigned(indvar_flatten2_reg_958) + unsigned(ap_const_lv11_1));
    indvar_flatten_next_fu_1162_p3 <= 
        ap_const_lv11_1 when (exitcond_flatten_fu_1150_p2(0) = '1') else 
        indvar_flatten_op_fu_1156_p2;
    indvar_flatten_op_fu_1156_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_923) + unsigned(ap_const_lv11_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_1170_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_j_phi_fu_915_p4));
    k_1_fu_1207_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(k_mid_fu_1176_p3));
    k_2_fu_1471_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(k3_reg_1043));
    k_mid2_fu_1226_p3 <= 
        k_1_fu_1207_p2 when (exitcond3_mid_fu_1201_p2(0) = '1') else 
        k_mid_fu_1176_p3;
    k_mid_fu_1176_p3 <= 
        ap_const_lv5_0 when (exitcond_flatten_reg_1680(0) = '1') else 
        ap_phi_mux_k_phi_fu_938_p4;
    not_exitcond_flatten_2_fu_1344_p2 <= (exitcond_flatten2_fu_1322_p2 xor ap_const_lv1_1);
    not_exitcond_flatten_fu_1190_p2 <= (exitcond_flatten_reg_1680 xor ap_const_lv1_1);
    num_img_1_fu_1132_p2 <= std_logic_vector(unsigned(num_img_reg_889) + unsigned(ap_const_lv15_1));
    num_img_cast_fu_1122_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(num_img_reg_889),16));
    p_shl1_cast_fu_1257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_1250_p3),11));
    p_shl3_cast_fu_1407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_1400_p3),11));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, stream_in_V_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, exitcond_flatten1_reg_1671_pp1_iter1_reg, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_7_reg_1653)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_7_reg_1653 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((exitcond_flatten1_reg_1671_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            stream_in_V_V_blk_n <= stream_in_V_V_empty_n;
        else 
            stream_in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_in_V_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, stream_in_V_V_empty_n, stream_out_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_enable_reg_pp1_iter2, exitcond_flatten1_reg_1671_pp1_iter1_reg, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_7_reg_1653, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001)
    begin
        if (((not(((ap_done_reg = ap_const_logic_1) or (stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_7_reg_1653 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten1_reg_1671_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            stream_in_V_V_read <= ap_const_logic_1;
        else 
            stream_in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    stream_out_V_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, stream_out_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_7_reg_1653, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_7_reg_1653 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            stream_out_V_V_blk_n <= stream_out_V_V_full_n;
        else 
            stream_out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_out_V_V_din_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, stream_in_V_V_dout, stream_in_V_V_empty_n, stream_out_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_7_reg_1653, ap_CS_fsm_state34, ap_block_pp0_stage0_01001, Outbuf_V_fu_1568_p1)
    begin
        if (((stream_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            stream_out_V_V_din <= Outbuf_V_fu_1568_p1;
        elsif (((not(((ap_done_reg = ap_const_logic_1) or (stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (tmp_7_reg_1653 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            stream_out_V_V_din <= stream_in_V_V_dout;
        else 
            stream_out_V_V_din <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stream_out_V_V_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, stream_in_V_V_empty_n, stream_out_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_7_reg_1653, ap_CS_fsm_state34, ap_block_pp0_stage0_11001)
    begin
        if (((not(((ap_done_reg = ap_const_logic_1) or (stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((stream_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_7_reg_1653 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            stream_out_V_V_write <= ap_const_logic_1;
        else 
            stream_out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

        tmp_10_cast_fu_1277_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_reg_1715),64));

    tmp_10_fu_1267_p2 <= std_logic_vector(unsigned(tmp_8_mid2_cast_fu_1240_p1) + unsigned(tmp_9_fu_1261_p2));
    tmp_11_fu_1362_p2 <= (exitcond_flatten2_fu_1322_p2 or exitcond4_mid_fu_1356_p2);
    tmp_13_fu_1273_p1 <= stream_in_V_V_dout(8 - 1 downto 0);
    tmp_14_fu_1457_p2 <= std_logic_vector(unsigned(tmp_19_cast_cast_fu_1453_p1) + unsigned(ia_cast_cast_mid2_reg_1786));
    tmp_15_cast_fu_1462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_1457_p2),11));
    tmp_15_fu_1393_p3 <= (i2_mid2_reg_1779 & ap_const_lv5_0);
    tmp_16_fu_1504_p4 <= ib_mid2_reg_1791(4 downto 2);
    tmp_17_fu_1520_p25 <= (tmp_16_fu_1504_p4 & tmp_21_reg_1836_pp2_iter2_reg);
    tmp_18_fu_1400_p3 <= (i2_mid2_reg_1779 & ap_const_lv3_0);
    tmp_19_cast_cast_fu_1453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_1443_p4),6));
    tmp_19_fu_1411_p2 <= std_logic_vector(unsigned(tmp_15_fu_1393_p3) - unsigned(p_shl3_cast_fu_1407_p1));
    tmp_20_fu_1417_p2 <= std_logic_vector(unsigned(tmp_19_fu_1411_p2) + unsigned(tmp_2_mid2_cast_fu_1379_p1));
        tmp_21_cast_fu_1423_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_20_fu_1417_p2),64));

    tmp_21_fu_1439_p1 <= k3_reg_1043(2 - 1 downto 0);
    tmp_22_fu_1443_p4 <= k3_reg_1043(4 downto 2);
    tmp_23_fu_1466_p2 <= std_logic_vector(unsigned(tmp_19_reg_1797) + unsigned(tmp_15_cast_fu_1462_p1));
        tmp_24_cast_fu_1477_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_23_reg_1841),64));

    tmp_2_fu_1213_p2 <= (exitcond_flatten_reg_1680 or exitcond3_mid_fu_1201_p2);
    tmp_2_mid2_cast_fu_1379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ia_cast_cast_mid2_v_reg_1767),11));
    tmp_3_fu_1243_p3 <= (i1_mid2_reg_1699 & ap_const_lv5_0);
        tmp_4_fu_1100_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_4_reg_1607),32));

    tmp_6_fu_1126_p2 <= "1" when (signed(num_img_cast_fu_1122_p1) < signed(reg_1054)) else "0";
    tmp_7_fu_1111_p2 <= "1" when (signed(i4_cast_fu_1107_p1) < signed(KER_bound_reg_1648)) else "0";
    tmp_8_fu_1250_p3 <= (i1_mid2_reg_1699 & ap_const_lv3_0);
    tmp_8_mid2_cast_fu_1240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_mid2_v_reg_1693),11));
    tmp_8_mid2_v_fu_1183_p3 <= 
        j_1_fu_1170_p2 when (exitcond_flatten_reg_1680(0) = '1') else 
        ap_phi_mux_j_phi_fu_915_p4;
    tmp_9_fu_1261_p2 <= std_logic_vector(unsigned(tmp_3_fu_1243_p3) - unsigned(p_shl1_cast_fu_1257_p1));
    tmp_i_fu_1556_p2 <= "1" when (signed(p_1_reg_1032) > signed(tmp_17_reg_2061)) else "0";
    tmp_s_fu_1088_p2 <= "1" when (reg_1054 = ap_const_lv16_0) else "0";
end behav;
