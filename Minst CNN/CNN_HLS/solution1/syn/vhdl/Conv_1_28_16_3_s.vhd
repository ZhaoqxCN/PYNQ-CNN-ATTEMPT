-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv_1_28_16_3_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    stream_in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    stream_in_V_V_empty_n : IN STD_LOGIC;
    stream_in_V_V_read : OUT STD_LOGIC;
    stream_out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    stream_out_V_V_full_n : IN STD_LOGIC;
    stream_out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of Conv_1_28_16_3_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000010000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000010000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000100000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (32 downto 0) := "000000000001000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (32 downto 0) := "000000000010000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (32 downto 0) := "000000000100000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (32 downto 0) := "000000001000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (32 downto 0) := "000000010000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (32 downto 0) := "000000100000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (32 downto 0) := "000001000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (32 downto 0) := "000010000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (32 downto 0) := "000100000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (32 downto 0) := "001000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (32 downto 0) := "010000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (32 downto 0) := "100000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_90 : STD_LOGIC_VECTOR (7 downto 0) := "10010000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal A_V_0_ce0 : STD_LOGIC;
    signal A_V_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_0_ce1 : STD_LOGIC;
    signal A_V_0_we1 : STD_LOGIC;
    signal A_V_188_ce0 : STD_LOGIC;
    signal A_V_188_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_188_ce1 : STD_LOGIC;
    signal A_V_188_we1 : STD_LOGIC;
    signal A_V_289_ce0 : STD_LOGIC;
    signal A_V_289_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_289_ce1 : STD_LOGIC;
    signal A_V_289_we1 : STD_LOGIC;
    signal A_V_390_ce0 : STD_LOGIC;
    signal A_V_390_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_390_ce1 : STD_LOGIC;
    signal A_V_390_we1 : STD_LOGIC;
    signal A_V_491_ce0 : STD_LOGIC;
    signal A_V_491_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_491_ce1 : STD_LOGIC;
    signal A_V_491_we1 : STD_LOGIC;
    signal A_V_5_ce0 : STD_LOGIC;
    signal A_V_5_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_5_ce1 : STD_LOGIC;
    signal A_V_5_we1 : STD_LOGIC;
    signal A_V_6_ce0 : STD_LOGIC;
    signal A_V_6_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_6_ce1 : STD_LOGIC;
    signal A_V_6_we1 : STD_LOGIC;
    signal A_V_7_ce0 : STD_LOGIC;
    signal A_V_7_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_7_ce1 : STD_LOGIC;
    signal A_V_7_we1 : STD_LOGIC;
    signal A_V_8_ce0 : STD_LOGIC;
    signal A_V_8_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_8_ce1 : STD_LOGIC;
    signal A_V_8_we1 : STD_LOGIC;
    signal A_V_9_ce0 : STD_LOGIC;
    signal A_V_9_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_9_ce1 : STD_LOGIC;
    signal A_V_9_we1 : STD_LOGIC;
    signal A_V_10_ce0 : STD_LOGIC;
    signal A_V_10_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_10_ce1 : STD_LOGIC;
    signal A_V_10_we1 : STD_LOGIC;
    signal A_V_11_ce0 : STD_LOGIC;
    signal A_V_11_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_11_ce1 : STD_LOGIC;
    signal A_V_11_we1 : STD_LOGIC;
    signal A_V_12_ce0 : STD_LOGIC;
    signal A_V_12_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_12_ce1 : STD_LOGIC;
    signal A_V_12_we1 : STD_LOGIC;
    signal A_V_13_ce0 : STD_LOGIC;
    signal A_V_13_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_13_ce1 : STD_LOGIC;
    signal A_V_13_we1 : STD_LOGIC;
    signal A_V_14_ce0 : STD_LOGIC;
    signal A_V_14_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_14_ce1 : STD_LOGIC;
    signal A_V_14_we1 : STD_LOGIC;
    signal A_V_15_ce0 : STD_LOGIC;
    signal A_V_15_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_15_ce1 : STD_LOGIC;
    signal A_V_15_we1 : STD_LOGIC;
    signal A_V_16_ce0 : STD_LOGIC;
    signal A_V_16_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_16_ce1 : STD_LOGIC;
    signal A_V_16_we1 : STD_LOGIC;
    signal A_V_17_ce0 : STD_LOGIC;
    signal A_V_17_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_17_ce1 : STD_LOGIC;
    signal A_V_17_we1 : STD_LOGIC;
    signal A_V_18_ce0 : STD_LOGIC;
    signal A_V_18_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_18_ce1 : STD_LOGIC;
    signal A_V_18_we1 : STD_LOGIC;
    signal A_V_19_ce0 : STD_LOGIC;
    signal A_V_19_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_19_ce1 : STD_LOGIC;
    signal A_V_19_we1 : STD_LOGIC;
    signal A_V_20_ce0 : STD_LOGIC;
    signal A_V_20_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_20_ce1 : STD_LOGIC;
    signal A_V_20_we1 : STD_LOGIC;
    signal A_V_21_ce0 : STD_LOGIC;
    signal A_V_21_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_21_ce1 : STD_LOGIC;
    signal A_V_21_we1 : STD_LOGIC;
    signal A_V_22_ce0 : STD_LOGIC;
    signal A_V_22_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_22_ce1 : STD_LOGIC;
    signal A_V_22_we1 : STD_LOGIC;
    signal A_V_23_ce0 : STD_LOGIC;
    signal A_V_23_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_23_ce1 : STD_LOGIC;
    signal A_V_23_we1 : STD_LOGIC;
    signal A_V_24_ce0 : STD_LOGIC;
    signal A_V_24_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_24_ce1 : STD_LOGIC;
    signal A_V_24_we1 : STD_LOGIC;
    signal A_V_25_ce0 : STD_LOGIC;
    signal A_V_25_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_25_ce1 : STD_LOGIC;
    signal A_V_25_we1 : STD_LOGIC;
    signal A_V_26_ce0 : STD_LOGIC;
    signal A_V_26_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_26_ce1 : STD_LOGIC;
    signal A_V_26_we1 : STD_LOGIC;
    signal A_V_27_ce0 : STD_LOGIC;
    signal A_V_27_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_27_ce1 : STD_LOGIC;
    signal A_V_27_we1 : STD_LOGIC;
    signal B_V_0_ce0 : STD_LOGIC;
    signal B_V_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_V_0_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal B_V_0_ce1 : STD_LOGIC;
    signal B_V_0_we1 : STD_LOGIC;
    signal B_V_192_ce0 : STD_LOGIC;
    signal B_V_192_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_V_192_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal B_V_192_ce1 : STD_LOGIC;
    signal B_V_192_we1 : STD_LOGIC;
    signal B_V_293_ce0 : STD_LOGIC;
    signal B_V_293_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_V_293_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal B_V_293_ce1 : STD_LOGIC;
    signal B_V_293_we1 : STD_LOGIC;
    signal stream_in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond_flatten_reg_2422 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_2422_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal exitcond6_fu_1286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_68_reg_1845 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal exitcond1_fu_1360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i7_reg_1004 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten2_reg_1131 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_1142 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_1154 : STD_LOGIC_VECTOR (3 downto 0);
    signal ka_reg_1165 : STD_LOGIC_VECTOR (2 downto 0);
    signal kb_reg_1177 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_V_reg_1780 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_V_76_reg_1786 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_V_78_reg_1791 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal tmp_V_80_reg_1796 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal tmp_V_84_reg_1801 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state6 : BOOLEAN;
    signal tmp_s_fu_1189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state7 : BOOLEAN;
    signal tmp_62_fu_1194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_fu_1205_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1768_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_1830 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_1774_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_reg_1835 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal KER_bound_reg_1840 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_68_fu_1216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state15_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_s_fu_1221_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal num_img_1_fu_1236_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal num_img_1_reg_1857 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal j_fu_1248_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_1865 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal A_V_0_addr_reg_1870 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond3_fu_1242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_V_10_addr_reg_1875 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_11_addr_reg_1880 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_12_addr_reg_1885 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_13_addr_reg_1890 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_14_addr_reg_1895 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_15_addr_reg_1900 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_16_addr_reg_1905 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_17_addr_reg_1910 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_18_addr_reg_1915 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_188_addr_reg_1920 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_19_addr_reg_1925 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_20_addr_reg_1930 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_21_addr_reg_1935 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_22_addr_reg_1940 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_23_addr_reg_1945 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_24_addr_reg_1950 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_25_addr_reg_1955 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_26_addr_reg_1960 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_27_addr_reg_1965 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_289_addr_reg_1970 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_390_addr_reg_1975 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_491_addr_reg_1980 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_5_addr_reg_1985 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_6_addr_reg_1990 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_7_addr_reg_1995 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_8_addr_reg_2000 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_9_addr_reg_2005 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_4_fu_1292_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_4_reg_2013 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state20 : BOOLEAN;
    signal tmp_139_fu_1298_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_139_reg_2018 : STD_LOGIC_VECTOR (7 downto 0);
    signal ia_3_fu_1314_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal exitcond5_fu_1308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_1326_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_2064 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_141_fu_1344_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_141_reg_2069 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond7_fu_1320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ib_3_fu_1350_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ka_4_fu_1366_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ka_4_reg_2082 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state26 : BOOLEAN;
    signal A_V_0_addr_1_reg_2087 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_10_addr_1_reg_2092 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_11_addr_1_reg_2097 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_12_addr_1_reg_2102 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_13_addr_1_reg_2107 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_14_addr_1_reg_2112 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_15_addr_1_reg_2117 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_16_addr_1_reg_2122 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_17_addr_1_reg_2127 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_18_addr_1_reg_2132 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_188_addr_1_reg_2137 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_19_addr_1_reg_2142 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_20_addr_1_reg_2147 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_21_addr_1_reg_2152 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_22_addr_1_reg_2157 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_23_addr_1_reg_2162 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_24_addr_1_reg_2167 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_25_addr_1_reg_2172 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_26_addr_1_reg_2177 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_27_addr_1_reg_2182 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_289_addr_1_reg_2187 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_390_addr_1_reg_2192 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_491_addr_1_reg_2197 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_5_addr_1_reg_2202 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_6_addr_1_reg_2207 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_7_addr_1_reg_2212 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_8_addr_1_reg_2217 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_V_9_addr_1_reg_2222 : STD_LOGIC_VECTOR (4 downto 0);
    signal B_V_0_addr_1_reg_2227 : STD_LOGIC_VECTOR (5 downto 0);
    signal B_V_192_addr_1_reg_2232 : STD_LOGIC_VECTOR (5 downto 0);
    signal B_V_293_addr_1_reg_2237 : STD_LOGIC_VECTOR (5 downto 0);
    signal kb_4_fu_1467_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal kb_4_reg_2245 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal tmp_120_0_t_fu_1487_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_120_0_t_reg_2250 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal A_V_0_load_reg_2255 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_188_load_reg_2260 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_289_load_reg_2265 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_390_load_reg_2270 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_491_load_reg_2275 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_5_load_reg_2280 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_6_load_reg_2285 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_7_load_reg_2290 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_8_load_reg_2295 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_9_load_reg_2300 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_10_load_reg_2305 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_11_load_reg_2310 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_12_load_reg_2315 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_13_load_reg_2320 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_14_load_reg_2325 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_15_load_reg_2330 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_16_load_reg_2335 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_17_load_reg_2340 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_18_load_reg_2345 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_19_load_reg_2350 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_20_load_reg_2355 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_21_load_reg_2360 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_22_load_reg_2365 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_23_load_reg_2370 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_24_load_reg_2375 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_25_load_reg_2380 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_26_load_reg_2385 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_V_27_load_reg_2390 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_fu_1493_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_reg_2395 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_fu_1505_p30 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_reg_2400 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal r_V_4_fu_1544_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_4_reg_2405 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal tmp_129_reg_2412 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal buf_V_fu_1598_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal exitcond_flatten_fu_1604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state33_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state34_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state35_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state36_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next1_fu_1610_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal exitcond_flatten10_fu_1616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten10_reg_2431 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_1628_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_63_mid2_v_fu_1656_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_63_mid2_v_reg_2445 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal kb_mid2_fu_1699_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal kb_mid2_reg_2452 : STD_LOGIC_VECTOR (2 downto 0);
    signal ka_0_t_mid2_fu_1711_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ka_0_t_mid2_reg_2457 : STD_LOGIC_VECTOR (1 downto 0);
    signal ka_0_t_mid2_reg_2457_pp1_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal ka_mid2_fu_1719_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ka_mid2_reg_2461 : STD_LOGIC_VECTOR (2 downto 0);
    signal kb_3_fu_1727_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal kb_3_reg_2466 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_134_fu_1752_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_134_reg_2471 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_138_fu_1758_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_138_reg_2476 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state15 : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state33 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal num_img_reg_1015 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal exitcond4_fu_1302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j1_reg_1026 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_67_fu_1231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_k_phi_fu_1041_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_reg_1037 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ia_reg_1049 : STD_LOGIC_VECTOR (4 downto 0);
    signal ib_reg_1061 : STD_LOGIC_VECTOR (4 downto 0);
    signal i3_reg_1073 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_0144_1_reg_1084 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond8_fu_1461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ka5_reg_1096 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_0144_2_reg_1107 : STD_LOGIC_VECTOR (7 downto 0);
    signal kb6_reg_1119 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_i_phi_fu_1146_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_ka_phi_fu_1169_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_kb_phi_fu_1181_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_69_fu_1254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_117_fu_1388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_145_cast_fu_1429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_142_cast_fu_1762_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state5 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal Outbuf_V_fu_1456_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i7_cast_fu_1212_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_img_cast_fu_1227_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_140_fu_1336_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_70_cast_fu_1332_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ka5_cast_cast_fu_1356_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp1_fu_1372_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp1_cast_fu_1378_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_116_fu_1382_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_118_cast_fu_1420_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_144_fu_1424_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_143_fu_1440_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_142_fu_1436_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal x_V_y_V_i_fu_1448_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_131_cast_fu_1473_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp2_fu_1477_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp2_cast_fu_1483_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_4_fu_1544_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_4_fu_1544_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_123_tr_s_fu_1550_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_neg_fu_1553_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_145_fu_1569_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_130_fu_1576_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_131_fu_1581_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_132_fu_1590_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_op_fu_1622_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_fu_1636_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_135_fu_1663_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_136_fu_1674_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_1682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ka_mid_fu_1642_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_109_mid_fu_1688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kb_mid_fu_1649_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ka_3_fu_1693_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ka_0_t_mid_fu_1667_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_137_fu_1707_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_128_fu_1736_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_63_mid2_cast_fu_1733_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_133_fu_1743_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_111_cast_fu_1749_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1768_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1768_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1768_ce : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_1774_ce : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component cnn_mul_32s_32s_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_mux_32_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cnn_mux_285_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (7 downto 0);
        din17 : IN STD_LOGIC_VECTOR (7 downto 0);
        din18 : IN STD_LOGIC_VECTOR (7 downto 0);
        din19 : IN STD_LOGIC_VECTOR (7 downto 0);
        din20 : IN STD_LOGIC_VECTOR (7 downto 0);
        din21 : IN STD_LOGIC_VECTOR (7 downto 0);
        din22 : IN STD_LOGIC_VECTOR (7 downto 0);
        din23 : IN STD_LOGIC_VECTOR (7 downto 0);
        din24 : IN STD_LOGIC_VECTOR (7 downto 0);
        din25 : IN STD_LOGIC_VECTOR (7 downto 0);
        din26 : IN STD_LOGIC_VECTOR (7 downto 0);
        din27 : IN STD_LOGIC_VECTOR (7 downto 0);
        din28 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cnn_mul_mul_16s_1cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_1_28_16_3_s_dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv_1_28_16_3_s_Ffa IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    A_V_0_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_0_addr_1_reg_2087,
        ce0 => A_V_0_ce0,
        q0 => A_V_0_q0,
        address1 => A_V_0_addr_reg_1870,
        ce1 => A_V_0_ce1,
        we1 => A_V_0_we1,
        d1 => tmp_139_reg_2018);

    A_V_188_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_188_addr_1_reg_2137,
        ce0 => A_V_188_ce0,
        q0 => A_V_188_q0,
        address1 => A_V_188_addr_reg_1920,
        ce1 => A_V_188_ce1,
        we1 => A_V_188_we1,
        d1 => tmp_139_reg_2018);

    A_V_289_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_289_addr_1_reg_2187,
        ce0 => A_V_289_ce0,
        q0 => A_V_289_q0,
        address1 => A_V_289_addr_reg_1970,
        ce1 => A_V_289_ce1,
        we1 => A_V_289_we1,
        d1 => tmp_139_reg_2018);

    A_V_390_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_390_addr_1_reg_2192,
        ce0 => A_V_390_ce0,
        q0 => A_V_390_q0,
        address1 => A_V_390_addr_reg_1975,
        ce1 => A_V_390_ce1,
        we1 => A_V_390_we1,
        d1 => tmp_139_reg_2018);

    A_V_491_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_491_addr_1_reg_2197,
        ce0 => A_V_491_ce0,
        q0 => A_V_491_q0,
        address1 => A_V_491_addr_reg_1980,
        ce1 => A_V_491_ce1,
        we1 => A_V_491_we1,
        d1 => tmp_139_reg_2018);

    A_V_5_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_5_addr_1_reg_2202,
        ce0 => A_V_5_ce0,
        q0 => A_V_5_q0,
        address1 => A_V_5_addr_reg_1985,
        ce1 => A_V_5_ce1,
        we1 => A_V_5_we1,
        d1 => tmp_139_reg_2018);

    A_V_6_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_6_addr_1_reg_2207,
        ce0 => A_V_6_ce0,
        q0 => A_V_6_q0,
        address1 => A_V_6_addr_reg_1990,
        ce1 => A_V_6_ce1,
        we1 => A_V_6_we1,
        d1 => tmp_139_reg_2018);

    A_V_7_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_7_addr_1_reg_2212,
        ce0 => A_V_7_ce0,
        q0 => A_V_7_q0,
        address1 => A_V_7_addr_reg_1995,
        ce1 => A_V_7_ce1,
        we1 => A_V_7_we1,
        d1 => tmp_139_reg_2018);

    A_V_8_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_8_addr_1_reg_2217,
        ce0 => A_V_8_ce0,
        q0 => A_V_8_q0,
        address1 => A_V_8_addr_reg_2000,
        ce1 => A_V_8_ce1,
        we1 => A_V_8_we1,
        d1 => tmp_139_reg_2018);

    A_V_9_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_9_addr_1_reg_2222,
        ce0 => A_V_9_ce0,
        q0 => A_V_9_q0,
        address1 => A_V_9_addr_reg_2005,
        ce1 => A_V_9_ce1,
        we1 => A_V_9_we1,
        d1 => tmp_139_reg_2018);

    A_V_10_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_10_addr_1_reg_2092,
        ce0 => A_V_10_ce0,
        q0 => A_V_10_q0,
        address1 => A_V_10_addr_reg_1875,
        ce1 => A_V_10_ce1,
        we1 => A_V_10_we1,
        d1 => tmp_139_reg_2018);

    A_V_11_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_11_addr_1_reg_2097,
        ce0 => A_V_11_ce0,
        q0 => A_V_11_q0,
        address1 => A_V_11_addr_reg_1880,
        ce1 => A_V_11_ce1,
        we1 => A_V_11_we1,
        d1 => tmp_139_reg_2018);

    A_V_12_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_12_addr_1_reg_2102,
        ce0 => A_V_12_ce0,
        q0 => A_V_12_q0,
        address1 => A_V_12_addr_reg_1885,
        ce1 => A_V_12_ce1,
        we1 => A_V_12_we1,
        d1 => tmp_139_reg_2018);

    A_V_13_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_13_addr_1_reg_2107,
        ce0 => A_V_13_ce0,
        q0 => A_V_13_q0,
        address1 => A_V_13_addr_reg_1890,
        ce1 => A_V_13_ce1,
        we1 => A_V_13_we1,
        d1 => tmp_139_reg_2018);

    A_V_14_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_14_addr_1_reg_2112,
        ce0 => A_V_14_ce0,
        q0 => A_V_14_q0,
        address1 => A_V_14_addr_reg_1895,
        ce1 => A_V_14_ce1,
        we1 => A_V_14_we1,
        d1 => tmp_139_reg_2018);

    A_V_15_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_15_addr_1_reg_2117,
        ce0 => A_V_15_ce0,
        q0 => A_V_15_q0,
        address1 => A_V_15_addr_reg_1900,
        ce1 => A_V_15_ce1,
        we1 => A_V_15_we1,
        d1 => tmp_139_reg_2018);

    A_V_16_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_16_addr_1_reg_2122,
        ce0 => A_V_16_ce0,
        q0 => A_V_16_q0,
        address1 => A_V_16_addr_reg_1905,
        ce1 => A_V_16_ce1,
        we1 => A_V_16_we1,
        d1 => tmp_139_reg_2018);

    A_V_17_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_17_addr_1_reg_2127,
        ce0 => A_V_17_ce0,
        q0 => A_V_17_q0,
        address1 => A_V_17_addr_reg_1910,
        ce1 => A_V_17_ce1,
        we1 => A_V_17_we1,
        d1 => tmp_139_reg_2018);

    A_V_18_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_18_addr_1_reg_2132,
        ce0 => A_V_18_ce0,
        q0 => A_V_18_q0,
        address1 => A_V_18_addr_reg_1915,
        ce1 => A_V_18_ce1,
        we1 => A_V_18_we1,
        d1 => tmp_139_reg_2018);

    A_V_19_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_19_addr_1_reg_2142,
        ce0 => A_V_19_ce0,
        q0 => A_V_19_q0,
        address1 => A_V_19_addr_reg_1925,
        ce1 => A_V_19_ce1,
        we1 => A_V_19_we1,
        d1 => tmp_139_reg_2018);

    A_V_20_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_20_addr_1_reg_2147,
        ce0 => A_V_20_ce0,
        q0 => A_V_20_q0,
        address1 => A_V_20_addr_reg_1930,
        ce1 => A_V_20_ce1,
        we1 => A_V_20_we1,
        d1 => tmp_139_reg_2018);

    A_V_21_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_21_addr_1_reg_2152,
        ce0 => A_V_21_ce0,
        q0 => A_V_21_q0,
        address1 => A_V_21_addr_reg_1935,
        ce1 => A_V_21_ce1,
        we1 => A_V_21_we1,
        d1 => tmp_139_reg_2018);

    A_V_22_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_22_addr_1_reg_2157,
        ce0 => A_V_22_ce0,
        q0 => A_V_22_q0,
        address1 => A_V_22_addr_reg_1940,
        ce1 => A_V_22_ce1,
        we1 => A_V_22_we1,
        d1 => tmp_139_reg_2018);

    A_V_23_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_23_addr_1_reg_2162,
        ce0 => A_V_23_ce0,
        q0 => A_V_23_q0,
        address1 => A_V_23_addr_reg_1945,
        ce1 => A_V_23_ce1,
        we1 => A_V_23_we1,
        d1 => tmp_139_reg_2018);

    A_V_24_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_24_addr_1_reg_2167,
        ce0 => A_V_24_ce0,
        q0 => A_V_24_q0,
        address1 => A_V_24_addr_reg_1950,
        ce1 => A_V_24_ce1,
        we1 => A_V_24_we1,
        d1 => tmp_139_reg_2018);

    A_V_25_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_25_addr_1_reg_2172,
        ce0 => A_V_25_ce0,
        q0 => A_V_25_q0,
        address1 => A_V_25_addr_reg_1955,
        ce1 => A_V_25_ce1,
        we1 => A_V_25_we1,
        d1 => tmp_139_reg_2018);

    A_V_26_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_26_addr_1_reg_2177,
        ce0 => A_V_26_ce0,
        q0 => A_V_26_q0,
        address1 => A_V_26_addr_reg_1960,
        ce1 => A_V_26_ce1,
        we1 => A_V_26_we1,
        d1 => tmp_139_reg_2018);

    A_V_27_U : component Conv_1_28_16_3_s_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_V_27_addr_1_reg_2182,
        ce0 => A_V_27_ce0,
        q0 => A_V_27_q0,
        address1 => A_V_27_addr_reg_1965,
        ce1 => A_V_27_ce1,
        we1 => A_V_27_we1,
        d1 => tmp_139_reg_2018);

    B_V_0_U : component Conv_1_28_16_3_s_Ffa
    generic map (
        DataWidth => 8,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_V_0_addr_1_reg_2227,
        ce0 => B_V_0_ce0,
        q0 => B_V_0_q0,
        address1 => B_V_0_address1,
        ce1 => B_V_0_ce1,
        we1 => B_V_0_we1,
        d1 => tmp_138_reg_2476);

    B_V_192_U : component Conv_1_28_16_3_s_Ffa
    generic map (
        DataWidth => 8,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_V_192_addr_1_reg_2232,
        ce0 => B_V_192_ce0,
        q0 => B_V_192_q0,
        address1 => B_V_192_address1,
        ce1 => B_V_192_ce1,
        we1 => B_V_192_we1,
        d1 => tmp_138_reg_2476);

    B_V_293_U : component Conv_1_28_16_3_s_Ffa
    generic map (
        DataWidth => 8,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_V_293_addr_1_reg_2237,
        ce0 => B_V_293_ce0,
        q0 => B_V_293_q0,
        address1 => B_V_293_address1,
        ce1 => B_V_293_ce1,
        we1 => B_V_293_we1,
        d1 => tmp_138_reg_2476);

    cnn_mul_32s_32s_3bkb_U12 : component cnn_mul_32s_32s_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp4_reg_1835,
        din1 => tmp3_reg_1830,
        ce => ap_const_logic_1,
        dout => grp_fu_1208_p2);

    cnn_mux_32_8_1_1_U13 : component cnn_mux_32_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => B_V_0_q0,
        din1 => B_V_192_q0,
        din2 => B_V_293_q0,
        din3 => kb6_reg_1119,
        dout => tmp_32_fu_1493_p5);

    cnn_mux_285_8_1_1_U14 : component cnn_mux_285_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 8,
        din26_WIDTH => 8,
        din27_WIDTH => 8,
        din28_WIDTH => 5,
        dout_WIDTH => 8)
    port map (
        din0 => A_V_0_load_reg_2255,
        din1 => A_V_188_load_reg_2260,
        din2 => A_V_289_load_reg_2265,
        din3 => A_V_390_load_reg_2270,
        din4 => A_V_491_load_reg_2275,
        din5 => A_V_5_load_reg_2280,
        din6 => A_V_6_load_reg_2285,
        din7 => A_V_7_load_reg_2290,
        din8 => A_V_8_load_reg_2295,
        din9 => A_V_9_load_reg_2300,
        din10 => A_V_10_load_reg_2305,
        din11 => A_V_11_load_reg_2310,
        din12 => A_V_12_load_reg_2315,
        din13 => A_V_13_load_reg_2320,
        din14 => A_V_14_load_reg_2325,
        din15 => A_V_15_load_reg_2330,
        din16 => A_V_16_load_reg_2335,
        din17 => A_V_17_load_reg_2340,
        din18 => A_V_18_load_reg_2345,
        din19 => A_V_19_load_reg_2350,
        din20 => A_V_20_load_reg_2355,
        din21 => A_V_21_load_reg_2360,
        din22 => A_V_22_load_reg_2365,
        din23 => A_V_23_load_reg_2370,
        din24 => A_V_24_load_reg_2375,
        din25 => A_V_25_load_reg_2380,
        din26 => A_V_26_load_reg_2385,
        din27 => A_V_27_load_reg_2390,
        din28 => tmp_120_0_t_reg_2250,
        dout => tmp_31_fu_1505_p30);

    cnn_mul_mul_16s_1cud_U15 : component cnn_mul_mul_16s_1cud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1768_p0,
        din1 => grp_fu_1768_p1,
        ce => grp_fu_1768_ce,
        dout => grp_fu_1768_p2);

    cnn_mul_mul_16s_1cud_U16 : component cnn_mul_mul_16s_1cud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_V_80_reg_1796,
        din1 => tmp_V_84_reg_1801,
        ce => grp_fu_1774_ce,
        dout => grp_fu_1774_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state15) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state15))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state15);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state33) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (tmp_s_fu_1189_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state33)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state33);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                elsif ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (tmp_s_fu_1189_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i3_reg_1073_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_1308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                i3_reg_1073 <= ap_const_lv5_0;
            elsif ((not(((exitcond1_fu_1360_p2 = ap_const_lv1_1) and (stream_out_V_V_full_n = ap_const_logic_0))) and (exitcond1_fu_1360_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                i3_reg_1073 <= i_3_reg_2064;
            end if; 
        end if;
    end process;

    i7_reg_1004_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_68_fu_1216_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i7_reg_1004 <= i_s_fu_1221_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i7_reg_1004 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_reg_1142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (tmp_s_fu_1189_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_reg_1142 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_2422_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
                i_reg_1142 <= tmp_63_mid2_v_reg_2445;
            end if; 
        end if;
    end process;

    ia_reg_1049_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_1242_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                ia_reg_1049 <= ap_const_lv5_1;
            elsif (((exitcond5_fu_1308_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                ia_reg_1049 <= ia_3_fu_1314_p2;
            end if; 
        end if;
    end process;

    ib_reg_1061_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_1302_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                ib_reg_1061 <= ap_const_lv5_1;
            elsif (((exitcond7_fu_1320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                ib_reg_1061 <= ib_3_fu_1350_p2;
            end if; 
        end if;
    end process;

    indvar_flatten2_reg_1131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (tmp_s_fu_1189_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                indvar_flatten2_reg_1131 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_fu_1604_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                indvar_flatten2_reg_1131 <= indvar_flatten_next1_fu_1610_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_1154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (tmp_s_fu_1189_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                indvar_flatten_reg_1154 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_fu_1604_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                indvar_flatten_reg_1154 <= indvar_flatten_next_fu_1628_p3;
            end if; 
        end if;
    end process;

    j1_reg_1026_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond6_fu_1286_p2 = ap_const_lv1_0) and (stream_in_V_V_empty_n = ap_const_logic_0))) and (exitcond6_fu_1286_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                j1_reg_1026 <= j_reg_1865;
            elsif (((tmp_67_fu_1231_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                j1_reg_1026 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    k_reg_1037_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_1242_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                k_reg_1037 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                k_reg_1037 <= k_4_reg_2013;
            end if; 
        end if;
    end process;

    ka5_reg_1096_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_1461_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                ka5_reg_1096 <= ka_4_reg_2082;
            elsif (((exitcond7_fu_1320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                ka5_reg_1096 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    ka_reg_1165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (tmp_s_fu_1189_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                ka_reg_1165 <= ap_const_lv3_2;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_2422_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
                ka_reg_1165 <= ka_mid2_reg_2461;
            end if; 
        end if;
    end process;

    kb6_reg_1119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond1_fu_1360_p2 = ap_const_lv1_1) and (stream_out_V_V_full_n = ap_const_logic_0))) and (exitcond1_fu_1360_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                kb6_reg_1119 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                kb6_reg_1119 <= kb_4_reg_2245;
            end if; 
        end if;
    end process;

    kb_reg_1177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (tmp_s_fu_1189_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                kb_reg_1177 <= ap_const_lv3_2;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_2422_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
                kb_reg_1177 <= kb_3_reg_2466;
            end if; 
        end if;
    end process;

    num_img_reg_1015_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (tmp_62_fu_1194_p2 = ap_const_lv1_1) and (tmp_s_fu_1189_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                num_img_reg_1015 <= ap_const_lv15_0;
            elsif (((exitcond4_fu_1302_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                num_img_reg_1015 <= num_img_1_reg_1857;
            end if; 
        end if;
    end process;

    p_0144_1_reg_1084_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_1461_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                p_0144_1_reg_1084 <= p_0144_2_reg_1107;
            elsif (((exitcond7_fu_1320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                p_0144_1_reg_1084 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    p_0144_2_reg_1107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond1_fu_1360_p2 = ap_const_lv1_1) and (stream_out_V_V_full_n = ap_const_logic_0))) and (exitcond1_fu_1360_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                p_0144_2_reg_1107 <= p_0144_1_reg_1084;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                p_0144_2_reg_1107 <= buf_V_fu_1598_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond1_fu_1360_p2 = ap_const_lv1_1) and (stream_out_V_V_full_n = ap_const_logic_0))) and (exitcond1_fu_1360_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                A_V_0_addr_1_reg_2087 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                A_V_10_addr_1_reg_2092 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                A_V_11_addr_1_reg_2097 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                A_V_12_addr_1_reg_2102 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                A_V_13_addr_1_reg_2107 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                A_V_14_addr_1_reg_2112 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                A_V_15_addr_1_reg_2117 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                A_V_16_addr_1_reg_2122 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                A_V_17_addr_1_reg_2127 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                A_V_188_addr_1_reg_2137 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                A_V_18_addr_1_reg_2132 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                A_V_19_addr_1_reg_2142 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                A_V_20_addr_1_reg_2147 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                A_V_21_addr_1_reg_2152 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                A_V_22_addr_1_reg_2157 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                A_V_23_addr_1_reg_2162 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                A_V_24_addr_1_reg_2167 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                A_V_25_addr_1_reg_2172 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                A_V_26_addr_1_reg_2177 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                A_V_27_addr_1_reg_2182 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                A_V_289_addr_1_reg_2187 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                A_V_390_addr_1_reg_2192 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                A_V_491_addr_1_reg_2197 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                A_V_5_addr_1_reg_2202 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                A_V_6_addr_1_reg_2207 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                A_V_7_addr_1_reg_2212 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                A_V_8_addr_1_reg_2217 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                A_V_9_addr_1_reg_2222 <= tmp_117_fu_1388_p1(5 - 1 downto 0);
                B_V_0_addr_1_reg_2227 <= tmp_145_cast_fu_1429_p1(6 - 1 downto 0);
                B_V_192_addr_1_reg_2232 <= tmp_145_cast_fu_1429_p1(6 - 1 downto 0);
                B_V_293_addr_1_reg_2237 <= tmp_145_cast_fu_1429_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_1242_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                A_V_0_addr_reg_1870 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
                A_V_10_addr_reg_1875 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
                A_V_11_addr_reg_1880 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
                A_V_12_addr_reg_1885 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
                A_V_13_addr_reg_1890 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
                A_V_14_addr_reg_1895 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
                A_V_15_addr_reg_1900 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
                A_V_16_addr_reg_1905 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
                A_V_17_addr_reg_1910 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
                A_V_188_addr_reg_1920 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
                A_V_18_addr_reg_1915 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
                A_V_19_addr_reg_1925 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
                A_V_20_addr_reg_1930 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
                A_V_21_addr_reg_1935 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
                A_V_22_addr_reg_1940 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
                A_V_23_addr_reg_1945 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
                A_V_24_addr_reg_1950 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
                A_V_25_addr_reg_1955 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
                A_V_26_addr_reg_1960 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
                A_V_27_addr_reg_1965 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
                A_V_289_addr_reg_1970 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
                A_V_390_addr_reg_1975 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
                A_V_491_addr_reg_1980 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
                A_V_5_addr_reg_1985 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
                A_V_6_addr_reg_1990 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
                A_V_7_addr_reg_1995 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
                A_V_8_addr_reg_2000 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
                A_V_9_addr_reg_2005 <= tmp_69_fu_1254_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                A_V_0_load_reg_2255 <= A_V_0_q0;
                A_V_10_load_reg_2305 <= A_V_10_q0;
                A_V_11_load_reg_2310 <= A_V_11_q0;
                A_V_12_load_reg_2315 <= A_V_12_q0;
                A_V_13_load_reg_2320 <= A_V_13_q0;
                A_V_14_load_reg_2325 <= A_V_14_q0;
                A_V_15_load_reg_2330 <= A_V_15_q0;
                A_V_16_load_reg_2335 <= A_V_16_q0;
                A_V_17_load_reg_2340 <= A_V_17_q0;
                A_V_188_load_reg_2260 <= A_V_188_q0;
                A_V_18_load_reg_2345 <= A_V_18_q0;
                A_V_19_load_reg_2350 <= A_V_19_q0;
                A_V_20_load_reg_2355 <= A_V_20_q0;
                A_V_21_load_reg_2360 <= A_V_21_q0;
                A_V_22_load_reg_2365 <= A_V_22_q0;
                A_V_23_load_reg_2370 <= A_V_23_q0;
                A_V_24_load_reg_2375 <= A_V_24_q0;
                A_V_25_load_reg_2380 <= A_V_25_q0;
                A_V_26_load_reg_2385 <= A_V_26_q0;
                A_V_27_load_reg_2390 <= A_V_27_q0;
                A_V_289_load_reg_2265 <= A_V_289_q0;
                A_V_390_load_reg_2270 <= A_V_390_q0;
                A_V_491_load_reg_2275 <= A_V_491_q0;
                A_V_5_load_reg_2280 <= A_V_5_q0;
                A_V_6_load_reg_2285 <= A_V_6_q0;
                A_V_7_load_reg_2290 <= A_V_7_q0;
                A_V_8_load_reg_2295 <= A_V_8_q0;
                A_V_9_load_reg_2300 <= A_V_9_q0;
                tmp_120_0_t_reg_2250 <= tmp_120_0_t_fu_1487_p2;
                tmp_32_reg_2395 <= tmp_32_fu_1493_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                KER_bound_reg_1840 <= grp_fu_1208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_fu_1604_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond_flatten10_reg_2431 <= exitcond_flatten10_fu_1616_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond_flatten_reg_2422 <= exitcond_flatten_fu_1604_p2;
                exitcond_flatten_reg_2422_pp1_iter1_reg <= exitcond_flatten_reg_2422;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                i_3_reg_2064 <= i_3_fu_1326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                j_reg_1865 <= j_fu_1248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond6_fu_1286_p2 = ap_const_lv1_0) and (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                k_4_reg_2013 <= k_4_fu_1292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_2422 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                ka_0_t_mid2_reg_2457 <= ka_0_t_mid2_fu_1711_p3;
                kb_mid2_reg_2452 <= kb_mid2_fu_1699_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                ka_0_t_mid2_reg_2457_pp1_iter2_reg <= ka_0_t_mid2_reg_2457;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond1_fu_1360_p2 = ap_const_lv1_1) and (stream_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                ka_4_reg_2082 <= ka_4_fu_1366_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_2422 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                ka_mid2_reg_2461 <= ka_mid2_fu_1719_p3;
                kb_3_reg_2466 <= kb_3_fu_1727_p2;
                tmp_63_mid2_v_reg_2445 <= tmp_63_mid2_v_fu_1656_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                kb_4_reg_2245 <= kb_4_fu_1467_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                num_img_1_reg_1857 <= num_img_1_fu_1236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                r_V_4_reg_2405 <= r_V_4_fu_1544_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp3_reg_1830 <= grp_fu_1768_p2;
                tmp4_reg_1835 <= grp_fu_1774_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                tmp_129_reg_2412 <= p_neg_fu_1553_p2(13 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_2422_pp1_iter1_reg = ap_const_lv1_0))) then
                tmp_134_reg_2471 <= tmp_134_fu_1752_p2;
                tmp_138_reg_2476 <= tmp_138_fu_1758_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond6_fu_1286_p2 = ap_const_lv1_0) and (stream_in_V_V_empty_n = ap_const_logic_0))) and (exitcond6_fu_1286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                tmp_139_reg_2018 <= tmp_139_fu_1298_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_1320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                tmp_141_reg_2069 <= tmp_141_fu_1344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                tmp_31_reg_2400 <= tmp_31_fu_1505_p30;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_68_reg_1845 <= tmp_68_fu_1216_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_V_76_reg_1786 <= stream_in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_V_78_reg_1791 <= stream_in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_V_80_reg_1796 <= stream_in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_V_84_reg_1801 <= stream_in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_V_reg_1780 <= stream_in_V_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, stream_in_V_V_empty_n, stream_out_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_enable_reg_pp1_iter2, ap_CS_fsm_state20, exitcond6_fu_1286_p2, ap_CS_fsm_state26, exitcond1_fu_1360_p2, tmp_s_fu_1189_p2, tmp_62_fu_1194_p2, tmp_68_fu_1216_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state18, ap_CS_fsm_state19, exitcond3_fu_1242_p2, ap_CS_fsm_state24, exitcond5_fu_1308_p2, ap_CS_fsm_state25, exitcond7_fu_1320_p2, ap_CS_fsm_state27, exitcond_flatten_fu_1604_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter3, ap_CS_fsm_state23, exitcond4_fu_1302_p2, tmp_67_fu_1231_p2, ap_phi_mux_k_phi_fu_1041_p4, exitcond8_fu_1461_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (tmp_s_fu_1189_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (tmp_62_fu_1194_p2 = ap_const_lv1_1) and (tmp_s_fu_1189_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                elsif ((not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (tmp_62_fu_1194_p2 = ap_const_lv1_0) and (tmp_s_fu_1189_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_68_fu_1216_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_68_fu_1216_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state18 => 
                if (((tmp_67_fu_1231_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                if (((exitcond3_fu_1242_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                if ((not(((exitcond6_fu_1286_p2 = ap_const_lv1_0) and (stream_in_V_V_empty_n = ap_const_logic_0))) and (exitcond6_fu_1286_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                elsif ((not(((exitcond6_fu_1286_p2 = ap_const_lv1_0) and (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state20) and (((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_1F) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_1E) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_1D) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_1C) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_1B) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_1A) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_19) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_18) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_17) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_16) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_15) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_14) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_13) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_12) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_11) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_10) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_F) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_E) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_D) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_C) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_B) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_A) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_9) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_8) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_7) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_6) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_5) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_4) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_3) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_2) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_1) and (exitcond6_fu_1286_p2 = ap_const_lv1_0)) or ((ap_phi_mux_k_phi_fu_1041_p4 = ap_const_lv5_0) and (exitcond6_fu_1286_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state23 => 
                if (((exitcond4_fu_1302_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                if (((exitcond5_fu_1308_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                if (((exitcond7_fu_1320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                if ((not(((exitcond1_fu_1360_p2 = ap_const_lv1_1) and (stream_out_V_V_full_n = ap_const_logic_0))) and (exitcond1_fu_1360_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                elsif ((not(((exitcond1_fu_1360_p2 = ap_const_lv1_1) and (stream_out_V_V_full_n = ap_const_logic_0))) and (exitcond1_fu_1360_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((exitcond8_fu_1461_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (exitcond_flatten_fu_1604_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (exitcond_flatten_fu_1604_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_V_0_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_0_ce0 <= ap_const_logic_1;
        else 
            A_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_0_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_0_ce1 <= ap_const_logic_1;
        else 
            A_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_0_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((k_reg_1037 = ap_const_lv5_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            A_V_0_we1 <= ap_const_logic_1;
        else 
            A_V_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_10_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_10_ce0 <= ap_const_logic_1;
        else 
            A_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_10_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_10_ce1 <= ap_const_logic_1;
        else 
            A_V_10_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_10_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((k_reg_1037 = ap_const_lv5_A) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            A_V_10_we1 <= ap_const_logic_1;
        else 
            A_V_10_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_11_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_11_ce0 <= ap_const_logic_1;
        else 
            A_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_11_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_11_ce1 <= ap_const_logic_1;
        else 
            A_V_11_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_11_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((k_reg_1037 = ap_const_lv5_B) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            A_V_11_we1 <= ap_const_logic_1;
        else 
            A_V_11_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_12_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_12_ce0 <= ap_const_logic_1;
        else 
            A_V_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_12_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_12_ce1 <= ap_const_logic_1;
        else 
            A_V_12_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_12_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((k_reg_1037 = ap_const_lv5_C) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            A_V_12_we1 <= ap_const_logic_1;
        else 
            A_V_12_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_13_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_13_ce0 <= ap_const_logic_1;
        else 
            A_V_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_13_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_13_ce1 <= ap_const_logic_1;
        else 
            A_V_13_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_13_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((k_reg_1037 = ap_const_lv5_D) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            A_V_13_we1 <= ap_const_logic_1;
        else 
            A_V_13_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_14_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_14_ce0 <= ap_const_logic_1;
        else 
            A_V_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_14_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_14_ce1 <= ap_const_logic_1;
        else 
            A_V_14_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_14_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((k_reg_1037 = ap_const_lv5_E) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            A_V_14_we1 <= ap_const_logic_1;
        else 
            A_V_14_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_15_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_15_ce0 <= ap_const_logic_1;
        else 
            A_V_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_15_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_15_ce1 <= ap_const_logic_1;
        else 
            A_V_15_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_15_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((k_reg_1037 = ap_const_lv5_F) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            A_V_15_we1 <= ap_const_logic_1;
        else 
            A_V_15_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_16_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_16_ce0 <= ap_const_logic_1;
        else 
            A_V_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_16_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_16_ce1 <= ap_const_logic_1;
        else 
            A_V_16_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_16_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((k_reg_1037 = ap_const_lv5_10) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            A_V_16_we1 <= ap_const_logic_1;
        else 
            A_V_16_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_17_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_17_ce0 <= ap_const_logic_1;
        else 
            A_V_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_17_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_17_ce1 <= ap_const_logic_1;
        else 
            A_V_17_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_17_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((k_reg_1037 = ap_const_lv5_11) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            A_V_17_we1 <= ap_const_logic_1;
        else 
            A_V_17_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_188_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_188_ce0 <= ap_const_logic_1;
        else 
            A_V_188_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_188_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_188_ce1 <= ap_const_logic_1;
        else 
            A_V_188_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_188_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((k_reg_1037 = ap_const_lv5_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            A_V_188_we1 <= ap_const_logic_1;
        else 
            A_V_188_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_18_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_18_ce0 <= ap_const_logic_1;
        else 
            A_V_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_18_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_18_ce1 <= ap_const_logic_1;
        else 
            A_V_18_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_18_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((k_reg_1037 = ap_const_lv5_12) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            A_V_18_we1 <= ap_const_logic_1;
        else 
            A_V_18_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_19_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_19_ce0 <= ap_const_logic_1;
        else 
            A_V_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_19_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_19_ce1 <= ap_const_logic_1;
        else 
            A_V_19_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_19_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((k_reg_1037 = ap_const_lv5_13) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            A_V_19_we1 <= ap_const_logic_1;
        else 
            A_V_19_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_20_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_20_ce0 <= ap_const_logic_1;
        else 
            A_V_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_20_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_20_ce1 <= ap_const_logic_1;
        else 
            A_V_20_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_20_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((k_reg_1037 = ap_const_lv5_14) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            A_V_20_we1 <= ap_const_logic_1;
        else 
            A_V_20_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_21_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_21_ce0 <= ap_const_logic_1;
        else 
            A_V_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_21_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_21_ce1 <= ap_const_logic_1;
        else 
            A_V_21_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_21_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((k_reg_1037 = ap_const_lv5_15) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            A_V_21_we1 <= ap_const_logic_1;
        else 
            A_V_21_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_22_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_22_ce0 <= ap_const_logic_1;
        else 
            A_V_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_22_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_22_ce1 <= ap_const_logic_1;
        else 
            A_V_22_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_22_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((k_reg_1037 = ap_const_lv5_16) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            A_V_22_we1 <= ap_const_logic_1;
        else 
            A_V_22_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_23_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_23_ce0 <= ap_const_logic_1;
        else 
            A_V_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_23_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_23_ce1 <= ap_const_logic_1;
        else 
            A_V_23_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_23_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((k_reg_1037 = ap_const_lv5_17) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            A_V_23_we1 <= ap_const_logic_1;
        else 
            A_V_23_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_24_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_24_ce0 <= ap_const_logic_1;
        else 
            A_V_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_24_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_24_ce1 <= ap_const_logic_1;
        else 
            A_V_24_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_24_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((k_reg_1037 = ap_const_lv5_18) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            A_V_24_we1 <= ap_const_logic_1;
        else 
            A_V_24_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_25_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_25_ce0 <= ap_const_logic_1;
        else 
            A_V_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_25_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_25_ce1 <= ap_const_logic_1;
        else 
            A_V_25_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_25_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((k_reg_1037 = ap_const_lv5_19) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            A_V_25_we1 <= ap_const_logic_1;
        else 
            A_V_25_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_26_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_26_ce0 <= ap_const_logic_1;
        else 
            A_V_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_26_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_26_ce1 <= ap_const_logic_1;
        else 
            A_V_26_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_26_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((k_reg_1037 = ap_const_lv5_1A) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            A_V_26_we1 <= ap_const_logic_1;
        else 
            A_V_26_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_27_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_27_ce0 <= ap_const_logic_1;
        else 
            A_V_27_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_27_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_27_ce1 <= ap_const_logic_1;
        else 
            A_V_27_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_27_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and ((k_reg_1037 = ap_const_lv5_1F) or (k_reg_1037 = ap_const_lv5_1E) or (k_reg_1037 = ap_const_lv5_1D) or (k_reg_1037 = ap_const_lv5_1C) or (k_reg_1037 = ap_const_lv5_1B)))) then 
            A_V_27_we1 <= ap_const_logic_1;
        else 
            A_V_27_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_289_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_289_ce0 <= ap_const_logic_1;
        else 
            A_V_289_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_289_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_289_ce1 <= ap_const_logic_1;
        else 
            A_V_289_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_289_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((k_reg_1037 = ap_const_lv5_2) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            A_V_289_we1 <= ap_const_logic_1;
        else 
            A_V_289_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_390_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_390_ce0 <= ap_const_logic_1;
        else 
            A_V_390_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_390_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_390_ce1 <= ap_const_logic_1;
        else 
            A_V_390_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_390_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((k_reg_1037 = ap_const_lv5_3) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            A_V_390_we1 <= ap_const_logic_1;
        else 
            A_V_390_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_491_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_491_ce0 <= ap_const_logic_1;
        else 
            A_V_491_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_491_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_491_ce1 <= ap_const_logic_1;
        else 
            A_V_491_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_491_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((k_reg_1037 = ap_const_lv5_4) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            A_V_491_we1 <= ap_const_logic_1;
        else 
            A_V_491_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_5_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_5_ce0 <= ap_const_logic_1;
        else 
            A_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_5_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_5_ce1 <= ap_const_logic_1;
        else 
            A_V_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_5_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((k_reg_1037 = ap_const_lv5_5) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            A_V_5_we1 <= ap_const_logic_1;
        else 
            A_V_5_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_6_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_6_ce0 <= ap_const_logic_1;
        else 
            A_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_6_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_6_ce1 <= ap_const_logic_1;
        else 
            A_V_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_6_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((k_reg_1037 = ap_const_lv5_6) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            A_V_6_we1 <= ap_const_logic_1;
        else 
            A_V_6_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_7_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_7_ce0 <= ap_const_logic_1;
        else 
            A_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_7_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_7_ce1 <= ap_const_logic_1;
        else 
            A_V_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_7_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((k_reg_1037 = ap_const_lv5_7) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            A_V_7_we1 <= ap_const_logic_1;
        else 
            A_V_7_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_8_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_8_ce0 <= ap_const_logic_1;
        else 
            A_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_8_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_8_ce1 <= ap_const_logic_1;
        else 
            A_V_8_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_8_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((k_reg_1037 = ap_const_lv5_8) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            A_V_8_we1 <= ap_const_logic_1;
        else 
            A_V_8_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_9_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            A_V_9_ce0 <= ap_const_logic_1;
        else 
            A_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_9_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_V_9_ce1 <= ap_const_logic_1;
        else 
            A_V_9_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_9_we1_assign_proc : process(k_reg_1037, ap_CS_fsm_state21)
    begin
        if (((k_reg_1037 = ap_const_lv5_9) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            A_V_9_we1 <= ap_const_logic_1;
        else 
            A_V_9_we1 <= ap_const_logic_0;
        end if; 
    end process;

    B_V_0_address1 <= tmp_142_cast_fu_1762_p1(6 - 1 downto 0);

    B_V_0_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            B_V_0_ce0 <= ap_const_logic_1;
        else 
            B_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_V_0_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            B_V_0_ce1 <= ap_const_logic_1;
        else 
            B_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_V_0_we1_assign_proc : process(ap_block_pp1_stage0_11001, ka_0_t_mid2_reg_2457_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((ka_0_t_mid2_reg_2457_pp1_iter2_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            B_V_0_we1 <= ap_const_logic_1;
        else 
            B_V_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    B_V_192_address1 <= tmp_142_cast_fu_1762_p1(6 - 1 downto 0);

    B_V_192_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            B_V_192_ce0 <= ap_const_logic_1;
        else 
            B_V_192_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_V_192_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            B_V_192_ce1 <= ap_const_logic_1;
        else 
            B_V_192_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_V_192_we1_assign_proc : process(ap_block_pp1_stage0_11001, ka_0_t_mid2_reg_2457_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((ka_0_t_mid2_reg_2457_pp1_iter2_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            B_V_192_we1 <= ap_const_logic_1;
        else 
            B_V_192_we1 <= ap_const_logic_0;
        end if; 
    end process;

    B_V_293_address1 <= tmp_142_cast_fu_1762_p1(6 - 1 downto 0);

    B_V_293_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            B_V_293_ce0 <= ap_const_logic_1;
        else 
            B_V_293_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_V_293_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            B_V_293_ce1 <= ap_const_logic_1;
        else 
            B_V_293_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_V_293_we1_assign_proc : process(ap_block_pp1_stage0_11001, ka_0_t_mid2_reg_2457_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if ((not((ka_0_t_mid2_reg_2457_pp1_iter2_reg = ap_const_lv2_1)) and not((ka_0_t_mid2_reg_2457_pp1_iter2_reg = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            B_V_293_we1 <= ap_const_logic_1;
        else 
            B_V_293_we1 <= ap_const_logic_0;
        end if; 
    end process;

    Outbuf_V_fu_1456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_V_y_V_i_fu_1448_p3),16));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(14);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(31);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(16);
    ap_CS_fsm_state19 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(18);
    ap_CS_fsm_state21 <= ap_CS_fsm(19);
    ap_CS_fsm_state22 <= ap_CS_fsm(20);
    ap_CS_fsm_state23 <= ap_CS_fsm(21);
    ap_CS_fsm_state24 <= ap_CS_fsm(22);
    ap_CS_fsm_state25 <= ap_CS_fsm(23);
    ap_CS_fsm_state26 <= ap_CS_fsm(24);
    ap_CS_fsm_state27 <= ap_CS_fsm(25);
    ap_CS_fsm_state28 <= ap_CS_fsm(26);
    ap_CS_fsm_state29 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(28);
    ap_CS_fsm_state31 <= ap_CS_fsm(29);
    ap_CS_fsm_state32 <= ap_CS_fsm(30);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n, ap_enable_reg_pp0_iter1, tmp_68_reg_1845)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((tmp_68_reg_1845 = ap_const_lv1_1) and (stream_out_V_V_full_n = ap_const_logic_0)) or ((tmp_68_reg_1845 = ap_const_lv1_1) and (stream_in_V_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n, ap_enable_reg_pp0_iter1, tmp_68_reg_1845)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((tmp_68_reg_1845 = ap_const_lv1_1) and (stream_out_V_V_full_n = ap_const_logic_0)) or ((tmp_68_reg_1845 = ap_const_lv1_1) and (stream_in_V_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n, ap_enable_reg_pp0_iter1, tmp_68_reg_1845)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((tmp_68_reg_1845 = ap_const_lv1_1) and (stream_out_V_V_full_n = ap_const_logic_0)) or ((tmp_68_reg_1845 = ap_const_lv1_1) and (stream_in_V_V_empty_n = ap_const_logic_0))));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n, ap_enable_reg_pp1_iter2, exitcond_flatten_reg_2422_pp1_iter1_reg)
    begin
                ap_block_pp1_stage0_01001 <= ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (((exitcond_flatten_reg_2422_pp1_iter1_reg = ap_const_lv1_0) and (stream_out_V_V_full_n = ap_const_logic_0)) or ((exitcond_flatten_reg_2422_pp1_iter1_reg = ap_const_lv1_0) and (stream_in_V_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n, ap_enable_reg_pp1_iter2, exitcond_flatten_reg_2422_pp1_iter1_reg)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (((exitcond_flatten_reg_2422_pp1_iter1_reg = ap_const_lv1_0) and (stream_out_V_V_full_n = ap_const_logic_0)) or ((exitcond_flatten_reg_2422_pp1_iter1_reg = ap_const_lv1_0) and (stream_in_V_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n, ap_enable_reg_pp1_iter2, exitcond_flatten_reg_2422_pp1_iter1_reg)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (((exitcond_flatten_reg_2422_pp1_iter1_reg = ap_const_lv1_0) and (stream_out_V_V_full_n = ap_const_logic_0)) or ((exitcond_flatten_reg_2422_pp1_iter1_reg = ap_const_lv1_0) and (stream_in_V_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, stream_in_V_V_empty_n, stream_out_V_V_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0));
    end process;

        ap_block_state15_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_pp0_stage0_iter1_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n, tmp_68_reg_1845)
    begin
                ap_block_state16_pp0_stage0_iter1 <= (((tmp_68_reg_1845 = ap_const_lv1_1) and (stream_out_V_V_full_n = ap_const_logic_0)) or ((tmp_68_reg_1845 = ap_const_lv1_1) and (stream_in_V_V_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state2_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n)
    begin
                ap_block_state2 <= ((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state20_assign_proc : process(stream_in_V_V_empty_n, exitcond6_fu_1286_p2)
    begin
                ap_block_state20 <= ((exitcond6_fu_1286_p2 = ap_const_lv1_0) and (stream_in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state26_assign_proc : process(stream_out_V_V_full_n, exitcond1_fu_1360_p2)
    begin
                ap_block_state26 <= ((exitcond1_fu_1360_p2 = ap_const_lv1_1) and (stream_out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state3_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n)
    begin
                ap_block_state3 <= ((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state33_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state35_pp1_stage0_iter2_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n, exitcond_flatten_reg_2422_pp1_iter1_reg)
    begin
                ap_block_state35_pp1_stage0_iter2 <= (((exitcond_flatten_reg_2422_pp1_iter1_reg = ap_const_lv1_0) and (stream_out_V_V_full_n = ap_const_logic_0)) or ((exitcond_flatten_reg_2422_pp1_iter1_reg = ap_const_lv1_0) and (stream_in_V_V_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state36_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n)
    begin
                ap_block_state4 <= ((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n)
    begin
                ap_block_state5 <= ((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state6_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n)
    begin
                ap_block_state6 <= ((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state7_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n)
    begin
                ap_block_state7 <= ((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state15_assign_proc : process(tmp_68_fu_1216_p2)
    begin
        if ((tmp_68_fu_1216_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state15 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state33_assign_proc : process(exitcond_flatten_fu_1604_p2)
    begin
        if ((exitcond_flatten_fu_1604_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state33 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state33 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_1146_p4_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, exitcond_flatten_reg_2422_pp1_iter1_reg, i_reg_1142, tmp_63_mid2_v_reg_2445)
    begin
        if (((exitcond_flatten_reg_2422_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_i_phi_fu_1146_p4 <= tmp_63_mid2_v_reg_2445;
        else 
            ap_phi_mux_i_phi_fu_1146_p4 <= i_reg_1142;
        end if; 
    end process;

    ap_phi_mux_k_phi_fu_1041_p4 <= k_reg_1037;

    ap_phi_mux_ka_phi_fu_1169_p4_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, exitcond_flatten_reg_2422_pp1_iter1_reg, ka_reg_1165, ka_mid2_reg_2461)
    begin
        if (((exitcond_flatten_reg_2422_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_ka_phi_fu_1169_p4 <= ka_mid2_reg_2461;
        else 
            ap_phi_mux_ka_phi_fu_1169_p4 <= ka_reg_1165;
        end if; 
    end process;


    ap_phi_mux_kb_phi_fu_1181_p4_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, exitcond_flatten_reg_2422_pp1_iter1_reg, kb_reg_1177, kb_3_reg_2466)
    begin
        if (((exitcond_flatten_reg_2422_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_kb_phi_fu_1181_p4 <= kb_3_reg_2466;
        else 
            ap_phi_mux_kb_phi_fu_1181_p4 <= kb_reg_1177;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    buf_V_fu_1598_p2 <= std_logic_vector(unsigned(tmp_132_fu_1590_p3) + unsigned(p_0144_2_reg_1107));
    exitcond1_fu_1360_p2 <= "1" when (ka5_reg_1096 = ap_const_lv2_3) else "0";
    exitcond3_fu_1242_p2 <= "1" when (j1_reg_1026 = ap_const_lv5_1C) else "0";
    exitcond4_fu_1302_p2 <= "1" when (ia_reg_1049 = ap_const_lv5_1B) else "0";
    exitcond5_fu_1308_p2 <= "1" when (ib_reg_1061 = ap_const_lv5_1B) else "0";
    exitcond6_fu_1286_p2 <= "1" when (k_reg_1037 = ap_const_lv5_1C) else "0";
    exitcond7_fu_1320_p2 <= "1" when (i3_reg_1073 = ap_const_lv5_10) else "0";
    exitcond8_fu_1461_p2 <= "1" when (kb6_reg_1119 = ap_const_lv2_3) else "0";
    exitcond_flatten10_fu_1616_p2 <= "1" when (indvar_flatten_reg_1154 = ap_const_lv4_9) else "0";
    exitcond_flatten_fu_1604_p2 <= "1" when (indvar_flatten2_reg_1131 = ap_const_lv8_90) else "0";

    grp_fu_1768_ce_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            grp_fu_1768_ce <= ap_const_logic_1;
        else 
            grp_fu_1768_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1768_p0 <= tmp_65_fu_1205_p1(16 - 1 downto 0);
    grp_fu_1768_p1 <= tmp_65_fu_1205_p1(16 - 1 downto 0);

    grp_fu_1774_ce_assign_proc : process(stream_in_V_V_empty_n, stream_out_V_V_full_n, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            grp_fu_1774_ce <= ap_const_logic_1;
        else 
            grp_fu_1774_ce <= ap_const_logic_0;
        end if; 
    end process;

    i7_cast_fu_1212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i7_reg_1004),32));
    i_3_fu_1326_p2 <= std_logic_vector(unsigned(i3_reg_1073) + unsigned(ap_const_lv5_1));
    i_4_fu_1636_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_i_phi_fu_1146_p4));
    i_s_fu_1221_p2 <= std_logic_vector(unsigned(i7_reg_1004) + unsigned(ap_const_lv31_1));
    ia_3_fu_1314_p2 <= std_logic_vector(unsigned(ia_reg_1049) + unsigned(ap_const_lv5_1));
    ib_3_fu_1350_p2 <= std_logic_vector(unsigned(ib_reg_1061) + unsigned(ap_const_lv5_1));
    indvar_flatten_next1_fu_1610_p2 <= std_logic_vector(unsigned(indvar_flatten2_reg_1131) + unsigned(ap_const_lv8_1));
    indvar_flatten_next_fu_1628_p3 <= 
        ap_const_lv4_1 when (exitcond_flatten10_fu_1616_p2(0) = '1') else 
        indvar_flatten_op_fu_1622_p2;
    indvar_flatten_op_fu_1622_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_1154) + unsigned(ap_const_lv4_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_1248_p2 <= std_logic_vector(unsigned(j1_reg_1026) + unsigned(ap_const_lv5_1));
    k_4_fu_1292_p2 <= std_logic_vector(unsigned(k_reg_1037) + unsigned(ap_const_lv5_1));
    ka5_cast_cast_fu_1356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ka5_reg_1096),3));
    ka_0_t_mid2_fu_1711_p3 <= 
        ka_0_t_mid_fu_1667_p3 when (tmp_109_mid_fu_1688_p2(0) = '1') else 
        tmp_137_fu_1707_p1;
    ka_0_t_mid_fu_1667_p3 <= 
        ap_const_lv2_2 when (exitcond_flatten10_reg_2431(0) = '1') else 
        tmp_135_fu_1663_p1;
    ka_3_fu_1693_p2 <= std_logic_vector(signed(ap_const_lv3_7) + signed(ka_mid_fu_1642_p3));
    ka_4_fu_1366_p2 <= std_logic_vector(unsigned(ka5_reg_1096) + unsigned(ap_const_lv2_1));
    ka_mid2_fu_1719_p3 <= 
        ka_mid_fu_1642_p3 when (tmp_109_mid_fu_1688_p2(0) = '1') else 
        ka_3_fu_1693_p2;
    ka_mid_fu_1642_p3 <= 
        ap_const_lv3_2 when (exitcond_flatten10_reg_2431(0) = '1') else 
        ap_phi_mux_ka_phi_fu_1169_p4;
    kb_3_fu_1727_p2 <= std_logic_vector(signed(kb_mid2_fu_1699_p3) + signed(ap_const_lv3_7));
    kb_4_fu_1467_p2 <= std_logic_vector(unsigned(kb6_reg_1119) + unsigned(ap_const_lv2_1));
    kb_mid2_fu_1699_p3 <= 
        kb_mid_fu_1649_p3 when (tmp_109_mid_fu_1688_p2(0) = '1') else 
        ap_const_lv3_2;
    kb_mid_fu_1649_p3 <= 
        ap_const_lv3_2 when (exitcond_flatten10_reg_2431(0) = '1') else 
        ap_phi_mux_kb_phi_fu_1181_p4;
    num_img_1_fu_1236_p2 <= std_logic_vector(unsigned(num_img_reg_1015) + unsigned(ap_const_lv15_1));
    num_img_cast_fu_1227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(num_img_reg_1015),16));
    p_neg_fu_1553_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(tmp_123_tr_s_fu_1550_p1));
    r_V_4_fu_1544_p0 <= tmp_32_reg_2395;
    r_V_4_fu_1544_p1 <= tmp_31_reg_2400;
    r_V_4_fu_1544_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_4_fu_1544_p0) * signed(r_V_4_fu_1544_p1))), 16));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    rev_fu_1682_p2 <= (tmp_136_fu_1674_p3 xor ap_const_lv1_1);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, stream_in_V_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, exitcond_flatten_reg_2422_pp1_iter1_reg, ap_CS_fsm_state20, exitcond6_fu_1286_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_68_reg_1845)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_68_reg_1845 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((exitcond6_fu_1286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((exitcond_flatten_reg_2422_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            stream_in_V_V_blk_n <= stream_in_V_V_empty_n;
        else 
            stream_in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_in_V_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, stream_in_V_V_empty_n, stream_out_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_enable_reg_pp1_iter2, exitcond_flatten_reg_2422_pp1_iter1_reg, ap_CS_fsm_state20, exitcond6_fu_1286_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_68_reg_1845, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001)
    begin
        if (((not(((ap_done_reg = ap_const_logic_1) or (stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_68_reg_1845 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((exitcond6_fu_1286_p2 = ap_const_lv1_0) and (stream_in_V_V_empty_n = ap_const_logic_0))) and (exitcond6_fu_1286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_2422_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            stream_in_V_V_read <= ap_const_logic_1;
        else 
            stream_in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    stream_out_V_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, stream_out_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, exitcond_flatten_reg_2422_pp1_iter1_reg, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_68_reg_1845, ap_CS_fsm_state26, exitcond1_fu_1360_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond1_fu_1360_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((tmp_68_reg_1845 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((exitcond_flatten_reg_2422_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            stream_out_V_V_blk_n <= stream_out_V_V_full_n;
        else 
            stream_out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_out_V_V_din_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, stream_in_V_V_dout, stream_in_V_V_empty_n, stream_out_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_enable_reg_pp1_iter2, exitcond_flatten_reg_2422_pp1_iter1_reg, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_68_reg_1845, ap_CS_fsm_state26, exitcond1_fu_1360_p2, ap_block_pp0_stage0_01001, Outbuf_V_fu_1456_p1, ap_block_pp1_stage0_01001)
    begin
        if ((not(((exitcond1_fu_1360_p2 = ap_const_lv1_1) and (stream_out_V_V_full_n = ap_const_logic_0))) and (exitcond1_fu_1360_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            stream_out_V_V_din <= Outbuf_V_fu_1456_p1;
        elsif (((not(((ap_done_reg = ap_const_logic_1) or (stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_68_reg_1845 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001)) or ((exitcond_flatten_reg_2422_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_01001)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            stream_out_V_V_din <= stream_in_V_V_dout;
        else 
            stream_out_V_V_din <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stream_out_V_V_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, stream_in_V_V_empty_n, stream_out_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_enable_reg_pp1_iter2, exitcond_flatten_reg_2422_pp1_iter1_reg, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_68_reg_1845, ap_CS_fsm_state26, exitcond1_fu_1360_p2, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001)
    begin
        if (((not(((ap_done_reg = ap_const_logic_1) or (stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((exitcond1_fu_1360_p2 = ap_const_lv1_1) and (stream_out_V_V_full_n = ap_const_logic_0))) and (exitcond1_fu_1360_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_68_reg_1845 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten_reg_2422_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((stream_out_V_V_full_n = ap_const_logic_0) or (stream_in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            stream_out_V_V_write <= ap_const_logic_1;
        else 
            stream_out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

        tmp1_cast_fu_1378_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_1372_p2),5));

    tmp1_fu_1372_p2 <= std_logic_vector(unsigned(ka5_cast_cast_fu_1356_p1) + unsigned(ap_const_lv3_7));
        tmp2_cast_fu_1483_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_1477_p2),5));

    tmp2_fu_1477_p2 <= std_logic_vector(unsigned(tmp_131_cast_fu_1473_p1) + unsigned(ap_const_lv3_7));
    tmp_109_mid_fu_1688_p2 <= (rev_fu_1682_p2 or exitcond_flatten10_reg_2431);
        tmp_111_cast_fu_1749_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kb_mid2_reg_2452),7));

    tmp_116_fu_1382_p2 <= std_logic_vector(unsigned(ia_reg_1049) + unsigned(tmp1_cast_fu_1378_p1));
    tmp_117_fu_1388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_116_fu_1382_p2),64));
    tmp_118_cast_fu_1420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ka5_reg_1096),7));
    tmp_120_0_t_fu_1487_p2 <= std_logic_vector(signed(tmp2_cast_fu_1483_p1) + signed(ib_reg_1061));
    tmp_123_tr_s_fu_1550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_4_reg_2405),17));
    tmp_128_fu_1736_p3 <= (tmp_63_mid2_v_reg_2445 & ap_const_lv2_0);
    tmp_130_fu_1576_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_129_reg_2412));
    tmp_131_cast_fu_1473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kb6_reg_1119),3));
    tmp_131_fu_1581_p4 <= r_V_4_reg_2405(13 downto 6);
    tmp_132_fu_1590_p3 <= 
        tmp_130_fu_1576_p2 when (tmp_145_fu_1569_p3(0) = '1') else 
        tmp_131_fu_1581_p4;
    tmp_133_fu_1743_p2 <= std_logic_vector(unsigned(tmp_128_fu_1736_p3) - unsigned(tmp_63_mid2_cast_fu_1733_p1));
    tmp_134_fu_1752_p2 <= std_logic_vector(unsigned(tmp_133_fu_1743_p2) + unsigned(tmp_111_cast_fu_1749_p1));
    tmp_135_fu_1663_p1 <= ap_phi_mux_ka_phi_fu_1169_p4(2 - 1 downto 0);
    tmp_136_fu_1674_p3 <= ap_phi_mux_kb_phi_fu_1181_p4(2 downto 2);
    tmp_137_fu_1707_p1 <= ka_3_fu_1693_p2(2 - 1 downto 0);
    tmp_138_fu_1758_p1 <= stream_in_V_V_dout(8 - 1 downto 0);
    tmp_139_fu_1298_p1 <= stream_in_V_V_dout(8 - 1 downto 0);
    tmp_140_fu_1336_p3 <= (i3_reg_1073 & ap_const_lv2_0);
    tmp_141_fu_1344_p2 <= std_logic_vector(unsigned(tmp_140_fu_1336_p3) - unsigned(tmp_70_cast_fu_1332_p1));
        tmp_142_cast_fu_1762_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_134_reg_2471),64));

    tmp_142_fu_1436_p1 <= p_0144_1_reg_1084(7 - 1 downto 0);
    tmp_143_fu_1440_p3 <= p_0144_1_reg_1084(7 downto 7);
    tmp_144_fu_1424_p2 <= std_logic_vector(unsigned(tmp_141_reg_2069) + unsigned(tmp_118_cast_fu_1420_p1));
        tmp_145_cast_fu_1429_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_144_fu_1424_p2),64));

    tmp_145_fu_1569_p3 <= r_V_4_reg_2405(15 downto 15);
    tmp_62_fu_1194_p2 <= "1" when (tmp_V_reg_1780 = ap_const_lv16_0) else "0";
    tmp_63_mid2_cast_fu_1733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_mid2_v_reg_2445),7));
    tmp_63_mid2_v_fu_1656_p3 <= 
        i_4_fu_1636_p2 when (exitcond_flatten10_reg_2431(0) = '1') else 
        ap_phi_mux_i_phi_fu_1146_p4;
        tmp_65_fu_1205_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_78_reg_1791),32));

    tmp_67_fu_1231_p2 <= "1" when (signed(num_img_cast_fu_1227_p1) < signed(tmp_V_76_reg_1786)) else "0";
    tmp_68_fu_1216_p2 <= "1" when (signed(i7_cast_fu_1212_p1) < signed(KER_bound_reg_1840)) else "0";
    tmp_69_fu_1254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_reg_1026),64));
    tmp_70_cast_fu_1332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_reg_1073),7));
    tmp_s_fu_1189_p2 <= "1" when (tmp_V_reg_1780 = ap_const_lv16_1) else "0";
    x_V_y_V_i_fu_1448_p3 <= 
        ap_const_lv7_0 when (tmp_143_fu_1440_p3(0) = '1') else 
        tmp_142_fu_1436_p1;
end behav;
