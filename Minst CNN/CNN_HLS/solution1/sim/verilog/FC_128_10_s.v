// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FC_128_10_s (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        stream_in_V_V_dout,
        stream_in_V_V_empty_n,
        stream_in_V_V_read,
        stream_out_V_V_din,
        stream_out_V_V_full_n,
        stream_out_V_V_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [7:0] stream_in_V_V_dout;
input   stream_in_V_V_empty_n;
output   stream_in_V_V_read;
output  [7:0] stream_out_V_V_din;
input   stream_out_V_V_full_n;
output   stream_out_V_V_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    FC_Block_codeRepl154_U0_ap_start;
wire    FC_Block_codeRepl154_U0_ap_done;
wire    FC_Block_codeRepl154_U0_ap_continue;
wire    FC_Block_codeRepl154_U0_ap_idle;
wire    FC_Block_codeRepl154_U0_ap_ready;
wire    FC_Block_codeRepl154_U0_stream_in_V_V_read;
wire   [7:0] FC_Block_codeRepl154_U0_stream_out_V_V_din;
wire    FC_Block_codeRepl154_U0_stream_out_V_V_write;
wire    ap_sync_continue;
wire    ap_sync_done;
wire    ap_sync_ready;
wire    FC_Block_codeRepl154_U0_start_full_n;
wire    FC_Block_codeRepl154_U0_start_write;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
end

FC_Block_codeRepl154 FC_Block_codeRepl154_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(FC_Block_codeRepl154_U0_ap_start),
    .ap_done(FC_Block_codeRepl154_U0_ap_done),
    .ap_continue(FC_Block_codeRepl154_U0_ap_continue),
    .ap_idle(FC_Block_codeRepl154_U0_ap_idle),
    .ap_ready(FC_Block_codeRepl154_U0_ap_ready),
    .stream_in_V_V_dout(stream_in_V_V_dout),
    .stream_in_V_V_empty_n(stream_in_V_V_empty_n),
    .stream_in_V_V_read(FC_Block_codeRepl154_U0_stream_in_V_V_read),
    .stream_out_V_V_din(FC_Block_codeRepl154_U0_stream_out_V_V_din),
    .stream_out_V_V_full_n(stream_out_V_V_full_n),
    .stream_out_V_V_write(FC_Block_codeRepl154_U0_stream_out_V_V_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign FC_Block_codeRepl154_U0_ap_continue = ap_continue;

assign FC_Block_codeRepl154_U0_ap_start = real_start;

assign FC_Block_codeRepl154_U0_start_full_n = 1'b1;

assign FC_Block_codeRepl154_U0_start_write = 1'b0;

assign ap_done = FC_Block_codeRepl154_U0_ap_done;

assign ap_idle = FC_Block_codeRepl154_U0_ap_idle;

assign ap_ready = internal_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = FC_Block_codeRepl154_U0_ap_done;

assign ap_sync_ready = FC_Block_codeRepl154_U0_ap_ready;

assign internal_ap_ready = ap_sync_ready;

assign start_out = real_start;

assign stream_in_V_V_read = FC_Block_codeRepl154_U0_stream_in_V_V_read;

assign stream_out_V_V_din = FC_Block_codeRepl154_U0_stream_out_V_V_din;

assign stream_out_V_V_write = FC_Block_codeRepl154_U0_stream_out_V_V_write;

endmodule //FC_128_10_s
